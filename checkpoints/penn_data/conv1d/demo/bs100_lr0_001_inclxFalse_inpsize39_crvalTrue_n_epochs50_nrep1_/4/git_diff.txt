Tue Mar 12 15:57:11 PDT 2024
diff --git a/.DS_Store b/.DS_Store
index bf7630a..dc28301 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/.ipynb_checkpoints/analyze_models-checkpoint.ipynb b/.ipynb_checkpoints/analyze_models-checkpoint.ipynb
index a605da2..57b272a 100644
--- a/.ipynb_checkpoints/analyze_models-checkpoint.ipynb
+++ b/.ipynb_checkpoints/analyze_models-checkpoint.ipynb
@@ -9,13 +9,14 @@
    "source": [
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
-    "\n",
-    "import eval_tools as eval"
+    "from os import path as osp\n",
+    "import eval_tools as eval\n",
+    "import deepdish as dd"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 2,
    "id": "14bf950d-a4f6-43a5-a1f1-51fd50ea0a8d",
    "metadata": {
     "scrolled": true
@@ -25,22 +26,72 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Getting metrics from checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1\n",
-      "Loading 'basic_feedforward' from checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py\n",
-      "Loading 'penn_dataset' from checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py\n",
-      "Data is 1-fold partitioned.\n",
-      "Evaluating fold 1...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Models evaluated. Computing metrics...\n",
-      "Done.\n"
+      "Getting metrics from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2\n",
+      "Loading 'basic_feedforward' from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/basic_feedforward.py\n",
+      "Loading 'penn_dataset' from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/penn_dataset.py\n"
      ]
     },
+    {
+     "ename": "ValueError",
+     "evalue": "too many values to unpack (expected 2)",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[2], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m specific_run \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m runDir \u001b[38;5;241m=\u001b[39m osp\u001b[38;5;241m.\u001b[39mjoin(general_dir,run_name,specific_run)\n\u001b[0;32m----> 5\u001b[0m info \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43meval\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_metrics\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrunDir\u001b[49m\u001b[43m,\u001b[49m\u001b[43mn_thresholds\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1000\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mnonlin_thresholds\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/segmentation/eval_tools.py:107\u001b[0m, in \u001b[0;36mget_metrics\u001b[0;34m(run_dir, n_thresholds, checkpoint_num, softmax, nonlin_thresholds, write_file, read_file)\u001b[0m\n\u001b[1;32m    104\u001b[0m model,model_name \u001b[38;5;241m=\u001b[39m fet\u001b[38;5;241m.\u001b[39mload(model_config,config)\n\u001b[1;32m    106\u001b[0m \u001b[38;5;66;03m# load data\u001b[39;00m\n\u001b[0;32m--> 107\u001b[0m kfold_loaders,k_inds \u001b[38;5;241m=\u001b[39m fet\u001b[38;5;241m.\u001b[39mload(data_config, config)\n\u001b[1;32m    108\u001b[0m nfolds \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(kfold_loaders)\n\u001b[1;32m    109\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mData is \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m-fold partitioned.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(nfolds))\n",
+      "\u001b[0;31mValueError\u001b[0m: too many values to unpack (expected 2)"
+     ]
+    }
+   ],
+   "source": [
+    "general_dir = 'checkpoints/penn_data'\n",
+    "run_name = 'gpt-FCNN/hyperparam_testing'\n",
+    "specific_run = \"bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_\"\n",
+    "runDir = osp.join(general_dir,run_name,specific_run)\n",
+    "info = eval.get_metrics(runDir,n_thresholds = 1000,nonlin_thresholds = False)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "id": "6b6f0bf3-ebdf-4bc1-9faa-c53bc3305815",
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "FileNotFoundError",
+     "evalue": "``/Users/gorg/segmentation/model_evals/FFNN_basic_metrics.h5`` does not exist",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[2], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m save_dir \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmodel_evals\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      3\u001b[0m metricDict \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFFNN_basic_metrics.h5\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m----> 4\u001b[0m info \u001b[38;5;241m=\u001b[39m \u001b[43mdd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mio\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mosp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mjoin\u001b[49m\u001b[43m(\u001b[49m\u001b[43msave_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43mmetricDict\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/deepdish/io/hdf5io.py:636\u001b[0m, in \u001b[0;36mload\u001b[0;34m(path, group, sel, unpack)\u001b[0m\n\u001b[1;32m    602\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mload\u001b[39m(path, group\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, sel\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, unpack\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[1;32m    603\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    604\u001b[0m \u001b[38;5;124;03m    Loads an HDF5 saved with `save`.\u001b[39;00m\n\u001b[1;32m    605\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    634\u001b[0m \n\u001b[1;32m    635\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 636\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mtables\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen_file\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \u001b[38;5;28;01mas\u001b[39;00m h5file:\n\u001b[1;32m    637\u001b[0m         pathtable \u001b[38;5;241m=\u001b[39m {}  \u001b[38;5;66;03m# dict to keep track of objects already loaded\u001b[39;00m\n\u001b[1;32m    638\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m group \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/tables/file.py:294\u001b[0m, in \u001b[0;36mopen_file\u001b[0;34m(filename, mode, title, root_uep, filters, **kwargs)\u001b[0m\n\u001b[1;32m    289\u001b[0m             \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    290\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe file \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is already opened.  Please \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    291\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mclose it before reopening in write mode.\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m filename)\n\u001b[1;32m    293\u001b[0m \u001b[38;5;66;03m# Finally, create the File instance, and return it\u001b[39;00m\n\u001b[0;32m--> 294\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtitle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mroot_uep\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfilters\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/tables/file.py:744\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, filename, mode, title, root_uep, filters, **kwargs)\u001b[0m\n\u001b[1;32m    741\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mparams \u001b[38;5;241m=\u001b[39m params\n\u001b[1;32m    743\u001b[0m \u001b[38;5;66;03m# Now, it is time to initialize the File extension\u001b[39;00m\n\u001b[0;32m--> 744\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_g_new\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mparams\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    746\u001b[0m \u001b[38;5;66;03m# Check filters and set PyTables format version for new files.\u001b[39;00m\n\u001b[1;32m    747\u001b[0m new \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_v_new\n",
+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/tables/hdf5extension.pyx:394\u001b[0m, in \u001b[0;36mtables.hdf5extension.File._g_new\u001b[0;34m()\u001b[0m\n",
+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/tables/utils.py:146\u001b[0m, in \u001b[0;36mcheck_file_access\u001b[0;34m(filename, mode)\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    144\u001b[0m     \u001b[38;5;66;03m# The file should be readable.\u001b[39;00m\n\u001b[1;32m    145\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m os\u001b[38;5;241m.\u001b[39maccess(path, os\u001b[38;5;241m.\u001b[39mF_OK):\n\u001b[0;32m--> 146\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m``\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m`` does not exist\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    147\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m path\u001b[38;5;241m.\u001b[39mis_file():\n\u001b[1;32m    148\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mIsADirectoryError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m``\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mpath\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m`` is not a regular file\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
+      "\u001b[0;31mFileNotFoundError\u001b[0m: ``/Users/gorg/segmentation/model_evals/FFNN_basic_metrics.h5`` does not exist"
+     ]
+    }
+   ],
+   "source": [
+    "# LOAD MODEL FROM FILE\n",
+    "save_dir = 'model_evals'\n",
+    "metricDict = 'FFNN_basic_metrics.h5'\n",
+    "info = dd.io.load(osp.join(save_dir,metricDict))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "id": "8fa7d522-a68a-401a-a426-0c7f9f3f1b1a",
+   "metadata": {},
+   "outputs": [
     {
      "data": {
       "text/plain": [
-       "AttrDict({'batch_size': 100, 'beta1': 0.9, 'beta2': 0.999, 'cross_validate': False, 'data_config': 'penn_dataset.py', 'git_commit': '7416bf730b356aabfe0df644240e40948a8196bb', 'include_coords': False, 'input_size': 39, 'learning_rate': 0.001, 'log_train_values': True, 'log_val_test': True, 'model_config': 'basic_feedforward.py', 'n_repeats': 1, 'report_loss_every': 50, 'rescale': True, 'results_dir': 'checkpoints', 'resume': False, 'run_name': 'plotting', 'save_check_points': 50, 'save_test_predictions': False, 'split_seed': 1, 'total_evaluations': 100, 'train_epochs': 100, 'train_split': 0.8, 'use_mps': False})"
+       "8482"
       ]
      },
      "execution_count": 3,
@@ -49,40 +100,86 @@
     }
    ],
    "source": [
-    "runDir = 'checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_'\n",
-    "info = eval.get_metrics(runDir,n_thresholds = 10000)"
+    "info['params']"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "ff0548de-9fd3-4b6b-b015-d43325c2c3f6",
+   "metadata": {},
+   "source": [
+    "#### Plot training loss"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 4,
    "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
    "metadata": {},
    "outputs": [
     {
      "data": {
+      "image/png": "",
       "text/plain": [
-       "dict_keys(['thresholds', 'config', 'params', 'test_time', 'test_loss', 'train_acc', 'train_prec', 'train_tpr', 'train_fpr', 'train_F1', 'test_acc', 'test_prec', 'test_tpr', 'test_fpr', 'test_F1', 'val_acc', 'val_prec', 'val_tpr', 'val_fpr', 'val_F1'])"
+       "<Figure size 640x480 with 1 Axes>"
       ]
      },
-     "execution_count": 9,
      "metadata": {},
-     "output_type": "execute_result"
+     "output_type": "display_data"
     }
    ],
    "source": [
-    "info.keys()"
+    "eval.plot_train_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "2b7375f8-5b21-45f4-a5c1-45ba2218330a",
+   "metadata": {},
+   "source": [
+    "#### Plot test loss vs. train time"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 5,
    "id": "ac815258-7141-4e1c-8ea8-b6598aa6dd27",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "eval.plot_test_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c5e82793-656c-492a-9a1b-b422b8c1af0f",
+   "metadata": {},
+   "source": [
+    "#### Plot train vs. test loss"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "id": "cdfb8940-95f8-4926-af92-054760b8a7f0",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -92,29 +189,26 @@
     }
    ],
    "source": [
-    "# # PLOT TEST LOSS VS TIME\n",
-    "# def plot_loss(run_info,**kwargs):\n",
-    "#     times = run_info['test_time']\n",
-    "#     losses = run_info['test_loss']\n",
-    "#     for k in range(len(times)):\n",
-    "#         plt.plot(times[k],losses[k],label = 'fold {} loss'.format(k+1))\n",
-    "#     plt.xlabel(\"training time\")\n",
-    "#     plt.ylabel(\"test loss\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
-    "eval.plot_loss(info)"
+    "eval.plot_train_test_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "5e5db2e0-29bc-4837-b78c-c6a255b89e0b",
+   "metadata": {},
+   "source": [
+    "#### Plot accuracy vs. positive threshold"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 7,
    "id": "edb8dbe5-1fe6-4dc3-9aa2-39f44d7939ab",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -124,59 +218,56 @@
     }
    ],
    "source": [
-    "# # PLOT ACCURACY VS THRESHOLD\n",
-    "# def plot_accuracy(run_info,**kwargs):\n",
-    "#     ts = run_info['thresholds']\n",
-    "#     subsets = ['train','test','val']\n",
-    "#     for subset in subsets:\n",
-    "#         accs = run_info[subset+'_acc']\n",
-    "#         plt.plot(ts,accs,label = subset,**kwargs)\n",
-    "#     plt.xlabel(\"classification threshold\")\n",
-    "#     plt.ylabel(\"accuracy\")\n",
-    "#     plt.title(\"Classifier accuracy vs. threshold\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_accuracy(info)"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "6403e0db-877e-4e0e-b3b3-af74a2130d8e",
+   "metadata": {},
+   "source": [
+    "#### Plot F1 score vs. positive threshold"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 8,
    "id": "a2782025-287b-4e3e-8e49-8d3a487554cb",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
      },
      "metadata": {},
      "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "F1 score maximized at threshold 0.549\n"
+     ]
     }
    ],
    "source": [
-    "# PLOT F1 SCORE VS THRESHOLD\n",
-    "# def plot_F1(run_info,**kwargs):\n",
-    "#     ts = run_info['thresholds']\n",
-    "#     subsets = ['test']\n",
-    "#     for subset in subsets:\n",
-    "#         accs = run_info[subset+'_F1']\n",
-    "#         plt.plot(ts,accs,label = subset,**kwargs)\n",
-    "#     plt.xlabel(\"classification threshold\")\n",
-    "#     plt.ylabel(\"F1 Score\")\n",
-    "#     plt.title(\"F1 score vs. threshold\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_F1(info)"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "72f828e8-8674-4abb-8263-72b649500628",
+   "metadata": {},
+   "source": [
+    "####  Plot ROC curves"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 9,
    "id": "b5644cf6-3b0f-4ff6-abe4-60dd790fa337",
    "metadata": {
     "scrolled": true
@@ -184,7 +275,7 @@
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "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",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -194,34 +285,26 @@
     }
    ],
    "source": [
-    "# PLOT ROC CURVES\n",
-    "# def plot_ROC(run_info,**kwargs):\n",
-    "#     subsets = ['train','test','val']\n",
-    "#     for subset in subsets:\n",
-    "#         tprs = np.append(run_info[subset+'_tpr'][::-1],1)\n",
-    "#         fprs = np.append(run_info[subset+'_fpr'][::-1],1)\n",
-    "#         auc = np.trapz(tprs,fprs)\n",
-    "#         plt.plot(fprs,tprs,label = subset + \"; AUC = {}\".format(auc),**kwargs)\n",
-    "#     line = np.linspace(0,1,100)\n",
-    "#     plt.plot(line,line,'k--')\n",
-    "#     plt.xlabel(\"False positive rate\")\n",
-    "#     plt.ylabel(\"True positive rate\")\n",
-    "#     plt.title(\"ROC Curves; in/out of sample\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_ROC(info)"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "7cffb073-6d1d-4ba1-908c-ac1e8c3e63f0",
+   "metadata": {},
+   "source": [
+    "#### Plot PR curves"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 10,
    "id": "0668184c-cd7c-4349-aee3-7397605c62b9",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAAByuUlEQVR4nO3deVhU1f8H8PfMAMMOsi+iqOAKQm6Eu4bikkmLolkuqW1aGmmpmdqKVpamFl9brZ9bllmpoYhamuaGayrugsoqwrDINnN/f4wMDAz7zFx03q/nmYeZM+feOXcGnQ/nfM45EkEQBBARERGZEKnYDSAiIiIyNgZAREREZHIYABEREZHJYQBEREREJocBEBEREZkcBkBERERkchgAERERkclhAEREREQmhwEQERERmRwGQER035g4cSJ8fX3FboZojhw5gp49e8LGxgYSiQQnTpwQu0l6ZeqfLxkXAyCievj+++8hkUg0N0tLS7Rt2xbTp09HWlqapt7evXu16slkMri5ueGpp57CuXPn6vWaly9fxgsvvIDWrVvD0tIS9vb26NWrF5YvX467d+/q+xIfeHfu3IGZmRl++ukng5z/7NmzWLRoEa5du6bX85aUlGDUqFHIysrCZ599hh9//BEtW7bU62sQmRIzsRtAdD9699130apVKxQWFmL//v348ssvsX37dpw5cwbW1taaeq+++iq6d++OkpISnDp1CjExMdi7dy/OnDkDDw+PWl9n27ZtGDVqFORyOcaPH4+AgAAUFxdj//79mD17Nv777z+sXr3akJfapHz11VdQqVSNOseOHTsgkUgwePBgPbVK29mzZ/HOO++gf//+eu3NuHz5Mq5fv46vvvoKU6ZM0dt5iUwVAyCiBhg6dCi6desGAJgyZQqcnZ3x6aef4rfffsPYsWM19fr06YOnnnpK87hdu3Z46aWX8MMPP+CNN96o8TWuXr2KMWPGoGXLlti9ezc8PT01z02bNg2XLl3Ctm3b9HI9+fn5sLGx0cu5DMnc3LzR59i+fTt69eoFR0fHxjfIiNLT0wHgvms3UVPFITAiPRg4cCAAddBSkz59+gBQ/zVfm48++gh5eXn45ptvtIKfMn5+fpgxYwYA4Nq1a5BIJPj++++r1JNIJFi0aJHm8aJFiyCRSHD27Fk8/fTTaNasGXr37o1PPvkEEokE169fr3KO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",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -231,21 +314,16 @@
     }
    ],
    "source": [
-    "# PLOT PR CURVES\n",
-    "# def plot_PR(run_info,**kwargs):\n",
-    "#     subsets = ['test','val']\n",
-    "#     for subset in subsets:\n",
-    "#         precs = run_info[subset+'_prec'][::-1]\n",
-    "#         recs = run_info[subset+'_tpr'][::-1]\n",
-    "#         plt.plot(recs,precs,label = subset,**kwargs)\n",
-    "#     plt.xlabel(\"Recall\")\n",
-    "#     plt.ylabel(\"Precision\")\n",
-    "#     plt.title(\"PR Curves; out of sample\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_PR(info)"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "907da525-c829-4e2a-ab1f-69090dcb2789",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
index 0c4bcd1..9dd3aa7 100644
--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
@@ -5,11 +5,11 @@ import numpy as np
 
 from forge import flags
 
-flags.DEFINE_boolean(
-    "model_with_dict",
-    True,
-    "Makes model output predictions in dictionary instead of directly."
-)
+# flags.DEFINE_boolean(
+#     "model_with_dict",
+#     True,
+#     "Makes model output predictions in dictionary instead of directly."
+# )
 
 class PerceptronNN(nn.Module):
     def __init__(self, input_size, num_labels):
@@ -17,24 +17,58 @@ class PerceptronNN(nn.Module):
         # Define the layers
         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
         self.fc2 = nn.Linear(128, 64)         # Second dense layer
+        # self.fc23 = nn.Linear(64,64)
         self.fc3 = nn.Linear(64, 64)          # Third dense layer
         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        self.softmax = nn.Softmax(dim=1)
+        # self.softmax = nn.Softmax(dim=1)
 
     def forward(self, x):
         # Forward pass through the network
         x = F.relu(self.fc1(x))  # Activation function between layers
         x = F.relu(self.fc2(x))
+        # x = F.relu(self.fc23(x))
         x = F.relu(self.fc3(x))
         x = self.fc4(x)  # No activation, this will be included in the loss function
-        x = self.softmax(x)
+        # x = self.softmax(x)
+        return x
+
+class BasicFFNN(nn.Module):
+    def __init__(self, input_size, num_labels):
+        super(BasicFFNN, self).__init__()
+        # Define the layers
+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
+        
+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
+
+        self.fc3 = nn.Linear(32,32)
+        self.bn3 = nn.BatchNorm1d(32)
+
+        self.fc4 = nn.Linear(32, num_labels)  # Output layer
+
+    def forward(self, x):
+    	x = x['data']
+        # Forward pass through the network with activations, batch normalization, and dropout
+        x = F.relu(self.bn1(self.fc1(x)))
+        x = self.dropout1(x)
+        x = F.relu(self.bn2(self.fc2(x)))
+        x = self.dropout2(x)
+        x = F.relu(self.bn3(self.fc3(x)))
+        x = self.fc4(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
         return x
 
 def load(config):
 
     # n_channels = 1
     n_features = config.input_size
+
+    mlp = BasicFFNN(n_features,2)
     
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
+    return mlp, "gpt_feedforward_halfLs"
+
+
+
+
diff --git a/.ipynb_checkpoints/testing-checkpoint.ipynb b/.ipynb_checkpoints/testing-checkpoint.ipynb
index 8242b04..f789c23 100644
--- a/.ipynb_checkpoints/testing-checkpoint.ipynb
+++ b/.ipynb_checkpoints/testing-checkpoint.ipynb
@@ -2,161 +2,449 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 37,
+   "execution_count": 1,
    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
    "metadata": {},
    "outputs": [],
    "source": [
     "import torch\n",
+    "import torch.nn as nn\n",
+    "import torch.nn.functional as F\n",
     "import numpy as np\n",
     "from sklearn.model_selection import RepeatedKFold\n",
     "import pandas as pd\n",
-    "from torch.utils.data import Dataset, DataLoader\n",
+    "from torch.utils.data import Dataset, DataLoader, Sampler\n",
     "\n",
     "import matplotlib.pyplot as plt\n",
-    "from os import path as osp"
+    "from os import path as osp\n",
+    "\n",
+    "import forge\n",
+    "from forge import flags\n",
+    "import forge.experiment_tools as fet\n",
+    "\n",
+    "from penn_dataset import PennData,headingSampler"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
-   "id": "e1759421-97cf-4ca4-90cf-5509eb48455e",
+   "execution_count": 42,
+   "id": "92bae5ef-5c95-4528-a76d-003bbe09786c",
    "metadata": {},
    "outputs": [],
    "source": [
-    "data_dir = './penn_data'\n",
-    "headings = ['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'];\n",
-    "\n",
-    "all_ind = np.arange(len(headings))\n",
-    "train_split = 0.8\n",
-    "\n",
-    "kf = RepeatedKFold(n_splits = int(len(headings)/((1-train_split)*len(headings))), n_repeats = 3, random_state = 1)\n",
-    "\n",
-    "# for i, (train_ind, test_ind) in enumerate(kf.split(headings)):\n",
-    "    "
+    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n",
+    "kinds = None\n",
+    "dat = PennData('./penn_data',headings,include_coords = False,k_inds = kinds)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
-   "id": "432286fa-8df2-4e66-aa06-0a8a9170dedc",
+   "execution_count": 53,
+   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([10, 1, 39])"
+      ]
+     },
+     "execution_count": 53,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-    "# for i, (train_ind, test_ind) in enumerate(kf.split(headings)):\n",
-    "#     # Import training data\n",
-    "#     # Import spectra\n",
-    "#     df_list = []\n",
-    "#     for ind in train_ind:\n",
-    "#         df_temp = pd.read_csv('./penn_data/kvals_fuse_rotate_'+headings[ind]+'.csv',header=None)\n",
-    "#         df_list.append(df_temp)\n",
-    "#     df = pd.concat(df_list, ignore_index=True)\n",
-    "#     df_std = df.std();\n",
-    "#     df_mean = df.mean();\n",
-    "#     df = (df - df_mean)/df_std\n",
-    "#     # df"
+    "df,bounds = pad_dataframe(dat.df)\n",
+    "loader = DataLoader(dat,batch_size = 10,sampler = None)\n",
+    "example = next(iter(loader))\n",
+    "xx = torch.unsqueeze(example['data'].float(),1)\n",
+    "s = xx.shape\n",
+    "s"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 93,
-   "id": "2f94c062-2423-41f1-bf7c-dbc10f8b058a",
+   "execution_count": 60,
+   "id": "c15fbcaf-a7cd-4b52-9b94-81b3b16dee64",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([10, 16, 37])"
+      ]
+     },
+     "execution_count": 60,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m = nn.Conv1d(s[1],16,3)\n",
+    "m(xx).shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 34,
+   "id": "94bb950c-609a-44f2-a6f4-5d50f944cd90",
    "metadata": {},
    "outputs": [],
    "source": [
-    "class PennData(Dataset):\n",
-    "\n",
-    "    def __init__(self,path_to_data,headings,kinds,spectra_prefix = \"kvals_fuse_rotate_\",label_prefix = 'labels_fuse_rotate_'):\n",
-    "        self.data_dir = path_to_data\n",
-    "\n",
-    "        self.headings = headings\n",
-    "\n",
-    "        df_list = []\n",
-    "        label_list = []\n",
-    "        for heading in self.headings: # for each datafile heading,\n",
-    "            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv')\n",
-    "            print(data_name)\n",
-    "            df_temp = pd.read_csv(data_name,header=None)\n",
-    "            df_list.append(df_temp)\n",
-    "\n",
-    "            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv')\n",
-    "            label_temp = pd.read_csv(label_name,header=None, names=['label'])\n",
-    "            label_list.append(label_temp)\n",
-    "\n",
-    "        df = pd.concat(df_list, ignore_index=True)\n",
-    "        df_std = df.std();\n",
-    "        df_mean = df.mean();\n",
-    "        df = (df - df_mean)/df_std\n",
-    "\n",
-    "        labels = pd.concat(label_list, ignore_index=True)\n",
-    "        # Append labels to data, and scramble rows\n",
-    "        df = pd.concat([labels, df], axis=\"columns\")\n",
+    "class ConvNN(nn.Module):\n",
+    "    def __init__(self, input_size, dim_hidden, kernel_size,num_classes):\n",
+    "        super(ConvNN, self).__init__()\n",
+    "        # Define the layers\n",
+    "        self.conv1 = nn.Conv1d(input_size,dim_hidden,kernel_size)  # First convolution layer\n",
+    "        self.conv2 = nn.Conv1d(dim_hidden,dim_hidden,kernel_size) # second convolution layer\n",
+    "        \n",
+    "        self.pool1 = nn.MaxPool1d(kernel_size,stride = 2)\n",
+    "        # self.softmax = nn.Softmax(dim=1)\n",
     "\n",
-    "        self.alldata = df\n",
+    "    def forward(self, x):\n",
+    "    \tx = x['data']\n",
+    "    \tx = torch.unsqueeze(x,1) # add a single channel index\n",
     "\n",
+    "        # Forward pass through the network\n",
+    "        x = F.relu(self.conv1(x))  # Activation function between layers\n",
     "        \n",
+    "        x = F.relu(self.conv2(x))\n",
     "\n",
-    "        def __len__(self):\n",
-    "            return len(self.alldata)\n",
+    "        x = self.pool1(x)\n",
+    "        return x\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 38,
+   "id": "14013b2d-5847-4e1a-800e-edd273d8d791",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'label': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n",
+       " 'coords': tensor([[ 0., 28., 18.],\n",
+       "         [ 0., 29., 48.],\n",
+       "         [ 0., 27., 25.],\n",
+       "         [ 0., 32., 17.],\n",
+       "         [ 0.,  8., 36.],\n",
+       "         [ 0., 19., 35.],\n",
+       "         [ 0., 33., 45.],\n",
+       "         [ 0.,  7., 25.],\n",
+       "         [ 0.,  6.,  5.],\n",
+       "         [ 0., 36., 35.]], dtype=torch.float64),\n",
+       " 'data': tensor([[-0.4918, -0.5943, -1.0721, -0.9575, -0.6650, -0.7359],\n",
+       "         [-0.6024, -1.1120, -0.5868,  0.0182,  0.7436, -0.2009],\n",
+       "         [-0.8743, -0.2060, -1.3125, -0.3913, -0.3318, -0.1418],\n",
+       "         [ 0.3684, -0.0516, -0.7292, -1.1248, -0.7590, -0.5693],\n",
+       "         [-0.7428, -0.7065, -1.0986, -0.8626, -1.0908, -1.0204],\n",
+       "         [ 0.0483, -0.7283,  1.1701, -0.0736, -1.2278, -0.2546],\n",
+       "         [-0.3632, -1.0483,  1.1965, -0.5309, -1.1567,  1.5961],\n",
+       "         [-1.2088, -0.7159, -0.7503, -0.7777, -0.2693, -0.7245],\n",
+       "         [-0.9576, -0.6151,  0.5618,  1.8565,  3.3299,  2.6075],\n",
+       "         [-0.3988, -0.2353,  0.0685, -1.2082, -0.7855, -1.1990]],\n",
+       "        dtype=torch.float64)}"
+      ]
+     },
+     "execution_count": 38,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "inps"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "id": "158d7836-db5c-4210-9814-43806dd777ad",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([153300, 2])"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "torch.cat(outs,dim = 0).shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "id": "68243435-58a8-4717-ae96-bd281fbd64c5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = SpectralAttentionNet(len(kinds),16,2)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "id": "0dde6efa-3ce3-4f89-abc6-5893e066f9dc",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[-0.6669,  0.0875],\n",
+       "        [-0.7097,  0.0436],\n",
+       "        [-0.6941,  0.0615],\n",
+       "        [-0.6393,  0.1075],\n",
+       "        [-0.7090,  0.0438],\n",
+       "        [-0.7054,  0.0472],\n",
+       "        [-0.7099,  0.0442],\n",
+       "        [-0.7042,  0.0485],\n",
+       "        [-0.5686,  0.1150],\n",
+       "        [-0.7015,  0.0549]], grad_fn=<AddmmBackward0>)"
+      ]
+     },
+     "execution_count": 25,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "model(inps)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "id": "45e4cc12-5ef6-40ad-ad9e-45988ac7dbc1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
     "\n",
-    "        \n",
     "\n",
-    "    \n",
-    "        \n",
-    "        "
+    "    "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "id": "81dd05f3-bee8-43a4-8c51-f92e023bae25",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>label</th>\n",
+       "      <th>h_idx</th>\n",
+       "      <th>nslice</th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>...</th>\n",
+       "      <th>31</th>\n",
+       "      <th>32</th>\n",
+       "      <th>33</th>\n",
+       "      <th>34</th>\n",
+       "      <th>35</th>\n",
+       "      <th>36</th>\n",
+       "      <th>37</th>\n",
+       "      <th>38</th>\n",
+       "      <th>39</th>\n",
+       "      <th>40</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0.001812</td>\n",
+       "      <td>0.002843</td>\n",
+       "      <td>0.001445</td>\n",
+       "      <td>0.003165</td>\n",
+       "      <td>0.002113</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.016286</td>\n",
+       "      <td>0.019752</td>\n",
+       "      <td>0.027634</td>\n",
+       "      <td>0.039219</td>\n",
+       "      <td>0.053746</td>\n",
+       "      <td>0.070735</td>\n",
+       "      <td>0.089852</td>\n",
+       "      <td>0.110827</td>\n",
+       "      <td>0.133419</td>\n",
+       "      <td>0.157407</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>1 rows × 44 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "   label  h_idx  nslice  0  1         2         3         4         5  \\\n",
+       "4      0      0       0  2  2  0.001812  0.002843  0.001445  0.003165   \n",
+       "\n",
+       "          6  ...        31        32        33        34        35        36  \\\n",
+       "4  0.002113  ...  0.016286  0.019752  0.027634  0.039219  0.053746  0.070735   \n",
+       "\n",
+       "         37        38        39        40  \n",
+       "4  0.089852  0.110827  0.133419  0.157407  \n",
+       "\n",
+       "[1 rows x 44 columns]"
+      ]
+     },
+     "execution_count": 18,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# imagemask = (df['h_idx'] == 0)\n",
+    "# coordmask = ((df[0] == 1) and (df[1] == 1))\n",
+    "df[(df['h_idx'] == 0) & ((df[0] == 2) & (df[1] == 2))]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "52ef379d-ba80-4851-96d7-d9d6ba474406",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "18686a3f-9652-4889-916e-8e70459381b4",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "78b89c6b-8a3b-45e7-99a8-b00cfac50d49",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "fd0a8ff8-df49-4b44-884f-588be5bc2d3c",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
+    "flags.DEFINE_st\n",
+    "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Loading 'penn_dataset' from penn_dataset.py\n"
+     ]
+    }
+   ],
+   "source": [
+    "config = forge.config()\n",
+    "loaddat = fet.load(\"penn_dataset.py\",config) # loaddat[fold][train/test][batch][data]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 104,
-   "id": "3223f768-c908-4065-b93e-27326369b028",
+   "execution_count": 5,
+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "./penn_data/kvals_fuse_rotate_aaa0060.csv\n",
-      "./penn_data/kvals_fuse_rotate_aaa0061.csv\n",
-      "./penn_data/kvals_fuse_rotate_aaa0063.csv\n"
+      "Loading 'basic_feedforward' from basic_feedforward.py\n"
      ]
     }
    ],
    "source": [
-    "penn = PennData(data_dir,headings[2:5])"
+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 106,
-   "id": "3bc22e44-c11e-4a45-abfc-1408e9b5beb6",
+   "execution_count": 13,
+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "24385"
+       "array([114170,    904])"
       ]
      },
-     "execution_count": 106,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "testdat = penn.alldata\n",
-    "len(testdat)"
+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "51f7cd80-7ba7-4782-ad50-778ac7a4bfa0",
+   "id": "c5365067-c017-41b4-9b6b-3752b3d100e8",
    "metadata": {},
    "outputs": [],
-   "source": [
-    "poslocs"
-   ]
+   "source": []
   },
   {
    "cell_type": "code",
diff --git a/.ipynb_checkpoints/todo-checkpoint.txt b/.ipynb_checkpoints/todo-checkpoint.txt
index 0fd9ad1..b151bc9 100644
--- a/.ipynb_checkpoints/todo-checkpoint.txt
+++ b/.ipynb_checkpoints/todo-checkpoint.txt
@@ -1,10 +1,7 @@
 To Do on modeling:
 
-- write results to file with deepdish, then read them to compare models
+- Try new padding scheme
 
-- get code working with a subset of kvals
-
-- get Conv1d working as an architecture
-
-- consider patch-attention based strategy
+- Test and fit selected models more completely
 
+- Extract model predictions for ROC etc from visual models
diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
index 4a02232..f8b4915 100644
Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
diff --git a/__pycache__/eval_tools.cpython-39.pyc b/__pycache__/eval_tools.cpython-39.pyc
index cbe6232..b956105 100644
Binary files a/__pycache__/eval_tools.cpython-39.pyc and b/__pycache__/eval_tools.cpython-39.pyc differ
diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
index ea4dbe7..4251292 100644
Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
diff --git a/analyze_models.ipynb b/analyze_models.ipynb
index e7c8b8b..734374c 100644
--- a/analyze_models.ipynb
+++ b/analyze_models.ipynb
@@ -10,249 +10,13 @@
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
     "from os import path as osp\n",
-    "import eval_tools as eval"
+    "import eval_tools as eval\n",
+    "import deepdish as dd"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 2,
-   "id": "53e1a620-38c0-45ed-aebc-5b35dfdd390c",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import torch\n",
-    "import numpy as np\n",
-    "import json\n",
-    "import torch.nn.functional as F\n",
-    "import deepdish as dd\n",
-    "\n",
-    "import torchmetrics\n",
-    "from torchmetrics.classification import BinaryConfusionMatrix\n",
-    "\n",
-    "import matplotlib.pyplot as plt\n",
-    "from os import path as osp\n",
-    "import os\n",
-    "import re\n",
-    "import h5py\n",
-    "\n",
-    "import forge\n",
-    "from forge import flags\n",
-    "import forge.experiment_tools as fet\n",
-    "from forge import load_from_checkpoint\n",
-    "from attrdict import AttrDict\n",
-    "\n",
-    "from train_tools import param_count,nested_to\n",
-    "from scipy.interpolate import interp1d"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "33eab461-6ffd-465d-8004-048197bf8a96",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_acc(arr): # get accuracy of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[1,1] + x[0,0])/(x[0,0] + x[0,1] + x[1,0] + x[1,1]) if (x[0,0] + x[0,1] + x[1,0] + x[1,1]) else 0 for x in arr])\n",
-    "\n",
-    "def get_prec(arr): # get precision of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[1,1])/(x[1,1] + x[0,1]) if (x[1,1] + x[0,1]) > 0 else 0 for x in arr])\n",
-    "\n",
-    "def get_tpr(arr): # get true positive rate/recall of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[1,1])/(x[1,1] + x[1,0]) if (x[1,1] + x[1,0]) > 0 else 0 for x in arr])\n",
-    "\n",
-    "def get_fpr(arr): # get false positive rate of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[0,1])/(x[0,1] + x[0,0]) if (x[0,1] + x[0,0]) > 0 else 0 for x in arr])\n",
-    "\n",
-    "def get_F1(arr): # get F1-score of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([2*x[1,1]/(2*x[1,1] + x[0,1] + x[1,0]) if (2*x[1,1] + x[0,1] + x[1,0]) > 0 else 0 for x in arr])\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "e0dfe2b8-8b27-4bdd-a2d4-8d432ca3cdea",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,nonlin_thresholds = False):\n",
-    "    # run directory should contain folders 1,2,3... \n",
-    "    if nonlin_thresholds:\n",
-    "        num_elements = n_thresholds\n",
-    "\n",
-    "        # Create a non-linear space with more density at lower values\n",
-    "        # Using exponential space for higher resolution at smaller thresholds\n",
-    "        # Adjust the base of the exponential to control the distribution\n",
-    "        non_linear_part = np.exp(np.linspace(-np.log(1000), 0, num_elements // 2))\n",
-    "        \n",
-    "        # Create a linear space for the higher thresholds\n",
-    "        linear_part = np.linspace(0, 1, num_elements // 2)\n",
-    "        \n",
-    "        # Combine both parts\n",
-    "        thresholds = np.unique(np.concatenate([non_linear_part, linear_part]))\n",
-    "        \n",
-    "        # Ensure the thresholds are sorted (necessary if combining different spaces)\n",
-    "        thresholds.sort()\n",
-    "    else:\n",
-    "        thresholds = np.linspace(1e-8,1,n_thresholds)\n",
-    "    BCM = BinaryConfusionMatrix()\n",
-    "    ###########\n",
-    "    # Note: BCM = [[TN,FP],[FN,TP]] \n",
-    "    \n",
-    "    if checkpoint_num is None: # if None, get most recent directory\n",
-    "        checkpoint_num = max([int(x) for x in os.listdir(run_dir) if osp.isdir(os.path.join(run_dir, x))])\n",
-    "\n",
-    "    working_dir = osp.join(run_dir,str(checkpoint_num))\n",
-    "    print(\"Getting metrics from\",working_dir)\n",
-    "    flag_file = osp.join(working_dir,'flags.json')\n",
-    "    with open(flag_file, 'r') as file:\n",
-    "        flag_info = json.load(file)\n",
-    "    config = AttrDict(flag_info)\n",
-    "\n",
-    "    model_config = osp.join(working_dir,config['model_config'])\n",
-    "    data_config = osp.join(working_dir,config['data_config'])\n",
-    "\n",
-    "    # print(model_config)\n",
-    "    # print(data_config)\n",
-    "\n",
-    "    # load model (same for all kfolds)\n",
-    "    model,model_name = fet.load(model_config,config)\n",
-    "\n",
-    "    # load data\n",
-    "    kfold_loaders = fet.load(data_config, config)\n",
-    "    nfolds = len(kfold_loaders)\n",
-    "    print(\"Data is {}-fold partitioned.\".format(nfolds))\n",
-    "\n",
-    "    conf_shape = (nfolds,n_thresholds,2,2)\n",
-    "    # list of confusion matrices (nfolds,n_thresholds)\n",
-    "    conf_mats = {'train':np.zeros(conf_shape),\n",
-    "                 'test':np.zeros(conf_shape),\n",
-    "                 'val':np.zeros(conf_shape)} \n",
-    "\n",
-    "    results = {'thresholds':thresholds,'config':config,'params':param_count(model)}\n",
-    "\n",
-    "    test_times = []\n",
-    "    test_losses = []\n",
-    "    train_iters = []\n",
-    "    train_losses = []\n",
-    "    # val_times = [] # these are mostly redundant for now\n",
-    "    # val_losses = []\n",
-    "\n",
-    "    ###########################################\n",
-    "    # RECORD METRICS, CONFUSION MATRICES FOR ALL THRESHOLDS FOR ALL FOLDS, MODELS\n",
-    "    \n",
-    "    for k,loader_dict in enumerate(kfold_loaders):\n",
-    "        print(\"Evaluating fold {}...\".format(k+1))\n",
-    "        fold_dir = osp.join(working_dir,\"data_fold{}\".format(k+1))\n",
-    "\n",
-    "        # record times and losses from results_dict.h5\n",
-    "        test_reports = dd.io.load(osp.join(fold_dir,'results_dict.h5'))\n",
-    "        test_times.append(test_reports['time']/max(test_reports['time']))\n",
-    "        test_losses.append(test_reports['cross_entropy'])\n",
-    "\n",
-    "        iters,losses = np.array(dd.io.load(osp.join(fold_dir,'results_dict_train.h5'))).T\n",
-    "        train_iters.append(iters)\n",
-    "        train_losses.append(losses)\n",
-    "        # val_reports = dd.io.load(osp.join(fold_dir,'results_dict_val.h5'))\n",
-    "        # val_times.append(val_reports['time'])\n",
-    "        # val_losses.append(val_reports['cross_entropy']\n",
-    "        \n",
-    "        # find and load latest model checkpoint in fold dir\n",
-    "        model_ckpt_name = \"model_fold{}.ckpt-\".format(k+1)\n",
-    "        ckpt_files = [f for f in os.listdir(fold_dir) if f.startswith(model_ckpt_name) and re.search(r'\\d+$', f)]\n",
-    "        latest_ckpt = max(ckpt_files, key=lambda x: int(re.search(r'(\\d+)$', x).group()), default=None)\n",
-    "\n",
-    "        ckpt_file = osp.join(fold_dir, latest_ckpt)\n",
-    "        \n",
-    "        # load model weights from final checkpoint and set to evaluation mode\n",
-    "        model_wts = torch.load(ckpt_file)\n",
-    "\n",
-    "        model.load_state_dict(model_wts['model_state_dict'])\n",
-    "        model.eval()\n",
-    "\n",
-    "        # set up model to make binary int class predictions from logit output\n",
-    "        # def model_preds(x,threshold = 0.5,softmax = True):\n",
-    "        #     if softmax:\n",
-    "        #         probs = np.array(F.softmax(model(x),dim=1))\n",
-    "        #     else:\n",
-    "        #         probs = np.array(model(x))\n",
-    "        #     print(probs[:,1])\n",
-    "        #     preds = np.zeros(len(probs),dtype = int)\n",
-    "        #     preds[probs[:,1] > threshold] = 1 # CONFUSED ABOUT DIRECTION OF THIS INEQ\n",
-    "        #     return torch.tensor(preds)\n",
-    "\n",
-    "        for subset in conf_mats.keys(): # loop over train,test,val data subsets\n",
-    "            print(\"in subset\",subset)\n",
-    "            loader = loader_dict[subset] # specific dataloader\n",
-    "            \n",
-    "            all_labels = torch.tensor(loader.dataset.labels) # all predictions\n",
-    "            # print('truelabels counts',np.bincount(all_labels))\n",
-    "            all_data = torch.tensor(loader.dataset.data).float() # all inputs\n",
-    "\n",
-    "            with torch.no_grad():\n",
-    "                if softmax:\n",
-    "                    probs = np.array(F.softmax(model(all_data),dim=1))\n",
-    "                else:\n",
-    "                    probs = np.array(model(all_data))\n",
-    "\n",
-    "            for ii,t in enumerate(thresholds): # for all classification thresholds,\n",
-    "                 # make binary predicitions at this threshold,\n",
-    "                    # print('threshold',t)\n",
-    "                    # all_preds = model_preds(all_data,threshold = t)\n",
-    "                all_preds = np.zeros(len(probs),dtype = int)\n",
-    "                \n",
-    "                all_preds[probs[:,1] > t] = 1 # as threshold increases, fewer positives (FPR-> 0)\n",
-    "\n",
-    "                all_preds = torch.tensor(all_preds)\n",
-    "\n",
-    "                # compute confusion matrix\n",
-    "                binary_confusion_matrix = np.array(BCM(all_preds,all_labels),dtype = int)\n",
-    "\n",
-    "                # record confusion matrix\n",
-    "                conf_mats[subset][k][ii] = binary_confusion_matrix\n",
-    "\n",
-    "    ##########################################################\n",
-    "    # AGGREGATE PREDICTIONS OVER DATA FOLDS AND RETURN METRICS\n",
-    "\n",
-    "    # collect loss vs. time data from training\n",
-    "    results['test_time'] = test_times\n",
-    "    results['test_loss'] = test_losses\n",
-    "\n",
-    "    results['train_iter'] = train_iters\n",
-    "    results['train_loss'] = train_losses\n",
-    "    \n",
-    "    common_t = np.linspace(0, 1, 100)\n",
-    "    interpolated_y_values = np.array([interp1d(x, y, bounds_error=False, fill_value='extrapolate')(common_t) for x, y in zip(test_times, test_losses)])\n",
-    "    average_loss = np.mean(interpolated_y_values, axis=0)\n",
-    "    \n",
-    "    results['avg_loss'] = (common_t,average_loss)\n",
-    "    \n",
-    "    print(\"Models evaluated. Computing metrics...\")\n",
-    "    for subset in conf_mats.keys(): # for train, test, val\n",
-    "        thresh_mats = np.sum(conf_mats[subset],axis = 0) # sum confusion matrices over data folds\n",
-    "        \n",
-    "        # compute accuracy\n",
-    "        results[subset+'_acc'] = get_acc(thresh_mats)\n",
-    "        # compute precision\n",
-    "        results[subset+'_prec'] = get_prec(thresh_mats)\n",
-    "        # compute TPR\n",
-    "        results[subset+'_tpr'] = get_tpr(thresh_mats)\n",
-    "        # compute FPR\n",
-    "        results[subset+'_fpr'] = get_fpr(thresh_mats)\n",
-    "        # compute F1 score\n",
-    "        results[subset+'_F1'] = get_F1(thresh_mats)\n",
-    "    print(\"Done.\")\n",
-    "    return results"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
    "id": "14bf950d-a4f6-43a5-a1f1-51fd50ea0a8d",
    "metadata": {
     "scrolled": true
@@ -262,62 +26,435 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Getting metrics from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2\n",
-      "Loading 'basic_feedforward' from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/basic_feedforward.py\n",
-      "Loading 'penn_dataset' from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/penn_dataset.py\n",
+      "Getting metrics from checkpoints/penn_data/basicFFNN/demo/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_/2\n",
+      "Loading 'basic_feedforward' from checkpoints/penn_data/basicFFNN/demo/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_/2/basic_feedforward.py\n",
+      "Loading 'penn_dataset' from checkpoints/penn_data/basicFFNN/demo/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_/2/penn_dataset.py\n",
       "Data is 5-fold partitioned.\n",
       "Evaluating fold 1...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
+      "in subset train\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████| 1151/1151 [00:00<00:00, 2042.75it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset test\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████████| 94/94 [00:00<00:00, 1725.02it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "in subset val\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████| 289/289 [00:00<00:00, 2058.63it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "Evaluating fold 2...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
+      "in subset train\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████| 1213/1213 [00:00<00:00, 2131.51it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset test\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████| 229/229 [00:00<00:00, 1940.48it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "in subset val\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████████| 93/93 [00:00<00:00, 1929.46it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "Evaluating fold 3...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
+      "in subset train\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████| 1275/1275 [00:00<00:00, 1978.97it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset test\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████| 177/177 [00:00<00:00, 2149.21it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "in subset val\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████████| 83/83 [00:00<00:00, 1704.73it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "Evaluating fold 4...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Evaluating fold 5...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
+      "in subset train\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████| 1272/1272 [00:00<00:00, 1931.37it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset test\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████| 213/213 [00:00<00:00, 1133.51it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "in subset val\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████████| 49/49 [00:00<00:00, 1421.77it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "Evaluating fold 5...\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "in subset train\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████| 1224/1224 [00:00<00:00, 2027.87it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset test\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████| 221/221 [00:00<00:00, 1696.37it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "in subset val\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████████| 90/90 [00:00<00:00, 1795.64it/s]"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "Models evaluated. Computing metrics...\n",
+      "Writing metrics to file checkpoints/penn_data/basicFFNN/demo/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_/2/metrics.h5\n",
       "Done.\n"
      ]
     }
    ],
    "source": [
     "general_dir = 'checkpoints/penn_data'\n",
-    "run_name = 'gpt-FCNN/hyperparam_testing'\n",
-    "specific_run = \"bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_\"\n",
+    "run_name = 'basicFFNN/demo'\n",
+    "specific_run = \"bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_\"\n",
     "runDir = osp.join(general_dir,run_name,specific_run)\n",
-    "info = get_metrics(runDir,n_thresholds = 1000,nonlin_thresholds = False)"
+    "info = eval.get_metrics(runDir,n_thresholds = 1000,nonlin_thresholds = False)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
-   "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
+   "execution_count": 12,
+   "id": "6b6f0bf3-ebdf-4bc1-9faa-c53bc3305815",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# # LOAD MODEL FROM FILE\n",
+    "save_dir = 'notebook_models/'\n",
+    "metricDict = 'FFNN_basic_metrics.h5'\n",
+    "info = dd.io.load('notebook_models/Conv1D/metrics.h5')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "id": "8fa7d522-a68a-401a-a426-0c7f9f3f1b1a",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "[<matplotlib.lines.Line2D at 0x3052a0f10>]"
+       "8482"
       ]
      },
-     "execution_count": 14,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
-    },
+    }
+   ],
+   "source": [
+    "info['params']"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "ff0548de-9fd3-4b6b-b015-d43325c2c3f6",
+   "metadata": {},
+   "source": [
+    "#### Plot training loss"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
+   "metadata": {},
+   "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -327,10 +464,7 @@
     }
    ],
    "source": [
-    "ts,ls = info['avg_loss']\n",
-    "plt.plot(ts,ls)\n",
-    "# plt.xscale('log')\n",
-    "# plt.yscale('log')"
+    "eval.plot_train_loss(info)"
    ]
   },
   {
@@ -345,11 +479,42 @@
    "cell_type": "code",
    "execution_count": 15,
    "id": "ac815258-7141-4e1c-8ea8-b6598aa6dd27",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "eval.plot_test_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c5e82793-656c-492a-9a1b-b422b8c1af0f",
+   "metadata": {},
+   "source": [
+    "#### Plot train vs. test loss"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 16,
+   "id": "cdfb8940-95f8-4926-af92-054760b8a7f0",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -359,7 +524,7 @@
     }
    ],
    "source": [
-    "eval.plot_loss(info)"
+    "eval.plot_train_test_loss(info)"
    ]
   },
   {
@@ -372,13 +537,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 17,
    "id": "edb8dbe5-1fe6-4dc3-9aa2-39f44d7939ab",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -401,19 +566,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 18,
    "id": "a2782025-287b-4e3e-8e49-8d3a487554cb",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/H5lhTAAAACXBIWXMAAA9hAAAPYQGoP6dpAABhVUlEQVR4nO3dd3hUZf428HtmMiU9kB4IhB5KDBokBtSg5DUousZGxEIRRBdQNIoKKhFb1J+6cRFFLOC6siBFdBERBFEXIh2U3gktnWRSJ1Oe94/JHBgyQCZl6v25rrlMzjxz5jsHTG6e8xSZEEKAiIiIyIvInV0AERERkaMxABEREZHXYQAiIiIir8MARERERF6HAYiIiIi8DgMQEREReR0GICIiIvI6DEBERETkdRiAiIiIyOswABERtYJXXnkFMpkMJSUlzi4FQNvUM2TIEAwZMuSK7davXw+ZTIb169e32nsTtTYGICIXMn/+fMhkMpuPF154QWq3evVqjBs3Dv369YNCoUBcXJzzivYyb775JpYvX+7sMoiohXycXQARNfbqq6+iS5cuVsf69esnfb1gwQIsWrQI11xzDWJiYhxdnld78803ce+99yIjI8PZpRBRCzAAEbmgW2+9FQMGDLjk82+++SY+/fRTKJVK3H777di9e7cDq2s5g8EAk8kElUrl7FJcgslkQn19PTQajbNLIfIavAVG5IZiYmKgVCqb/fqFCxciKSkJgYGBCAoKQkJCAj744AOrNuXl5Xj66acRFxcHtVqNjh07YtSoUVZjSoqKijBu3DhERkZCo9EgMTERX375pdV5jh8/DplMhnfffRe5ubno1q0b1Go19u7dCwDYv38/7r33XrRv3x4ajQYDBgzA999/f9n69Xo92rdvj7FjxzZ6TqvVQqPR4Nlnn5WOzZo1C3379oWfnx/atWuHAQMGYMGCBXZfN5lMhurqanz55ZfSrckxY8ZYtSkvL8eYMWMQEhKC4OBgjB07FjU1NY3OM3nyZHz99dfo27cv1Go1Vq1aBQA4ffo0HnnkEURGRkKtVqNv37744osvGtXS1M/UlHoMBgNee+016c8mLi4O06dPh06nu+I1OXXqFDIyMuDv74+IiAg8/fTTTXodkbOxB4jIBVVUVDQavBoWFtYq516zZg1GjhyJoUOH4u233wYA7Nu3Dxs2bMCUKVMAAFVVVbjhhhuwb98+PPLII7jmmmtQUlKC77//HqdOnUJYWBhqa2sxZMgQHD58GJMnT0aXLl2wePFijBkzBuXl5dK5LObNm4e6ujpMmDABarUa7du3x549ezB48GB06NABL7zwAvz9/fHNN98gIyMDS5cuxV133WXzMyiVStx1111YtmwZPvnkE6uepOXLl0On0+H+++8HAHz66ad48sknce+992LKlCmoq6vDn3/+iU2bNuGBBx6w69p99dVXGD9+PAYOHIgJEyYAALp162bVZsSIEejSpQtycnKwfft2fPbZZ4iIiJCutcW6devwzTffYPLkyQgLC0NcXBwKCwtx3XXXSQEpPDwcP/74I8aNGwetVounnnrK7s/UlHrGjx+PL7/8Evfeey+eeeYZbNq0CTk5Odi3bx++/fbbS16P2tpaDB06FPn5+XjyyScRExODr776CuvWrbPruhI5hSAilzFv3jwBwObjUoYPHy46d+7c5PeYMmWKCAoKEgaD4ZJtZsyYIQCIZcuWNXrOZDIJIYTIzc0VAMS///1v6bn6+nqRkpIiAgIChFarFUIIcezYMQFABAUFiaKiIqtzDR06VCQkJIi6ujqr8w8aNEj06NHjsp/jp59+EgDEf//7X6vjt912m+jatav0/Z133in69u172XPZw9/fX4wePbrR8ezsbAFAPPLII1bH77rrLhEaGmp1DICQy+Viz549VsfHjRsnoqOjRUlJidXx+++/XwQHB4uamhohRNM+U1Pr2blzpwAgxo8fb9Xu2WefFQDEunXrpGOpqakiNTVV+t7yd+Cbb76RjlVXV4vu3bsLAOKXX365bI1EzsRbYEQuaPbs2VizZo3Vo7WEhISgurr6sudcunQpEhMTbfbAyGQyAMDKlSsRFRWFkSNHSs8plUo8+eSTqKqqwq+//mr1unvuuQfh4eHS92VlZVi3bh1GjBiByspKlJSUoKSkBKWlpUhPT8ehQ4dw+vTpS9Z48803IywsDIsWLZKOnTt3DmvWrEFmZqbV5z116hS2bNlymavSeh5//HGr72+44QaUlpZCq9VaHU9NTUWfPn2k74UQWLp0Ke644w4IIaTrUVJSgvT0dFRUVGD79u0A7PtMV6pn5cqVAICsrCyrds888wwA4IcffrjkuVeuXIno6Gjce++90jE/Pz+pd4zIlTEAEbmggQMHIi0tzerR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tWIAIiIiIq/DAERERERehwGIiIiI7DZkyBA89dRTrXa+MWPGICMjo9XOdyUMQERErUBnMEII4ewyiKiJGICIiFqoSFuHm/5vPUZ++oezSyFyiDFjxuDXX3/FBx98AJlMBplMhuPHj2P37t249dZbERAQgMjISDz88MMoKSmRXrdkyRIkJCTA19cXoaGhSEtLQ3V1NV555RV8+eWX+O6776TzrV+/vk0/A9cBIiJqoWcW78KZijqcqaiDEIIzeqhFhBCo1Rud8t6+SkWT/v5+8MEHOHjwIPr164dXX30VgHmbioEDB2L8+PH4xz/+gdraWjz//PMYMWIE1q1bh7Nnz2LkyJF45513cNddd6GyshK///47hBB49tlnsW/fPmi1WsybNw8A0L59+zb9rAxAREQtUKStw++Hzv8LV2cwQaNsnb2KyDvV6o3oM+Mnp7z33lfT4ae6cjQIDg6GSqWCn58foqKiAACvv/46rr76arz55ptSuy+++AKxsbE4ePAgqqqqYDAYcPfdd6Nz584AgISEBKmtr68vdDqddL62xltgREQt8O2O01bf19Y751/uRM62a9cu/PLLLwgICJAe8fHxAIAjR44gMTERQ4cORUJCAu677z58+umnOHfunNPqZQ8QEVEzaev0mPPrEatjNXoj2jmpHvIMvkoF9r6a7rT3bq6qqirccccdePvttxs9Fx0dDYVCgTVr1mDjxo1YvXo1Zs2ahRdffBGbNm1Cly5dWlJ2szAAERE105z1R3CuRo/uEQEorKhDpc6A2nqDs8siNyeTyZp0G8rZVCoVjMbzPZ7XXHMNli5diri4OPj42K5fJpNh8ODBGDx4MGbMmIHOnTvj22+/RVZWVqPztTXeAiMiaqIz5bWYsnAHpn/7F+Je+AEfrTf3/jw/LB6BGvMP/Godb4GRd4iLi8OmTZtw/PhxlJSUYNKkSSgrK8PIkSOxZcsWHDlyBD/99BPGjh0Lo9GITZs24c0338TWrVuRn5+PZcuWobi4GL1795bO9+eff+LAgQMoKSlp8V5fV8IARETUBKfLazHorXX4bucZLNiULx2/Nq4d0npHwFdlvnVQwzFA5CWeffZZKBQK9OnTB+Hh4aivr8eGDRtgNBpxyy23ICEhAU899RRCQkIgl8sRFBSE3377Dbfddht69uyJl156Ce+99x5uvfVWAMCjjz6K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",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
      },
      "metadata": {},
      "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "F1 score maximized at threshold 0.549\n"
+     ]
     }
    ],
    "source": [
@@ -430,7 +602,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 19,
    "id": "b5644cf6-3b0f-4ff6-abe4-60dd790fa337",
    "metadata": {
     "scrolled": true
@@ -438,7 +610,7 @@
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -461,13 +633,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 14,
    "id": "0668184c-cd7c-4349-aee3-7397605c62b9",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
diff --git a/basic_feedforward.py b/basic_feedforward.py
deleted file mode 100644
index c36011b..0000000
--- a/basic_feedforward.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # x = x[:,::2] # try using every other wavelength
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward_halfLs"
\ No newline at end of file
diff --git a/checkpoints/.DS_Store b/checkpoints/.DS_Store
index d2830ac..5cf60f5 100644
Binary files a/checkpoints/.DS_Store and b/checkpoints/.DS_Store differ
diff --git a/checkpoints/penn_data/.DS_Store b/checkpoints/penn_data/.DS_Store
index 2d5c952..de91534 100644
Binary files a/checkpoints/penn_data/.DS_Store and b/checkpoints/penn_data/.DS_Store differ
diff --git a/checkpoints/penn_data/feedforward/.DS_Store b/checkpoints/penn_data/feedforward/.DS_Store
deleted file mode 100644
index 4a7e165..0000000
Binary files a/checkpoints/penn_data/feedforward/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/.DS_Store b/checkpoints/penn_data/feedforward/hyperparam_testing/.DS_Store
deleted file mode 100644
index 41a19c1..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 52120eb..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index c07bbf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index 673537d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 8a8908b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 2bc3fc7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict.h5
deleted file mode 100644
index 24cb9ff..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index b082cf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index eebc137..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/events.out.tfevents.1709686078.MacBook-Pro-4.local.3000.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/events.out.tfevents.1709686078.MacBook-Pro-4.local.3000.0
deleted file mode 100644
index 5ff3f3f..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/events.out.tfevents.1709686078.MacBook-Pro-4.local.3000.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/flags.json
deleted file mode 100644
index 617a174..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/git_diff.txt
deleted file mode 100644
index 3ad4daa..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 16:47:58 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..84b3f43 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'],loss_func = loss_func)
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 7bec4ab..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index f41ca1b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 4f96e04..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index 440704f..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index ae595b0..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 95f53ac..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 3291e82..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict.h5
deleted file mode 100644
index f5185ce..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_train.h5
deleted file mode 100644
index e8f0510..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_val.h5
deleted file mode 100644
index 9679d41..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/events.out.tfevents.1709686283.MacBook-Pro-4.local.3051.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/events.out.tfevents.1709686283.MacBook-Pro-4.local.3051.0
deleted file mode 100644
index 610c133..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/events.out.tfevents.1709686283.MacBook-Pro-4.local.3051.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/flags.json
deleted file mode 100644
index 617a174..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/git_diff.txt
deleted file mode 100644
index 671f147..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 16:51:23 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..61a1bb9 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	# scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'],loss_func = loss_func)
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			# scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index a280a73..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index e19d023..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 52120eb..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index c07bbf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index 673537d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 8a8908b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 2bc3fc7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict.h5
deleted file mode 100644
index 68e66dd..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_train.h5
deleted file mode 100644
index 2c91e45..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_val.h5
deleted file mode 100644
index d8c2efc..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/events.out.tfevents.1709686632.MacBook-Pro-4.local.3161.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/events.out.tfevents.1709686632.MacBook-Pro-4.local.3161.0
deleted file mode 100644
index 14b5cf2..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/events.out.tfevents.1709686632.MacBook-Pro-4.local.3161.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/flags.json
deleted file mode 100644
index 617a174..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/git_diff.txt
deleted file mode 100644
index 4bc1570..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 16:57:12 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..158d7d6 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 01b7042..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index 4779fab..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 52120eb..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index c07bbf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index 673537d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 8a8908b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 2bc3fc7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict.h5
deleted file mode 100644
index 83bde77..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 2ede2c2..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index a367230..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-0
deleted file mode 100644
index 636d841..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-12131 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-12131
deleted file mode 100644
index a70bf0c..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-12131 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-24261 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-24261
deleted file mode 100644
index 3a5749d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-24261 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-36391 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-36391
deleted file mode 100644
index b607887..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-36391 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-early_stop
deleted file mode 100644
index a1447f3..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict.h5
deleted file mode 100644
index 4d1f690..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_train.h5
deleted file mode 100644
index cdacd1a..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_val.h5
deleted file mode 100644
index 732bbbf..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/test_headings.txt
deleted file mode 100644
index b87ab5e..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0063
-aaa0066
-aaa_0051
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-0
deleted file mode 100644
index 30fd2be..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-12751 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-12751
deleted file mode 100644
index 467bfb4..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-12751 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-25501 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-25501
deleted file mode 100644
index 975074b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-25501 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-38251 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-38251
deleted file mode 100644
index 5268e0d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-38251 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-early_stop
deleted file mode 100644
index 30ca2f4..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict.h5
deleted file mode 100644
index 3b7dd92..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_train.h5
deleted file mode 100644
index 7658165..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_val.h5
deleted file mode 100644
index a41a1c1..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/test_headings.txt
deleted file mode 100644
index 8417193..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0043
-aaa0044
-aaa_0071
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-0
deleted file mode 100644
index 656f3ad..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-12721 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-12721
deleted file mode 100644
index 4c56644..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-12721 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-25441 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-25441
deleted file mode 100644
index 672f077..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-25441 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-38161 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-38161
deleted file mode 100644
index aef00a7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-38161 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-early_stop
deleted file mode 100644
index f3b3785..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict.h5
deleted file mode 100644
index 97c4db9..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_train.h5
deleted file mode 100644
index 081d412..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_val.h5
deleted file mode 100644
index 4ec1efc..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/test_headings.txt
deleted file mode 100644
index ad5063c..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0086
-aaa0087
-aaa_0072
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-0
deleted file mode 100644
index 7022ce7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-12241 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-12241
deleted file mode 100644
index 53e30ad..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-12241 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-24481 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-24481
deleted file mode 100644
index 258593b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-24481 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-36721 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-36721
deleted file mode 100644
index 1f669b0..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-36721 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-early_stop
deleted file mode 100644
index 0ec8c04..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict.h5
deleted file mode 100644
index f6f3032..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_train.h5
deleted file mode 100644
index 825cce2..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_val.h5
deleted file mode 100644
index baec64c..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/test_headings.txt
deleted file mode 100644
index a4e6319..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0064
-aaa_0053
-aaa_0054
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686825.MacBook-Pro-4.local.3248.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686825.MacBook-Pro-4.local.3248.0
deleted file mode 100644
index 71d686d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686825.MacBook-Pro-4.local.3248.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686884.MacBook-Pro-4.local.3248.1 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686884.MacBook-Pro-4.local.3248.1
deleted file mode 100644
index 6f8ed57..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686884.MacBook-Pro-4.local.3248.1 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686943.MacBook-Pro-4.local.3248.2 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686943.MacBook-Pro-4.local.3248.2
deleted file mode 100644
index 013cb8b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686943.MacBook-Pro-4.local.3248.2 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686999.MacBook-Pro-4.local.3248.3 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686999.MacBook-Pro-4.local.3248.3
deleted file mode 100644
index 2f53f14..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686999.MacBook-Pro-4.local.3248.3 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709687056.MacBook-Pro-4.local.3248.4 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709687056.MacBook-Pro-4.local.3248.4
deleted file mode 100644
index c9d3ca3..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709687056.MacBook-Pro-4.local.3248.4 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/flags.json
deleted file mode 100644
index fe1bc9f..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/git_diff.txt
deleted file mode 100644
index 8bb4f23..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 17:00:25 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..ecb5bc2 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..158d7d6 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 71fb2ce..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index dece3e2..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 4f96e04..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101
deleted file mode 100644
index 9ad2f1c..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index 8328545..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 038fc0c..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5
deleted file mode 100644
index ae627ae..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 55b2151..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index 3e6c788..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709678914.MacBook-Pro-4.local.1475.0 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709678914.MacBook-Pro-4.local.1475.0
deleted file mode 100644
index e610ddd..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709678914.MacBook-Pro-4.local.1475.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
deleted file mode 100644
index 9e3b59a..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "plotting",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
deleted file mode 100644
index 393f601..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
+++ /dev/null
@@ -1,1772 +0,0 @@
-Tue Mar 5 14:48:34 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..432d504 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,455 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 10, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/.DS_Store b/checkpoints/penn_data/feedforward/testing/.DS_Store
deleted file mode 100644
index f1ae3e6..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/.DS_Store b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/.DS_Store
deleted file mode 100644
index 25e0e51..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/flags.json
deleted file mode 100644
index 889a6ea..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "feedforward",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/git_diff.txt
deleted file mode 100644
index 69a94ea..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/git_diff.txt
+++ /dev/null
@@ -1,1763 +0,0 @@
-Tue Mar 5 10:33:21 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..ad06094 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..e6d593e 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,447 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
-+					'Top directory for all experimental results.')
- flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval')
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_count / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/.DS_Store b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/.DS_Store
deleted file mode 100644
index 482a2ef..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 24b3d19..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-115101 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-115101
deleted file mode 100644
index 8d093d7..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-115101 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index 00876b2..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index c6f01aa..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict.h5
deleted file mode 100644
index f7e0af9..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_train.h5
deleted file mode 100644
index e575627..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_val.h5
deleted file mode 100644
index a4e2a70..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/events.out.tfevents.1709663626.MacBook-Pro-4.local.5907.0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/events.out.tfevents.1709663626.MacBook-Pro-4.local.5907.0
deleted file mode 100644
index 13f4159..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/events.out.tfevents.1709663626.MacBook-Pro-4.local.5907.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/flags.json
deleted file mode 100644
index 889a6ea..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "feedforward",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/git_diff.txt
deleted file mode 100644
index e438729..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/git_diff.txt
+++ /dev/null
@@ -1,1763 +0,0 @@
-Tue Mar 5 10:33:46 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..ad06094 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..afff727 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,447 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
-+					'Top directory for all experimental results.')
- flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval')
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 9a548a8..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index ba1f80e..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 24b3d19..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101
deleted file mode 100644
index 8d093d7..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index 00876b2..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index c6f01aa..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5
deleted file mode 100644
index 523055f..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 3e162c6..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index 3ad7dec..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709674431.MacBook-Pro-4.local.7916.0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709674431.MacBook-Pro-4.local.7916.0
deleted file mode 100644
index 2e9f9a9..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709674431.MacBook-Pro-4.local.7916.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
deleted file mode 100644
index 3680210..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
deleted file mode 100644
index 2b6c67b..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
+++ /dev/null
@@ -1,1768 +0,0 @@
-Tue Mar 5 13:33:51 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..def250b 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,451 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 10, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		print('train_reports',train_reports)
-+		print("report_all",report_all)
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/.DS_Store b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/.DS_Store
deleted file mode 100644
index 9c7a74d..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 24b3d19..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index 4982cfb..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 6fd2104..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict.h5
deleted file mode 100644
index c7e5da6..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 96d7363..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index 1bc99fd..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/events.out.tfevents.1709672112.MacBook-Pro-4.local.7461.0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/events.out.tfevents.1709672112.MacBook-Pro-4.local.7461.0
deleted file mode 100644
index bd35954..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/events.out.tfevents.1709672112.MacBook-Pro-4.local.7461.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/flags.json
deleted file mode 100644
index 3152d07..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 10,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/git_diff.txt
deleted file mode 100644
index d70a1bb..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/git_diff.txt
+++ /dev/null
@@ -1,1768 +0,0 @@
-Tue Mar 5 12:55:12 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..def250b 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,451 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 10, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		print('train_reports',train_reports)
-+		print("report_all",report_all)
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/.DS_Store b/checkpoints/penn_data/gpt-FCNN/.DS_Store
deleted file mode 100644
index 2175e14..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store
deleted file mode 100644
index 724b935..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/.DS_Store b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/.DS_Store
deleted file mode 100644
index 2dda38a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/basic_feedforward.py
deleted file mode 100644
index 8e85f6b..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/basic_feedforward.py
+++ /dev/null
@@ -1,73 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/flags.json
deleted file mode 100644
index 8850780..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 50,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/git_diff.txt
deleted file mode 100644
index 7f68239..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/git_diff.txt
+++ /dev/null
@@ -1,1812 +0,0 @@
-Tue Mar 5 17:27:03 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..5474cc4 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..ecb5bc2 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..8e85f6b 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,60 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(PerceptronNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +66,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..55f58d9 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,461 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 50, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/basic_feedforward.py
deleted file mode 100644
index 0cbf8bd..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/basic_feedforward.py
+++ /dev/null
@@ -1,73 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index ae76794..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 50cc219..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/events.out.tfevents.1709688453.MacBook-Pro-4.local.3635.0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/events.out.tfevents.1709688453.MacBook-Pro-4.local.3635.0
deleted file mode 100644
index e375a54..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/events.out.tfevents.1709688453.MacBook-Pro-4.local.3635.0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/flags.json
deleted file mode 100644
index 8850780..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 50,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/git_diff.txt
deleted file mode 100644
index 244e218..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/git_diff.txt
+++ /dev/null
@@ -1,1812 +0,0 @@
-Tue Mar 5 17:27:33 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..66fb4f4 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..ecb5bc2 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..0cbf8bd 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,60 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(GPT_PNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +66,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..55f58d9 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,461 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 50, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/2/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index a739604..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index cff8a12..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/basic_feedforward.py
deleted file mode 100644
index 0cbf8bd..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/basic_feedforward.py
+++ /dev/null
@@ -1,73 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index ae76794..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index f8e676e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 42508a0..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict.h5
deleted file mode 100644
index d037340..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict_train.h5
deleted file mode 100644
index 6c8da46..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict_val.h5
deleted file mode 100644
index 15e792f..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-0
deleted file mode 100644
index 76751da..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-60651 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-60651
deleted file mode 100644
index 35a1085..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-60651 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-early_stop
deleted file mode 100644
index 6f45ca9..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/model_fold2.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict.h5
deleted file mode 100644
index ac2d2f5..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict_train.h5
deleted file mode 100644
index 6ac9ddd..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict_val.h5
deleted file mode 100644
index 4260b9e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/test_headings.txt
deleted file mode 100644
index b87ab5e..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold2/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0063
-aaa0066
-aaa_0051
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-0
deleted file mode 100644
index 7cfbb66..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-63751 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-63751
deleted file mode 100644
index 89f8c09..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-63751 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-early_stop
deleted file mode 100644
index d99a3c0..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/model_fold3.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict.h5
deleted file mode 100644
index d06bbae..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict_train.h5
deleted file mode 100644
index 6ca5aca..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict_val.h5
deleted file mode 100644
index bd0e6d2..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/test_headings.txt
deleted file mode 100644
index 8417193..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold3/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0043
-aaa0044
-aaa_0071
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-0
deleted file mode 100644
index 53e2d53..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-63601 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-63601
deleted file mode 100644
index 8645643..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-63601 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-early_stop
deleted file mode 100644
index 339e6eb..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/model_fold4.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict.h5
deleted file mode 100644
index 683ffe4..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict_train.h5
deleted file mode 100644
index 17da4b8..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict_val.h5
deleted file mode 100644
index 222c0c9..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/test_headings.txt
deleted file mode 100644
index ad5063c..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold4/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0086
-aaa0087
-aaa_0072
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-0
deleted file mode 100644
index a5eac18..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-61201 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-61201
deleted file mode 100644
index 35b450e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-61201 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-early_stop
deleted file mode 100644
index 12aab23..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/model_fold5.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict.h5
deleted file mode 100644
index 0cf1759..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict_train.h5
deleted file mode 100644
index 96ad1a8..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict_val.h5
deleted file mode 100644
index c7c745a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/test_headings.txt
deleted file mode 100644
index a4e6319..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/data_fold5/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0064
-aaa_0053
-aaa_0054
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688478.MacBook-Pro-4.local.3657.0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688478.MacBook-Pro-4.local.3657.0
deleted file mode 100644
index e543f98..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688478.MacBook-Pro-4.local.3657.0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688612.MacBook-Pro-4.local.3657.1 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688612.MacBook-Pro-4.local.3657.1
deleted file mode 100644
index 7d5e36a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688612.MacBook-Pro-4.local.3657.1 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688746.MacBook-Pro-4.local.3657.2 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688746.MacBook-Pro-4.local.3657.2
deleted file mode 100644
index 6017972..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709688746.MacBook-Pro-4.local.3657.2 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709689208.MacBook-Pro-4.local.3657.3 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709689208.MacBook-Pro-4.local.3657.3
deleted file mode 100644
index 8bee476..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709689208.MacBook-Pro-4.local.3657.3 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709689359.MacBook-Pro-4.local.3657.4 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709689359.MacBook-Pro-4.local.3657.4
deleted file mode 100644
index 4590a78..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/events.out.tfevents.1709689359.MacBook-Pro-4.local.3657.4 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/flags.json
deleted file mode 100644
index 0e7ba1c..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 50,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/git_diff.txt
deleted file mode 100644
index 209d7e0..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/git_diff.txt
+++ /dev/null
@@ -1,1812 +0,0 @@
-Tue Mar 5 17:27:58 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..66fb4f4 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..ecb5bc2 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..0cbf8bd 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,60 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(GPT_PNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +66,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..9c27c90 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,461 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 50, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalTrue_n_epochs50_/3/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/.DS_Store b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/.DS_Store
deleted file mode 100644
index 835f63a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/basic_feedforward.py
deleted file mode 100644
index c36011b..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/basic_feedforward.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # x = x[:,::2] # try using every other wavelength
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward_halfLs"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 26d8425..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 0cd460b..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict.h5
deleted file mode 100644
index d089940..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 9a3a720..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index c36c75b..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/model_fold2.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/model_fold2.ckpt-0
deleted file mode 100644
index ee5ba66..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/model_fold2.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict.h5
deleted file mode 100644
index c6a6b9e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict_train.h5
deleted file mode 100644
index 38249e9..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict_val.h5
deleted file mode 100644
index 74d141e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/test_headings.txt
deleted file mode 100644
index b87ab5e..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold2/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0063
-aaa0066
-aaa_0051
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/model_fold3.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/model_fold3.ckpt-0
deleted file mode 100644
index 1b3855a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/model_fold3.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict.h5
deleted file mode 100644
index 0cd8c75..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict_train.h5
deleted file mode 100644
index a79c88a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict_val.h5
deleted file mode 100644
index e5251c9..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/test_headings.txt
deleted file mode 100644
index 8417193..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold3/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0043
-aaa0044
-aaa_0071
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/model_fold4.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/model_fold4.ckpt-0
deleted file mode 100644
index 016ac92..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/model_fold4.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict.h5
deleted file mode 100644
index 8f00dd7..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict_train.h5
deleted file mode 100644
index 974558f..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict_val.h5
deleted file mode 100644
index e50d7f2..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/test_headings.txt
deleted file mode 100644
index ad5063c..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold4/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0086
-aaa0087
-aaa_0072
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/model_fold5.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/model_fold5.ckpt-0
deleted file mode 100644
index c8c47aa..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/model_fold5.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/model_fold5.ckpt-24481 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/model_fold5.ckpt-24481
deleted file mode 100644
index b09492f..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/model_fold5.ckpt-24481 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict.h5
deleted file mode 100644
index f5b63bc..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict_train.h5
deleted file mode 100644
index 9d84553..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict_val.h5
deleted file mode 100644
index e5a9009..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/test_headings.txt
deleted file mode 100644
index a4e6319..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/data_fold5/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0064
-aaa_0053
-aaa_0054
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709708956.MacBook-Pro-4.local.7010.0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709708956.MacBook-Pro-4.local.7010.0
deleted file mode 100644
index d6d7394..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709708956.MacBook-Pro-4.local.7010.0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709038.MacBook-Pro-4.local.7010.1 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709038.MacBook-Pro-4.local.7010.1
deleted file mode 100644
index dce9ab1..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709038.MacBook-Pro-4.local.7010.1 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709123.MacBook-Pro-4.local.7010.2 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709123.MacBook-Pro-4.local.7010.2
deleted file mode 100644
index cd83d3a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709123.MacBook-Pro-4.local.7010.2 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709206.MacBook-Pro-4.local.7010.3 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709206.MacBook-Pro-4.local.7010.3
deleted file mode 100644
index 01fd2ab..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709206.MacBook-Pro-4.local.7010.3 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709291.MacBook-Pro-4.local.7010.4 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709291.MacBook-Pro-4.local.7010.4
deleted file mode 100644
index 35fd52e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/events.out.tfevents.1709709291.MacBook-Pro-4.local.7010.4 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/flags.json
deleted file mode 100644
index 08cf9e1..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 20,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/git_diff.txt
deleted file mode 100644
index 5d92aa6..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/git_diff.txt
+++ /dev/null
@@ -1,1180 +0,0 @@
-Tue Mar 5 23:09:16 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/.ipynb_checkpoints/penn_dataset-checkpoint.py b/.ipynb_checkpoints/penn_dataset-checkpoint.py
-index aa2f5a0..bd95ece 100644
---- a/.ipynb_checkpoints/penn_dataset-checkpoint.py
-+++ b/.ipynb_checkpoints/penn_dataset-checkpoint.py
-@@ -15,16 +15,17 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
- flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
--flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-+flags.DEFINE_integer("n_repeats",2,"Times to repeat K-fold cross-validation")
- flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
- 
- # "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
- LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
--L_INDS = None
-+L_INDS = None # specific indices of data to select
- 
- DATAFOLDER = './penn_data'
- 
-@@ -40,10 +41,12 @@ class PennData(Dataset):
- 
-         df_list = []
-         label_list = []
--        for heading in self.headings: # for each datafile heading,
-+        for idx,heading in enumerate(self.headings): # for each datafile heading,
-             data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-             df_temp = pd.read_csv(data_name,header=None)
-+            df_temp['h_idx'] = idx
-             df_list.append(df_temp)
-+            
- 
-             label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-             label_temp = pd.read_csv(label_name,header=None, names=['label'])
-@@ -57,18 +60,23 @@ class PennData(Dataset):
-         all_labels = df['label'].to_numpy()
-         all_data = df.iloc[:,1:].to_numpy()
- 
-+        # if include_coords:
-+        #     kstart = 3
-+        # else:
-+        #     kstart = 0
-+
-         if rescale: # rescale (normalize) wavelength intensity data
--            lambdas = all_data[:,2:] # wavelengths
-+            lambdas = all_data[:,3:] # wavelengths
-             lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-             lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-             lambdas_rescaled = (lambdas - lam_mean) / lam_std 
--            all_data[:,2:] = lambdas_rescaled
-+            all_data[:,3:] = lambdas_rescaled
- 
--        if not include_coords: # removes x,y coordinates from data
--            all_data = all_data[:,2:]
--        
--        if k_inds != None: # in this case, only use subset of wavelengths
--            all_data = all_data[:,np.array(k_inds)]
-+        # if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-+        #     all_data[:,3:] = all_data[:,np.array(k_inds)]
-+
-+        if not include_coords: # removes x,y coordinates (and heading index) from data
-+            all_data = all_data[:,3:]
- 
-         self.all_data = all_data
-         self.all_labels = all_labels
-@@ -109,15 +117,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +133,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..4a02232 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..cf395be 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..c36011b 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,61 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(GPT_PNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        # x = x[:,::2] # try using every other wavelength
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +67,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward_halfLs"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-deleted file mode 100644
-index 688c282..0000000
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ /dev/null
-@@ -1,32 +0,0 @@
--import torch
--import torch.nn as nn
--import torch.nn.functional as F
--import numpy as np
--
--from forge import flags
--
--class PerceptronNN(nn.Module):
--    def __init__(self, input_size, num_labels):
--        super(PerceptronNN, self).__init__()
--        # Define the layers
--        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
--        self.fc2 = nn.Linear(128, 64)         # Second dense layer
--        self.fc3 = nn.Linear(64, 64)          # Third dense layer
--        self.fc4 = nn.Linear(64, num_labels)  # Output layer
--
--    def forward(self, x):
--        # Forward pass through the network
--        x = F.relu(self.fc1(x))  # Activation function between layers
--        x = F.relu(self.fc2(x))
--        x = F.relu(self.fc3(x))
--        x = self.fc4(x)  # No activation, this will be included in the loss function
--        return x
--
--def load(config):
--
--    # n_channels = 1
--    n_features = config.input_size
--    
--    mlp = PerceptronNN(n_features,2)
--    
--    return mlp
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-deleted file mode 100644
-index 1d000c3..0000000
---- a/checkpoints/feedforward/1/flags.json
-+++ /dev/null
-@@ -1,17 +0,0 @@
--{
--    "batch_size": 100,
--    "data_config": "penn_dataset.py",
--    "include_coords": false,
--    "input_size": 39,
--    "learning_rate": 1e-05,
--    "model_config": "basic_feedforward.py",
--    "n_repeats": 1,
--    "report_loss_every": 50,
--    "rescale": true,
--    "results_dir": "checkpoints",
--    "resume": false,
--    "run_name": "feedforward",
--    "split_seed": 1,
--    "train_epochs": 20,
--    "train_split": 0.8
--}
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-deleted file mode 100644
-index 7b37e6f..0000000
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ /dev/null
-@@ -1 +0,0 @@
--Mon Mar 4 11:45:48 PST 2024
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-deleted file mode 100644
-index aa2f5a0..0000000
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ /dev/null
-@@ -1,132 +0,0 @@
--import os
--import torch
--import pandas as pd
--import numpy as np
--
--from torchvision import datasets, transforms
--from torch.utils.data import Dataset, DataLoader
--from sklearn.model_selection import RepeatedKFold
--
--from os import path as osp
--import forge
--from forge import flags
--
--
--# aspects of data managmement
--flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
--flags.DEFINE_boolean("rescale", True, "Rescales intensities")
--
--# Job management
--# flags.DEFINE_integer("batch size",5,"training batch size")
--flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
--flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
--flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
--
--# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
--LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
--L_INDS = None
--
--DATAFOLDER = './penn_data'
--
--HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
--
--
--class PennData(Dataset):
--
--    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
--        
--        self.data_dir = path_to_data
--        self.headings = headings
--
--        df_list = []
--        label_list = []
--        for heading in self.headings: # for each datafile heading,
--            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
--            df_temp = pd.read_csv(data_name,header=None)
--            df_list.append(df_temp)
--
--            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
--            label_temp = pd.read_csv(label_name,header=None, names=['label'])
--            label_list.append(label_temp)
--
--        df = pd.concat(df_list, ignore_index=True)
--
--        labels = pd.concat(label_list, ignore_index=True)
--        df = pd.concat([labels, df], axis="columns") # Append labels to data
--
--        all_labels = df['label'].to_numpy()
--        all_data = df.iloc[:,1:].to_numpy()
--
--        if rescale: # rescale (normalize) wavelength intensity data
--            lambdas = all_data[:,2:] # wavelengths
--            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
--            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
--            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
--            all_data[:,2:] = lambdas_rescaled
--
--        if not include_coords: # removes x,y coordinates from data
--            all_data = all_data[:,2:]
--        
--        if k_inds != None: # in this case, only use subset of wavelengths
--            all_data = all_data[:,np.array(k_inds)]
--
--        self.all_data = all_data
--        self.all_labels = all_labels
--
--    def __len__(self):
--        return len(self.all_data)
--
--    def __getitem__(self,i):
--        state = {'label':self.all_labels[i],'data':self.all_data[i]}
--        return state
--
--    def __getstate__(self):
--        state = {
--            'data': self.all_data,
--            'label': self.all_labels,
--                }
--        return state
--
--    def __setstate__(self, state):
--        # Set the object's state from the provided dictionary
--        self.all_data = state['data']
--        self.all_labels = state['label']
--        
--
--
--def load(config):
--
--    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
--
--    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
--
--    kf_dataloaders = []
--
--    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
--        n_val = len(test_ind)//2
--        n_test = len(test_ind)-n_val   
--        n_train = len(train_ind)
--        
--        # set up training DataLoader
--        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
--
--        # set up test DataLoader
--        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
--
--        # set up val DataLoader
--        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
--        
--
--        dataloaders = {'train':train_loader, 
--                       'test':test_loader,
--                       'val':val_loader,
--                       'train_inds':train_ind,
--                       'test_inds':test_ind,
--                       'n_val':n_val
--                      }
--        kf_dataloaders.append(dataloaders)
--
--    return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..4f4221c 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -24,7 +25,7 @@ flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproduci
- 
- # "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
- LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
--L_INDS = None
-+L_INDS = None # specific indices of data to select
- 
- DATAFOLDER = './penn_data'
- 
-@@ -40,10 +41,12 @@ class PennData(Dataset):
- 
-         df_list = []
-         label_list = []
--        for heading in self.headings: # for each datafile heading,
-+        for idx,heading in enumerate(self.headings): # for each datafile heading,
-             data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-             df_temp = pd.read_csv(data_name,header=None)
-+            df_temp['h_idx'] = idx
-             df_list.append(df_temp)
-+            
- 
-             label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-             label_temp = pd.read_csv(label_name,header=None, names=['label'])
-@@ -57,18 +60,23 @@ class PennData(Dataset):
-         all_labels = df['label'].to_numpy()
-         all_data = df.iloc[:,1:].to_numpy()
- 
-+        # if include_coords:
-+        #     kstart = 3
-+        # else:
-+        #     kstart = 0
-+
-         if rescale: # rescale (normalize) wavelength intensity data
--            lambdas = all_data[:,2:] # wavelengths
-+            lambdas = all_data[:,3:] # wavelengths
-             lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-             lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-             lambdas_rescaled = (lambdas - lam_mean) / lam_std 
--            all_data[:,2:] = lambdas_rescaled
-+            all_data[:,3:] = lambdas_rescaled
- 
--        if not include_coords: # removes x,y coordinates from data
--            all_data = all_data[:,2:]
--        
--        if k_inds != None: # in this case, only use subset of wavelengths
--            all_data = all_data[:,np.array(k_inds)]
-+        # if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-+        #     all_data[:,3:] = all_data[:,np.array(k_inds)]
-+
-+        if not include_coords: # removes x,y coordinates (and heading index) from data
-+            all_data = all_data[:,3:]
- 
-         self.all_data = all_data
-         self.all_labels = all_labels
-@@ -109,15 +117,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +133,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..0b4a6a1 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,464 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = False
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
-+					 'Number of iterations between reporting minibatch loss.')
- flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+		("n_repeats",'nrep')
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			train_reports.append([epoch,loss.item()])
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/penn_dataset.py
deleted file mode 100644
index 4f4221c..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/1/penn_dataset.py
+++ /dev/null
@@ -1,144 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None # specific indices of data to select
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for idx,heading in enumerate(self.headings): # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_temp['h_idx'] = idx
-            df_list.append(df_temp)
-            
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        # if include_coords:
-        #     kstart = 3
-        # else:
-        #     kstart = 0
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,3:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,3:] = lambdas_rescaled
-
-        # if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-        #     all_data[:,3:] = all_data[:,np.array(k_inds)]
-
-        if not include_coords: # removes x,y coordinates (and heading index) from data
-            all_data = all_data[:,3:]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 42d2664..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index 48aeff9..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/basic_feedforward.py
deleted file mode 100644
index c36011b..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/basic_feedforward.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # x = x[:,::2] # try using every other wavelength
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward_halfLs"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 26d8425..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index b1f459e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict.h5
deleted file mode 100644
index a7736c5..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict_train.h5
deleted file mode 100644
index 24bdd9e..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict_val.h5
deleted file mode 100644
index 11a17da..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/model_fold2.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/model_fold2.ckpt-0
deleted file mode 100644
index ee5ba66..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/model_fold2.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/model_fold2.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/model_fold2.ckpt-early_stop
deleted file mode 100644
index 66d6289..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/model_fold2.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict.h5
deleted file mode 100644
index 8d03b72..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict_train.h5
deleted file mode 100644
index 83c7da3..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict_val.h5
deleted file mode 100644
index 82a5f02..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/test_headings.txt
deleted file mode 100644
index b87ab5e..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold2/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0063
-aaa0066
-aaa_0051
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/model_fold3.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/model_fold3.ckpt-0
deleted file mode 100644
index 1b3855a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/model_fold3.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/model_fold3.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/model_fold3.ckpt-early_stop
deleted file mode 100644
index 7a643ed..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/model_fold3.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict.h5
deleted file mode 100644
index 11dae2a..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict_train.h5
deleted file mode 100644
index 5d926d0..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict_val.h5
deleted file mode 100644
index 4b2cee8..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/test_headings.txt
deleted file mode 100644
index 8417193..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold3/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0043
-aaa0044
-aaa_0071
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/model_fold4.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/model_fold4.ckpt-0
deleted file mode 100644
index 016ac92..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/model_fold4.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/model_fold4.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/model_fold4.ckpt-early_stop
deleted file mode 100644
index 3153c94..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/model_fold4.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict.h5
deleted file mode 100644
index 2c3247c..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict_train.h5
deleted file mode 100644
index ede32bd..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict_val.h5
deleted file mode 100644
index ec22062..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/test_headings.txt
deleted file mode 100644
index ad5063c..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold4/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0086
-aaa0087
-aaa_0072
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-0
deleted file mode 100644
index c8c47aa..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-24481 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-24481
deleted file mode 100644
index 9a6c099..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-24481 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-early_stop
deleted file mode 100644
index cb2b070..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/model_fold5.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict.h5
deleted file mode 100644
index 6b47d4b..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict_train.h5
deleted file mode 100644
index 558d939..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict_val.h5
deleted file mode 100644
index a2bf9d7..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/test_headings.txt
deleted file mode 100644
index a4e6319..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/data_fold5/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0064
-aaa_0053
-aaa_0054
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709711867.MacBook-Pro-4.local.7580.0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709711867.MacBook-Pro-4.local.7580.0
deleted file mode 100644
index 9673422..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709711867.MacBook-Pro-4.local.7580.0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709711935.MacBook-Pro-4.local.7580.1 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709711935.MacBook-Pro-4.local.7580.1
deleted file mode 100644
index f71cf82..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709711935.MacBook-Pro-4.local.7580.1 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712001.MacBook-Pro-4.local.7580.2 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712001.MacBook-Pro-4.local.7580.2
deleted file mode 100644
index 1a022e8..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712001.MacBook-Pro-4.local.7580.2 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712066.MacBook-Pro-4.local.7580.3 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712066.MacBook-Pro-4.local.7580.3
deleted file mode 100644
index 1d078fa..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712066.MacBook-Pro-4.local.7580.3 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712130.MacBook-Pro-4.local.7580.4 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712130.MacBook-Pro-4.local.7580.4
deleted file mode 100644
index 93921f7..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/events.out.tfevents.1709712130.MacBook-Pro-4.local.7580.4 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/flags.json
deleted file mode 100644
index 08cf9e1..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 20,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/git_diff.txt
deleted file mode 100644
index 62120f2..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/git_diff.txt
+++ /dev/null
@@ -1,1339 +0,0 @@
-Tue Mar 5 23:57:47 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/.ipynb_checkpoints/penn_dataset-checkpoint.py b/.ipynb_checkpoints/penn_dataset-checkpoint.py
-index aa2f5a0..8c5b51d 100644
---- a/.ipynb_checkpoints/penn_dataset-checkpoint.py
-+++ b/.ipynb_checkpoints/penn_dataset-checkpoint.py
-@@ -15,16 +15,17 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
- flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
--flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-+flags.DEFINE_integer("n_repeats",2,"Times to repeat K-fold cross-validation")
- flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
- 
- # "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
- LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
--L_INDS = None
-+L_INDS = None # specific indices of data to select
- 
- DATAFOLDER = './penn_data'
- 
-@@ -40,11 +41,12 @@ class PennData(Dataset):
- 
-         df_list = []
-         label_list = []
--        for heading in self.headings: # for each datafile heading,
-+        for idx,heading in enumerate(self.headings): # for each datafile heading,
-             data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-             df_temp = pd.read_csv(data_name,header=None)
-+            df_temp.insert(0, 'h_idx', idx)
-             df_list.append(df_temp)
--
-+            
-             label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-             label_temp = pd.read_csv(label_name,header=None, names=['label'])
-             label_list.append(label_temp)
-@@ -57,27 +59,30 @@ class PennData(Dataset):
-         all_labels = df['label'].to_numpy()
-         all_data = df.iloc[:,1:].to_numpy()
- 
-+        lambdas = all_data[:,3:]
-+
-         if rescale: # rescale (normalize) wavelength intensity data
--            lambdas = all_data[:,2:] # wavelengths
-             lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-             lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-             lambdas_rescaled = (lambdas - lam_mean) / lam_std 
--            all_data[:,2:] = lambdas_rescaled
-+            lambdas = lambdas_rescaled
- 
--        if not include_coords: # removes x,y coordinates from data
--            all_data = all_data[:,2:]
--        
--        if k_inds != None: # in this case, only use subset of wavelengths
--            all_data = all_data[:,np.array(k_inds)]
-+        # if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-+        #     all_data[:,3:] = all_data[:,np.array(k_inds)]
-+        self.data = lambdas
-+        self.labels = all_labels
- 
--        self.all_data = all_data
--        self.all_labels = all_labels
-+        if include_coords: # removes x,y coordinates (and heading index) from data
-+            # all_data = all_data[:,3:]
-+            self.coords = all_data[:,:3]
-+        else:
-+            self.coords = None
- 
-     def __len__(self):
-         return len(self.all_data)
- 
-     def __getitem__(self,i):
--        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-+        state = {'label':self.all_labels[i],'coords':self.coords,'data':self.all_data[i]}
-         return state
- 
-     def __getstate__(self):
-@@ -109,15 +114,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +130,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..4a02232 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..ea4dbe7 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..c36011b 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,61 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(GPT_PNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        # x = x[:,::2] # try using every other wavelength
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +67,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward_halfLs"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-deleted file mode 100644
-index 688c282..0000000
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ /dev/null
-@@ -1,32 +0,0 @@
--import torch
--import torch.nn as nn
--import torch.nn.functional as F
--import numpy as np
--
--from forge import flags
--
--class PerceptronNN(nn.Module):
--    def __init__(self, input_size, num_labels):
--        super(PerceptronNN, self).__init__()
--        # Define the layers
--        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
--        self.fc2 = nn.Linear(128, 64)         # Second dense layer
--        self.fc3 = nn.Linear(64, 64)          # Third dense layer
--        self.fc4 = nn.Linear(64, num_labels)  # Output layer
--
--    def forward(self, x):
--        # Forward pass through the network
--        x = F.relu(self.fc1(x))  # Activation function between layers
--        x = F.relu(self.fc2(x))
--        x = F.relu(self.fc3(x))
--        x = self.fc4(x)  # No activation, this will be included in the loss function
--        return x
--
--def load(config):
--
--    # n_channels = 1
--    n_features = config.input_size
--    
--    mlp = PerceptronNN(n_features,2)
--    
--    return mlp
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-deleted file mode 100644
-index 1d000c3..0000000
---- a/checkpoints/feedforward/1/flags.json
-+++ /dev/null
-@@ -1,17 +0,0 @@
--{
--    "batch_size": 100,
--    "data_config": "penn_dataset.py",
--    "include_coords": false,
--    "input_size": 39,
--    "learning_rate": 1e-05,
--    "model_config": "basic_feedforward.py",
--    "n_repeats": 1,
--    "report_loss_every": 50,
--    "rescale": true,
--    "results_dir": "checkpoints",
--    "resume": false,
--    "run_name": "feedforward",
--    "split_seed": 1,
--    "train_epochs": 20,
--    "train_split": 0.8
--}
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-deleted file mode 100644
-index 7b37e6f..0000000
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ /dev/null
-@@ -1 +0,0 @@
--Mon Mar 4 11:45:48 PST 2024
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-deleted file mode 100644
-index aa2f5a0..0000000
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ /dev/null
-@@ -1,132 +0,0 @@
--import os
--import torch
--import pandas as pd
--import numpy as np
--
--from torchvision import datasets, transforms
--from torch.utils.data import Dataset, DataLoader
--from sklearn.model_selection import RepeatedKFold
--
--from os import path as osp
--import forge
--from forge import flags
--
--
--# aspects of data managmement
--flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
--flags.DEFINE_boolean("rescale", True, "Rescales intensities")
--
--# Job management
--# flags.DEFINE_integer("batch size",5,"training batch size")
--flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
--flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
--flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
--
--# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
--LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
--L_INDS = None
--
--DATAFOLDER = './penn_data'
--
--HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
--
--
--class PennData(Dataset):
--
--    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
--        
--        self.data_dir = path_to_data
--        self.headings = headings
--
--        df_list = []
--        label_list = []
--        for heading in self.headings: # for each datafile heading,
--            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
--            df_temp = pd.read_csv(data_name,header=None)
--            df_list.append(df_temp)
--
--            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
--            label_temp = pd.read_csv(label_name,header=None, names=['label'])
--            label_list.append(label_temp)
--
--        df = pd.concat(df_list, ignore_index=True)
--
--        labels = pd.concat(label_list, ignore_index=True)
--        df = pd.concat([labels, df], axis="columns") # Append labels to data
--
--        all_labels = df['label'].to_numpy()
--        all_data = df.iloc[:,1:].to_numpy()
--
--        if rescale: # rescale (normalize) wavelength intensity data
--            lambdas = all_data[:,2:] # wavelengths
--            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
--            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
--            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
--            all_data[:,2:] = lambdas_rescaled
--
--        if not include_coords: # removes x,y coordinates from data
--            all_data = all_data[:,2:]
--        
--        if k_inds != None: # in this case, only use subset of wavelengths
--            all_data = all_data[:,np.array(k_inds)]
--
--        self.all_data = all_data
--        self.all_labels = all_labels
--
--    def __len__(self):
--        return len(self.all_data)
--
--    def __getitem__(self,i):
--        state = {'label':self.all_labels[i],'data':self.all_data[i]}
--        return state
--
--    def __getstate__(self):
--        state = {
--            'data': self.all_data,
--            'label': self.all_labels,
--                }
--        return state
--
--    def __setstate__(self, state):
--        # Set the object's state from the provided dictionary
--        self.all_data = state['data']
--        self.all_labels = state['label']
--        
--
--
--def load(config):
--
--    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
--
--    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
--
--    kf_dataloaders = []
--
--    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
--        n_val = len(test_ind)//2
--        n_test = len(test_ind)-n_val   
--        n_train = len(train_ind)
--        
--        # set up training DataLoader
--        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
--
--        # set up test DataLoader
--        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
--
--        # set up val DataLoader
--        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
--        
--
--        dataloaders = {'train':train_loader, 
--                       'test':test_loader,
--                       'val':val_loader,
--                       'train_inds':train_ind,
--                       'test_inds':test_ind,
--                       'n_val':n_val
--                      }
--        kf_dataloaders.append(dataloaders)
--
--    return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..41d02d6 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -24,7 +25,7 @@ flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproduci
- 
- # "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
- LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
--L_INDS = None
-+L_INDS = None # specific indices of data to select
- 
- DATAFOLDER = './penn_data'
- 
-@@ -33,100 +34,125 @@ HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064'
- 
- class PennData(Dataset):
- 
--    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
--        
--        self.data_dir = path_to_data
--        self.headings = headings
--
--        df_list = []
--        label_list = []
--        for heading in self.headings: # for each datafile heading,
--            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
--            df_temp = pd.read_csv(data_name,header=None)
--            df_list.append(df_temp)
--
--            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
--            label_temp = pd.read_csv(label_name,header=None, names=['label'])
--            label_list.append(label_temp)
--
--        df = pd.concat(df_list, ignore_index=True)
--
--        labels = pd.concat(label_list, ignore_index=True)
--        df = pd.concat([labels, df], axis="columns") # Append labels to data
--
--        all_labels = df['label'].to_numpy()
--        all_data = df.iloc[:,1:].to_numpy()
--
--        if rescale: # rescale (normalize) wavelength intensity data
--            lambdas = all_data[:,2:] # wavelengths
--            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
--            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
--            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
--            all_data[:,2:] = lambdas_rescaled
--
--        if not include_coords: # removes x,y coordinates from data
--            all_data = all_data[:,2:]
--        
--        if k_inds != None: # in this case, only use subset of wavelengths
--            all_data = all_data[:,np.array(k_inds)]
--
--        self.all_data = all_data
--        self.all_labels = all_labels
--
--    def __len__(self):
--        return len(self.all_data)
--
--    def __getitem__(self,i):
--        state = {'label':self.all_labels[i],'data':self.all_data[i]}
--        return state
--
--    def __getstate__(self):
--        state = {
--            'data': self.all_data,
--            'label': self.all_labels,
--                }
--        return state
--
--    def __setstate__(self, state):
--        # Set the object's state from the provided dictionary
--        self.all_data = state['data']
--        self.all_labels = state['label']
--        
-+	def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-+		
-+		self.data_dir = path_to_data
-+		self.headings = headings
-+		self.inclx = include_coords
-+
-+		df_list = []
-+		label_list = []
-+		for idx,heading in enumerate(self.headings): # for each datafile heading,
-+			data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-+			df_temp = pd.read_csv(data_name,header=None)
-+			df_temp.insert(0, 'h_idx', idx)
-+			df_list.append(df_temp)
-+			
-+			label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-+			label_temp = pd.read_csv(label_name,header=None, names=['label'])
-+			label_list.append(label_temp)
-+
-+		df = pd.concat(df_list, ignore_index=True)
-+
-+		labels = pd.concat(label_list, ignore_index=True)
-+		df = pd.concat([labels, df], axis="columns") # Append labels to data
-+
-+		all_labels = df['label'].to_numpy()
-+		all_data = df.iloc[:,1:].to_numpy()
-+
-+		lambdas = all_data[:,3:]
-+
-+		if rescale: # rescale (normalize) wavelength intensity data
-+			lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-+			lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-+			lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-+			lambdas = lambdas_rescaled
-+
-+		# if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-+		#     all_data[:,3:] = all_data[:,np.array(k_inds)]
-+		self.data = lambdas
-+		self.labels = all_labels
-+
-+		if include_coords: # removes x,y coordinates (and heading index) from data
-+			# all_data = all_data[:,3:]
-+			self.coords = all_data[:,:3]
-+		else:
-+			self.coords = None
-+
-+	def __len__(self):
-+		return len(self.data)
-+
-+	def __getitem__(self,i):
-+		if self.inclx:
-+			state = {'label':self.labels[i],'coords':self.coords[i],'data':self.data[i]}
-+			return state
-+		else:
-+			state = {'label':self.labels[i],'data':self.data[i]}
-+			return state
-+
-+	def __getstate__(self):
-+		if self.inclx:
-+			state = {
-+				'data': self.data,
-+				'label': self.labels,
-+				'coords':self.coords
-+					}
-+			return state
-+		else:
-+			state = {
-+				'data': self.data,
-+				'label': self.labels,
-+					}
-+			return state
-+
-+	def __setstate__(self, state):
-+		# Set the object's state from the provided dictionary
-+		if include_coords:
-+			self.data = state['data']
-+			self.labels = state['label']
-+			self.coords = state['coords']
-+		else:
-+			self.data = state['data']
-+			self.labels = state['label']
- 
- 
- def load(config):
- 
--    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-+	n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-+
-+	kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
- 
--    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-+	kf_dataloaders = []
- 
--    kf_dataloaders = []
-+	for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-+		n_val = len(test_ind)//2
-+		n_test = len(test_ind)-n_val   
-+		n_train = len(train_ind)
-+		
-+		# set up training DataLoader
-+		train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+		train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
--    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
--        n_val = len(test_ind)//2
--        n_test = len(test_ind)-n_val   
--        n_train = len(train_ind)
--        
--        # set up training DataLoader
--        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+		# set up test DataLoader
-+		test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+		test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
--        # set up test DataLoader
--        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+		# set up val DataLoader
-+		val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+		val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+		
- 
--        # set up val DataLoader
--        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
--        
-+		dataloaders = {'train':train_loader, 
-+					   'test':test_loader,
-+					   'val':val_loader,
-+					   'train_inds':train_ind,
-+					   'test_inds':test_ind,
-+					   'n_val':n_val,
-+					   'test_headings':list(HEADINGS[test_ind])
-+					  }
-+		kf_dataloaders.append(dataloaders)
- 
--        dataloaders = {'train':train_loader, 
--                       'test':test_loader,
--                       'val':val_loader,
--                       'train_inds':train_ind,
--                       'test_inds':test_ind,
--                       'n_val':n_val
--                      }
--        kf_dataloaders.append(dataloaders)
-+		if not config.cross_validate:
-+			break
- 
--    return kf_dataloaders
-+	return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..5b7601a 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 7,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -18,24 +18,73 @@
-     "\n",
-     "import forge\n",
-     "from forge import flags\n",
--    "import forge.experiment_tools as fet"
-+    "import forge.experiment_tools as fet\n",
-+    "\n",
-+    "from penn_dataset import PennData"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 8,
-+   "id": "92bae5ef-5c95-4528-a76d-003bbe09786c",
-+   "metadata": {},
-+   "outputs": [],
-+   "source": [
-+    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 14,
-+   "id": "9d401c3e-bbc9-4ee9-a4e1-7ca7f7a3d701",
-+   "metadata": {},
-+   "outputs": [],
-+   "source": [
-+    "dat = PennData('./penn_data',headings[:1],include_coords = True)"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 15,
-+   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "array([[ 0.,  1.,  1.],\n",
-+       "       [ 0.,  2.,  1.],\n",
-+       "       [ 0.,  3.,  1.],\n",
-+       "       ...,\n",
-+       "       [ 0., 31., 41.],\n",
-+       "       [ 0., 32., 41.],\n",
-+       "       [ 0., 33., 41.]])"
-+      ]
-+     },
-+     "execution_count": 15,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": [
-+    "dat.coords"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-    "source": [
-     "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
--    "\n",
-+    "flags.DEFINE_st\n",
-     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +103,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +116,49 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..baee91a 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,467 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = False
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
-+					 'Number of iterations between reporting minibatch loss.')
- flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+		("n_repeats",'nrep')
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			runsum = 0
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				runsum += loss.item() # track loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						train_reports.append([train_iter,runsum/config.report_loss_every])
-+						runsum = 0
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/penn_dataset.py
deleted file mode 100644
index 41d02d6..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/penn_dataset.py
+++ /dev/null
@@ -1,158 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None # specific indices of data to select
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-	def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-		
-		self.data_dir = path_to_data
-		self.headings = headings
-		self.inclx = include_coords
-
-		df_list = []
-		label_list = []
-		for idx,heading in enumerate(self.headings): # for each datafile heading,
-			data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-			df_temp = pd.read_csv(data_name,header=None)
-			df_temp.insert(0, 'h_idx', idx)
-			df_list.append(df_temp)
-			
-			label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-			label_temp = pd.read_csv(label_name,header=None, names=['label'])
-			label_list.append(label_temp)
-
-		df = pd.concat(df_list, ignore_index=True)
-
-		labels = pd.concat(label_list, ignore_index=True)
-		df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-		all_labels = df['label'].to_numpy()
-		all_data = df.iloc[:,1:].to_numpy()
-
-		lambdas = all_data[:,3:]
-
-		if rescale: # rescale (normalize) wavelength intensity data
-			lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-			lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-			lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-			lambdas = lambdas_rescaled
-
-		# if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-		#     all_data[:,3:] = all_data[:,np.array(k_inds)]
-		self.data = lambdas
-		self.labels = all_labels
-
-		if include_coords: # removes x,y coordinates (and heading index) from data
-			# all_data = all_data[:,3:]
-			self.coords = all_data[:,:3]
-		else:
-			self.coords = None
-
-	def __len__(self):
-		return len(self.data)
-
-	def __getitem__(self,i):
-		if self.inclx:
-			state = {'label':self.labels[i],'coords':self.coords[i],'data':self.data[i]}
-			return state
-		else:
-			state = {'label':self.labels[i],'data':self.data[i]}
-			return state
-
-	def __getstate__(self):
-		if self.inclx:
-			state = {
-				'data': self.data,
-				'label': self.labels,
-				'coords':self.coords
-					}
-			return state
-		else:
-			state = {
-				'data': self.data,
-				'label': self.labels,
-					}
-			return state
-
-	def __setstate__(self, state):
-		# Set the object's state from the provided dictionary
-		if include_coords:
-			self.data = state['data']
-			self.labels = state['label']
-			self.coords = state['coords']
-		else:
-			self.data = state['data']
-			self.labels = state['label']
-
-
-def load(config):
-
-	n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-	kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-	kf_dataloaders = []
-
-	for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-		n_val = len(test_ind)//2
-		n_test = len(test_ind)-n_val   
-		n_train = len(train_ind)
-		
-		# set up training DataLoader
-		train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-		# set up test DataLoader
-		test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-		# set up val DataLoader
-		val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-		
-
-		dataloaders = {'train':train_loader, 
-					   'test':test_loader,
-					   'val':val_loader,
-					   'train_inds':train_ind,
-					   'test_inds':test_ind,
-					   'n_val':n_val,
-					   'test_headings':list(HEADINGS[test_ind])
-					  }
-		kf_dataloaders.append(dataloaders)
-
-		if not config.cross_validate:
-			break
-
-	return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep2_/.DS_Store b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep2_/.DS_Store
deleted file mode 100644
index 5008ddf..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep2_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/basic_feedforward.py
deleted file mode 100644
index a814670..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/basic_feedforward.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        x = x[:,::2] # try using every other wavelength
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward_halfLs"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 26d8425..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/events.out.tfevents.1709692016.MacBook-Pro-4.local.4357.0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/events.out.tfevents.1709692016.MacBook-Pro-4.local.4357.0
deleted file mode 100644
index 10d0d04..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/events.out.tfevents.1709692016.MacBook-Pro-4.local.4357.0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/flags.json
deleted file mode 100644
index 0a98821..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 75,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/git_diff.txt
deleted file mode 100644
index 3d04faf..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/git_diff.txt
+++ /dev/null
@@ -1,1813 +0,0 @@
-Tue Mar 5 18:26:56 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..adb613e 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..6fdde51 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..a814670 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,61 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(GPT_PNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        x = x[:,::2] # try using every other wavelength
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +67,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward_halfLs"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..d389e88 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,461 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 75, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/basic_feedforward.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/basic_feedforward.py
deleted file mode 100644
index c36011b..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/basic_feedforward.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-class GPT_PNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(GPT_PNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-        
-        # Commenting out to reduce model complexity
-        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-        
-        # Simplified to have fewer layers and neurons
-        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-
-        # Output layer remains the same, adjusted for reduced prior layer size
-        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-
-    def forward(self, x):
-        # x = x[:,::2] # try using every other wavelength
-        # Forward pass through the network with activations, batch normalization, and dropout
-        x = F.relu(self.bn1(self.fc1(x)))
-        x = self.dropout1(x)
-        x = F.relu(self.bn2(self.fc2(x)))
-        x = self.dropout2(x)
-        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    # mlp = PerceptronNN(n_features,2)
-
-    mlp = GPT_PNN(n_features,2)
-    
-    return mlp, "gpt_feedforward_halfLs"
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 26d8425..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index ef6957f..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index e89d565..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict.h5
deleted file mode 100644
index 6a4f941..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict_train.h5
deleted file mode 100644
index 37d9287..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict_val.h5
deleted file mode 100644
index d79d26d..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-0
deleted file mode 100644
index fae4036..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-60651 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-60651
deleted file mode 100644
index f40d8b7..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-60651 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-early_stop
deleted file mode 100644
index 5aa0f8f..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/model_fold2.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict.h5
deleted file mode 100644
index ebb727b..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict_train.h5
deleted file mode 100644
index d71d42b..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict_val.h5
deleted file mode 100644
index b874e73..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/test_headings.txt
deleted file mode 100644
index b87ab5e..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold2/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0063
-aaa0066
-aaa_0051
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-0
deleted file mode 100644
index c5f3787..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-63751 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-63751
deleted file mode 100644
index 4d20914..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-63751 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-early_stop
deleted file mode 100644
index 58de1d4..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/model_fold3.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict.h5
deleted file mode 100644
index 41fcc57..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict_train.h5
deleted file mode 100644
index be8445c..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict_val.h5
deleted file mode 100644
index 53daad1..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/test_headings.txt
deleted file mode 100644
index 8417193..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold3/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0043
-aaa0044
-aaa_0071
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-0
deleted file mode 100644
index 645928d..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-63601 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-63601
deleted file mode 100644
index d178242..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-63601 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-early_stop
deleted file mode 100644
index 742921f..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/model_fold4.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict.h5
deleted file mode 100644
index a7d3e46..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict_train.h5
deleted file mode 100644
index 7b449fd..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict_val.h5
deleted file mode 100644
index f3695d4..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/test_headings.txt
deleted file mode 100644
index ad5063c..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold4/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0086
-aaa0087
-aaa_0072
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-0
deleted file mode 100644
index 40d8ce4..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-61201 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-61201
deleted file mode 100644
index 1937784..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-61201 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-91801 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-91801
deleted file mode 100644
index 7ed9ba7..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-91801 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-early_stop b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-early_stop
deleted file mode 100644
index 801eee4..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/model_fold5.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict.h5
deleted file mode 100644
index 90f51dd..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict_train.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict_train.h5
deleted file mode 100644
index dca3b37..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict_val.h5 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict_val.h5
deleted file mode 100644
index 1d72be6..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/test_headings.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/test_headings.txt
deleted file mode 100644
index a4e6319..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/data_fold5/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0064
-aaa_0053
-aaa_0054
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692040.MacBook-Pro-4.local.4381.0 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692040.MacBook-Pro-4.local.4381.0
deleted file mode 100644
index 6082775..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692040.MacBook-Pro-4.local.4381.0 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692226.MacBook-Pro-4.local.4381.1 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692226.MacBook-Pro-4.local.4381.1
deleted file mode 100644
index a8e8ecd..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692226.MacBook-Pro-4.local.4381.1 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692447.MacBook-Pro-4.local.4381.2 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692447.MacBook-Pro-4.local.4381.2
deleted file mode 100644
index 0e6ddd1..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692447.MacBook-Pro-4.local.4381.2 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692664.MacBook-Pro-4.local.4381.3 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692664.MacBook-Pro-4.local.4381.3
deleted file mode 100644
index 2b1bfec..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692664.MacBook-Pro-4.local.4381.3 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692864.MacBook-Pro-4.local.4381.4 b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692864.MacBook-Pro-4.local.4381.4
deleted file mode 100644
index 07bc3e0..0000000
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/events.out.tfevents.1709692864.MacBook-Pro-4.local.4381.4 and /dev/null differ
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/flags.json b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/flags.json
deleted file mode 100644
index 0a98821..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/flags.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "model_name": "gpt-FCNN",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 75,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/git_diff.txt b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/git_diff.txt
deleted file mode 100644
index db2e70d..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/git_diff.txt
+++ /dev/null
@@ -1,1813 +0,0 @@
-Tue Mar 5 18:27:20 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..4a02232 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..6fdde51 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..c36011b 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,61 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-+        return x
-+
-+class GPT_PNN(nn.Module):
-+    def __init__(self, input_size, num_labels):
-+        super(GPT_PNN, self).__init__()
-+        # Define the layers
-+        self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
-+        self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
-+        self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
-+        
-+        # Commenting out to reduce model complexity
-+        # self.fc2 = nn.Linear(128, 64)  # Second dense layer
-+        # self.dropout2 = nn.Dropout(0.5)  # Additional dropout layer
-+        
-+        # Simplified to have fewer layers and neurons
-+        self.fc2 = nn.Linear(64, 32)  # Reduced size for second dense layer
-+        self.bn2 = nn.BatchNorm1d(32)  # Batch Normalization for the second layer
-+        self.dropout2 = nn.Dropout(0.5)  # Dropout with 50% probability
-+
-+        # Output layer remains the same, adjusted for reduced prior layer size
-+        self.fc3 = nn.Linear(32, num_labels)  # Output layer
-+
-+    def forward(self, x):
-+        # x = x[:,::2] # try using every other wavelength
-+        # Forward pass through the network with activations, batch normalization, and dropout
-+        x = F.relu(self.bn1(self.fc1(x)))
-+        x = self.dropout1(x)
-+        x = F.relu(self.bn2(self.fc2(x)))
-+        x = self.dropout2(x)
-+        x = self.fc3(x)  # No activation here, use sigmoid or softmax outside if needed for binary classification
-         return x
- 
- def load(config):
-@@ -27,6 +67,8 @@ def load(config):
-     # n_channels = 1
-     n_features = config.input_size
-     
--    mlp = PerceptronNN(n_features,2)
-+    # mlp = PerceptronNN(n_features,2)
-+
-+    mlp = GPT_PNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "gpt_feedforward_halfLs"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..d389e88 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,461 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('model_name', 'gpt-FCNN',
-+					'shorthand name for model.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 75, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		config.model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# Load model
-+		model,model_name = fet.load(config.model_config, config)
-+		model = model.to(device)
-+
-+		# Print model info
-+		print(model)
-+
-+		# Setup optimizer
-+		model_params = model.parameters()
-+		opt_learning_rate = config.learning_rate
-+		model_opt = torch.optim.Adam(
-+			model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+		)
-+		scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+		print("Model Optimizer:")
-+		print(model_opt)
-+
-+		# Try to restore model and optimizer from checkpoint
-+		if resume_checkpoint is not None:
-+			start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+		else:
-+			start_epoch = 1
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/penn_dataset.py b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs75_/2/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/eval_tools.py b/eval_tools.py
deleted file mode 100644
index b09c950..0000000
--- a/eval_tools.py
+++ /dev/null
@@ -1,292 +0,0 @@
-import torch
-import numpy as np
-import json
-import torch.nn.functional as F
-import deepdish as dd
-
-import torchmetrics
-from torchmetrics.classification import BinaryConfusionMatrix
-
-import matplotlib.pyplot as plt
-from os import path as osp
-import os
-import re
-import h5py
-
-import forge
-from forge import flags
-import forge.experiment_tools as fet
-from forge import load_from_checkpoint
-from attrdict import AttrDict
-
-from train_tools import param_count,nested_to
-
-###########################################################################
-# Binary classification functions
-
-def get_acc(arr): # get accuracy of set of confusion matrices
-    # arr.shape (n_thresholds,2,2)
-    return np.array([(x[1,1] + x[0,0])/(x[0,0] + x[0,1] + x[1,0] + x[1,1]) if (x[0,0] + x[0,1] + x[1,0] + x[1,1]) else 0 for x in arr])
-
-def get_prec(arr): # get precision of set of confusion matrices
-    # arr.shape (n_thresholds,2,2)
-    return np.array([(x[1,1])/(x[1,1] + x[0,1]) if (x[1,1] + x[0,1]) > 0 else 0 for x in arr])
-
-def get_tpr(arr): # get true positive rate/recall of set of confusion matrices
-    # arr.shape (n_thresholds,2,2)
-    return np.array([(x[1,1])/(x[1,1] + x[1,0]) if (x[1,1] + x[1,0]) > 0 else 0 for x in arr])
-
-def get_fpr(arr): # get false positive rate of set of confusion matrices
-    # arr.shape (n_thresholds,2,2)
-    return np.array([(x[0,1])/(x[0,1] + x[0,0]) if (x[0,1] + x[0,0]) > 0 else 0 for x in arr])
-
-def get_F1(arr): # get F1-score of set of confusion matrices
-    # arr.shape (n_thresholds,2,2)
-    return np.array([2*x[1,1]/(2*x[1,1] + x[0,1] + x[1,0]) if (2*x[1,1] + x[0,1] + x[1,0]) > 0 else 0 for x in arr])
-
-
-###########################################################################
-# Main function for extracting metrics from a model run
-
-def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,nonlin_thresholds = False):
-    # run directory should contain folders 1,2,3... 
-    if nonlin_thresholds:
-        num_elements = n_thresholds
-
-        # Create a non-linear space with more density at lower values
-        # Using exponential space for higher resolution at smaller thresholds
-        # Adjust the base of the exponential to control the distribution
-        non_linear_part = np.exp(np.linspace(-np.log(1000), 0, num_elements // 2))
-        
-        # Create a linear space for the higher thresholds
-        linear_part = np.linspace(0, 1, num_elements // 2)
-        
-        # Combine both parts
-        thresholds = np.unique(np.concatenate([non_linear_part, linear_part]))
-        
-        # Ensure the thresholds are sorted (necessary if combining different spaces)
-        thresholds.sort()
-    else:
-        thresholds = np.linspace(1e-8,1,n_thresholds)
-    BCM = BinaryConfusionMatrix()
-    ###########
-    # Note: BCM = [[TN,FP],[FN,TP]] 
-    
-    if checkpoint_num is None: # if None, get most recent directory
-        checkpoint_num = max([int(x) for x in os.listdir(run_dir) if osp.isdir(os.path.join(run_dir, x))])
-
-    working_dir = osp.join(run_dir,str(checkpoint_num))
-    print("Getting metrics from",working_dir)
-    flag_file = osp.join(working_dir,'flags.json')
-    with open(flag_file, 'r') as file:
-        flag_info = json.load(file)
-    config = AttrDict(flag_info)
-
-    model_config = osp.join(working_dir,config['model_config'])
-    data_config = osp.join(working_dir,config['data_config'])
-
-    # print(model_config)
-    # print(data_config)
-
-    # load model (same for all kfolds)
-    model,model_name = fet.load(model_config,config)
-
-    # load data
-    kfold_loaders = fet.load(data_config, config)
-    nfolds = len(kfold_loaders)
-    print("Data is {}-fold partitioned.".format(nfolds))
-
-    conf_shape = (nfolds,n_thresholds,2,2)
-    # list of confusion matrices (nfolds,n_thresholds)
-    conf_mats = {'train':np.zeros(conf_shape),
-                 'test':np.zeros(conf_shape),
-                 'val':np.zeros(conf_shape)} 
-
-    results = {'thresholds':thresholds,'config':config,'params':param_count(model)}
-
-    test_times = []
-    test_losses = []
-    train_iters = []
-    train_losses = []
-    # val_times = [] # these are mostly redundant for now
-    # val_losses = []
-
-    ###########################################
-    # RECORD METRICS, CONFUSION MATRICES FOR ALL THRESHOLDS FOR ALL FOLDS, MODELS
-    
-    for k,loader_dict in enumerate(kfold_loaders):
-        print("Evaluating fold {}...".format(k+1))
-        fold_dir = osp.join(working_dir,"data_fold{}".format(k+1))
-
-        # record times and losses from results_dict.h5
-        test_reports = dd.io.load(osp.join(fold_dir,'results_dict.h5'))
-        test_times.append(test_reports['time']/max(test_reports['time']))
-        test_losses.append(test_reports['cross_entropy'])
-
-        iters,losses = np.array(dd.io.load(osp.join(fold_dir,'results_dict_train.h5'))).T
-        train_iters.append(iters)
-        train_losses.append(losses)
-        # val_reports = dd.io.load(osp.join(fold_dir,'results_dict_val.h5'))
-        # val_times.append(val_reports['time'])
-        # val_losses.append(val_reports['cross_entropy']
-        
-        # find and load latest model checkpoint in fold dir
-        model_ckpt_name = "model_fold{}.ckpt-".format(k+1)
-        ckpt_files = [f for f in os.listdir(fold_dir) if f.startswith(model_ckpt_name) and re.search(r'\d+$', f)]
-        latest_ckpt = max(ckpt_files, key=lambda x: int(re.search(r'(\d+)$', x).group()), default=None)
-
-        ckpt_file = osp.join(fold_dir, latest_ckpt)
-        
-        # load model weights from final checkpoint and set to evaluation mode
-        model_wts = torch.load(ckpt_file)
-
-        model.load_state_dict(model_wts['model_state_dict'])
-        model.eval()
-
-        # set up model to make binary int class predictions from logit output
-        # def model_preds(x,threshold = 0.5,softmax = True):
-        #     if softmax:
-        #         probs = np.array(F.softmax(model(x),dim=1))
-        #     else:
-        #         probs = np.array(model(x))
-        #     print(probs[:,1])
-        #     preds = np.zeros(len(probs),dtype = int)
-        #     preds[probs[:,1] > threshold] = 1 # CONFUSED ABOUT DIRECTION OF THIS INEQ
-        #     return torch.tensor(preds)
-
-        for subset in conf_mats.keys(): # loop over train,test,val data subsets
-            print("in subset",subset)
-            loader = loader_dict[subset] # specific dataloader
-            
-            all_labels = torch.tensor(loader.dataset.labels) # all predictions
-            # print('truelabels counts',np.bincount(all_labels))
-            all_data = torch.tensor(loader.dataset.data).float() # all inputs
-
-            with torch.no_grad():
-                if softmax:
-                    probs = np.array(F.softmax(model(all_data),dim=1))
-                else:
-                    probs = np.array(model(all_data))
-
-            for ii,t in enumerate(thresholds): # for all classification thresholds,
-                 # make binary predicitions at this threshold,
-                    # print('threshold',t)
-                    # all_preds = model_preds(all_data,threshold = t)
-                all_preds = np.zeros(len(probs),dtype = int)
-                
-                all_preds[probs[:,1] > t] = 1 # as threshold increases, fewer positives (FPR-> 0)
-
-                all_preds = torch.tensor(all_preds)
-
-                # compute confusion matrix
-                binary_confusion_matrix = np.array(BCM(all_preds,all_labels),dtype = int)
-
-                # record confusion matrix
-                conf_mats[subset][k][ii] = binary_confusion_matrix
-
-    ##########################################################
-    # AGGREGATE PREDICTIONS OVER DATA FOLDS AND RETURN METRICS
-
-    # collect loss vs. time data from training
-    results['test_time'] = test_times
-    results['test_loss'] = test_losses
-
-    results['train_iter'] = train_iters
-    results['train_loss'] = train_losses
-    
-    common_t = np.linspace(0, 1, 100)
-    interpolated_y_values = np.array([interp1d(x, y, bounds_error=False, fill_value='extrapolate')(common_t) for x, y in zip(test_times, test_losses)])
-    average_loss = np.mean(interpolated_y_values, axis=0)
-    
-    results['avg_loss'] = (common_t,average_loss)
-    
-    print("Models evaluated. Computing metrics...")
-    for subset in conf_mats.keys(): # for train, test, val
-        thresh_mats = np.sum(conf_mats[subset],axis = 0) # sum confusion matrices over data folds
-        
-        # compute accuracy
-        results[subset+'_acc'] = get_acc(thresh_mats)
-        # compute precision
-        results[subset+'_prec'] = get_prec(thresh_mats)
-        # compute TPR
-        results[subset+'_tpr'] = get_tpr(thresh_mats)
-        # compute FPR
-        results[subset+'_fpr'] = get_fpr(thresh_mats)
-        # compute F1 score
-        results[subset+'_F1'] = get_F1(thresh_mats)
-    print("Done.")
-    return results
-
-###########################################################################
-###########################################################################
-# Plotting various metrics
-
-
-# PLOT TEST LOSS VS TIME
-def plot_loss(run_info,**kwargs):
-    times = run_info['test_time']
-    losses = run_info['test_loss']
-    ts,avg = run_info['avg_loss']
-    for k in range(len(times)):
-        plt.plot(times[k],losses[k],label = 'fold {} loss'.format(k+1))
-    plt.plot(ts,avg,'k--',linewidth = 2,label = 'avg loss')
-    plt.xlabel("training time")
-    # plt.xscale('log')
-    plt.ylabel("test loss")
-    plt.legend()
-    plt.show()
-
-# PLOT ACCURACY VS THRESHOLD
-def plot_accuracy(run_info,**kwargs):
-    ts = run_info['thresholds']
-    subsets = ['train','test','val']
-    for subset in subsets:
-        accs = run_info[subset+'_acc']
-        plt.plot(ts,accs,label = subset,**kwargs)
-    plt.xlabel("classification threshold")
-    plt.ylabel("accuracy")
-    plt.title("Classifier accuracy vs. threshold")
-    plt.legend()
-    plt.show()
-
-# PLOT F1 SCORE VS THRESHOLD
-def plot_F1(run_info,**kwargs):
-    ts = run_info['thresholds']
-    subsets = ['test']
-    for subset in subsets:
-        accs = run_info[subset+'_F1']
-        plt.plot(ts,accs,label = subset,**kwargs)
-    plt.xlabel("classification threshold")
-    plt.ylabel("F1 Score")
-    plt.title("F1 score vs. threshold")
-    plt.legend()
-    plt.show()
-
-# PLOT ROC CURVES
-def plot_ROC(run_info,**kwargs):
-    subsets = ['train','test','val']
-    for subset in subsets:
-        tprs = np.append(run_info[subset+'_tpr'][::-1],1)
-        fprs = np.append(run_info[subset+'_fpr'][::-1],1)
-        auc = np.trapz(tprs,fprs)
-        plt.plot(fprs,tprs,label = subset + "; AUC = {}".format(auc),**kwargs)
-    line = np.linspace(0,1,100)
-    plt.plot(line,line,'k--')
-    plt.xlabel("False positive rate")
-    plt.ylabel("True positive rate")
-    plt.title("ROC Curves; in/out of sample")
-    plt.legend()
-    plt.show()
-
-# PLOT PR CURVES
-def plot_PR(run_info,**kwargs):
-    subsets = ['test','val']
-    for subset in subsets:
-        precs = run_info[subset+'_prec'][::-1]
-        recs = run_info[subset+'_tpr'][::-1]
-        plt.plot(recs,precs,label = subset,**kwargs)
-    plt.xlabel("Recall")
-    plt.ylabel("Precision")
-    plt.title("PR Curves; out of sample")
-    plt.legend()
-    plt.show()
\ No newline at end of file
diff --git a/penn_dataset.py b/penn_dataset.py
deleted file mode 100644
index 41d02d6..0000000
--- a/penn_dataset.py
+++ /dev/null
@@ -1,158 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None # specific indices of data to select
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-	def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-		
-		self.data_dir = path_to_data
-		self.headings = headings
-		self.inclx = include_coords
-
-		df_list = []
-		label_list = []
-		for idx,heading in enumerate(self.headings): # for each datafile heading,
-			data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-			df_temp = pd.read_csv(data_name,header=None)
-			df_temp.insert(0, 'h_idx', idx)
-			df_list.append(df_temp)
-			
-			label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-			label_temp = pd.read_csv(label_name,header=None, names=['label'])
-			label_list.append(label_temp)
-
-		df = pd.concat(df_list, ignore_index=True)
-
-		labels = pd.concat(label_list, ignore_index=True)
-		df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-		all_labels = df['label'].to_numpy()
-		all_data = df.iloc[:,1:].to_numpy()
-
-		lambdas = all_data[:,3:]
-
-		if rescale: # rescale (normalize) wavelength intensity data
-			lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-			lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-			lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-			lambdas = lambdas_rescaled
-
-		# if k_inds != None: # THIS DOES NOT MAKE SENSE HERE
-		#     all_data[:,3:] = all_data[:,np.array(k_inds)]
-		self.data = lambdas
-		self.labels = all_labels
-
-		if include_coords: # removes x,y coordinates (and heading index) from data
-			# all_data = all_data[:,3:]
-			self.coords = all_data[:,:3]
-		else:
-			self.coords = None
-
-	def __len__(self):
-		return len(self.data)
-
-	def __getitem__(self,i):
-		if self.inclx:
-			state = {'label':self.labels[i],'coords':self.coords[i],'data':self.data[i]}
-			return state
-		else:
-			state = {'label':self.labels[i],'data':self.data[i]}
-			return state
-
-	def __getstate__(self):
-		if self.inclx:
-			state = {
-				'data': self.data,
-				'label': self.labels,
-				'coords':self.coords
-					}
-			return state
-		else:
-			state = {
-				'data': self.data,
-				'label': self.labels,
-					}
-			return state
-
-	def __setstate__(self, state):
-		# Set the object's state from the provided dictionary
-		if include_coords:
-			self.data = state['data']
-			self.labels = state['label']
-			self.coords = state['coords']
-		else:
-			self.data = state['data']
-			self.labels = state['label']
-
-
-def load(config):
-
-	n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-	kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-	kf_dataloaders = []
-
-	for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-		n_val = len(test_ind)//2
-		n_test = len(test_ind)-n_val   
-		n_train = len(train_ind)
-		
-		# set up training DataLoader
-		train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-		# set up test DataLoader
-		test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-		# set up val DataLoader
-		val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-		
-
-		dataloaders = {'train':train_loader, 
-					   'test':test_loader,
-					   'val':val_loader,
-					   'train_inds':train_ind,
-					   'test_inds':test_ind,
-					   'n_val':n_val,
-					   'test_headings':list(HEADINGS[test_ind])
-					  }
-		kf_dataloaders.append(dataloaders)
-
-		if not config.cross_validate:
-			break
-
-	return kf_dataloaders
diff --git a/testing.ipynb b/testing.ipynb
index 5b7601a..44b4dd2 100644
--- a/testing.ipynb
+++ b/testing.ipynb
@@ -2,16 +2,18 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 1,
    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
    "metadata": {},
    "outputs": [],
    "source": [
     "import torch\n",
+    "import torch.nn as nn\n",
+    "import torch.nn.functional as F\n",
     "import numpy as np\n",
     "from sklearn.model_selection import RepeatedKFold\n",
     "import pandas as pd\n",
-    "from torch.utils.data import Dataset, DataLoader\n",
+    "from torch.utils.data import Dataset, DataLoader, Sampler\n",
     "\n",
     "import matplotlib.pyplot as plt\n",
     "from os import path as osp\n",
@@ -20,56 +22,367 @@
     "from forge import flags\n",
     "import forge.experiment_tools as fet\n",
     "\n",
-    "from penn_dataset import PennData"
+    "from penn_dataset import PennData,headingSampler"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 42,
    "id": "92bae5ef-5c95-4528-a76d-003bbe09786c",
    "metadata": {},
    "outputs": [],
    "source": [
-    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n"
+    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n",
+    "kinds = None\n",
+    "dat = PennData('./penn_data',headings,include_coords = False,k_inds = kinds)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 53,
+   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([10, 1, 39])"
+      ]
+     },
+     "execution_count": 53,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "df,bounds = pad_dataframe(dat.df)\n",
+    "loader = DataLoader(dat,batch_size = 10,sampler = None)\n",
+    "example = next(iter(loader))\n",
+    "xx = torch.unsqueeze(example['data'].float(),1)\n",
+    "s = xx.shape\n",
+    "s"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 86,
+   "id": "c15fbcaf-a7cd-4b52-9b94-81b3b16dee64",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[-0.1314,  0.1730],\n",
+       "        [-0.1235,  0.1467],\n",
+       "        [-0.1051,  0.1324],\n",
+       "        [-0.1355,  0.1999],\n",
+       "        [-0.2359,  0.4004],\n",
+       "        [-0.2339,  0.4176],\n",
+       "        [-0.1553,  0.3063],\n",
+       "        [-0.1002,  0.1395],\n",
+       "        [-0.1073,  0.1191],\n",
+       "        [-0.0951,  0.1044]], grad_fn=<AddmmBackward0>)"
+      ]
+     },
+     "execution_count": 86,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m = ConvNN(16,2,2)\n",
+    "m(example)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
-   "id": "9d401c3e-bbc9-4ee9-a4e1-7ca7f7a3d701",
+   "execution_count": 84,
+   "id": "94bb950c-609a-44f2-a6f4-5d50f944cd90",
    "metadata": {},
    "outputs": [],
    "source": [
-    "dat = PennData('./penn_data',headings[:1],include_coords = True)"
+    "class ConvNN(nn.Module):\n",
+    "    def __init__(self, dim_hidden, kernel_size,num_classes):\n",
+    "        super(ConvNN, self).__init__()\n",
+    "        # Define the layers\n",
+    "        self.conv1 = nn.Conv1d(1,dim_hidden,kernel_size)  # First convolution layer\n",
+    "        self.conv2 = nn.Conv1d(dim_hidden,dim_hidden,kernel_size) # second convolution layer\n",
+    "\n",
+    "        self.fc1 = nn.Linear(dim_hidden,dim_hidden)\n",
+    "        self.fc2 = nn.Linear(dim_hidden,num_classes)\n",
+    "        # self.softmax = nn.Softmax(dim=1)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = x['data']\n",
+    "        x = torch.unsqueeze(x,1).float() # add a single channel index\n",
+    "\n",
+    "        # Forward pass through the network\n",
+    "        x = F.relu(self.conv1(x))  # Activation function between layers\n",
+    "        \n",
+    "        x = F.relu(self.conv2(x))\n",
+    "\n",
+    "        global_max_pool = nn.MaxPool1d(kernel_size=x.size()[2])  # This takes the size of the third dimension\n",
+    "        x = global_max_pool(x).squeeze(2)\n",
+    "\n",
+    "        x = F.relu(self.fc1(x))\n",
+    "        x = self.fc2(x)\n",
+    "        \n",
+    "        return x\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
-   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
+   "execution_count": 38,
+   "id": "14013b2d-5847-4e1a-800e-edd273d8d791",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'label': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n",
+       " 'coords': tensor([[ 0., 28., 18.],\n",
+       "         [ 0., 29., 48.],\n",
+       "         [ 0., 27., 25.],\n",
+       "         [ 0., 32., 17.],\n",
+       "         [ 0.,  8., 36.],\n",
+       "         [ 0., 19., 35.],\n",
+       "         [ 0., 33., 45.],\n",
+       "         [ 0.,  7., 25.],\n",
+       "         [ 0.,  6.,  5.],\n",
+       "         [ 0., 36., 35.]], dtype=torch.float64),\n",
+       " 'data': tensor([[-0.4918, -0.5943, -1.0721, -0.9575, -0.6650, -0.7359],\n",
+       "         [-0.6024, -1.1120, -0.5868,  0.0182,  0.7436, -0.2009],\n",
+       "         [-0.8743, -0.2060, -1.3125, -0.3913, -0.3318, -0.1418],\n",
+       "         [ 0.3684, -0.0516, -0.7292, -1.1248, -0.7590, -0.5693],\n",
+       "         [-0.7428, -0.7065, -1.0986, -0.8626, -1.0908, -1.0204],\n",
+       "         [ 0.0483, -0.7283,  1.1701, -0.0736, -1.2278, -0.2546],\n",
+       "         [-0.3632, -1.0483,  1.1965, -0.5309, -1.1567,  1.5961],\n",
+       "         [-1.2088, -0.7159, -0.7503, -0.7777, -0.2693, -0.7245],\n",
+       "         [-0.9576, -0.6151,  0.5618,  1.8565,  3.3299,  2.6075],\n",
+       "         [-0.3988, -0.2353,  0.0685, -1.2082, -0.7855, -1.1990]],\n",
+       "        dtype=torch.float64)}"
+      ]
+     },
+     "execution_count": 38,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "inps"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "id": "158d7836-db5c-4210-9814-43806dd777ad",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([153300, 2])"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "torch.cat(outs,dim = 0).shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "id": "68243435-58a8-4717-ae96-bd281fbd64c5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = SpectralAttentionNet(len(kinds),16,2)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "id": "0dde6efa-3ce3-4f89-abc6-5893e066f9dc",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[-0.6669,  0.0875],\n",
+       "        [-0.7097,  0.0436],\n",
+       "        [-0.6941,  0.0615],\n",
+       "        [-0.6393,  0.1075],\n",
+       "        [-0.7090,  0.0438],\n",
+       "        [-0.7054,  0.0472],\n",
+       "        [-0.7099,  0.0442],\n",
+       "        [-0.7042,  0.0485],\n",
+       "        [-0.5686,  0.1150],\n",
+       "        [-0.7015,  0.0549]], grad_fn=<AddmmBackward0>)"
+      ]
+     },
+     "execution_count": 25,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "model(inps)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "id": "45e4cc12-5ef6-40ad-ad9e-45988ac7dbc1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "\n",
+    "\n",
+    "    "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "id": "81dd05f3-bee8-43a4-8c51-f92e023bae25",
    "metadata": {},
    "outputs": [
     {
      "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>label</th>\n",
+       "      <th>h_idx</th>\n",
+       "      <th>nslice</th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>...</th>\n",
+       "      <th>31</th>\n",
+       "      <th>32</th>\n",
+       "      <th>33</th>\n",
+       "      <th>34</th>\n",
+       "      <th>35</th>\n",
+       "      <th>36</th>\n",
+       "      <th>37</th>\n",
+       "      <th>38</th>\n",
+       "      <th>39</th>\n",
+       "      <th>40</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0.001812</td>\n",
+       "      <td>0.002843</td>\n",
+       "      <td>0.001445</td>\n",
+       "      <td>0.003165</td>\n",
+       "      <td>0.002113</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.016286</td>\n",
+       "      <td>0.019752</td>\n",
+       "      <td>0.027634</td>\n",
+       "      <td>0.039219</td>\n",
+       "      <td>0.053746</td>\n",
+       "      <td>0.070735</td>\n",
+       "      <td>0.089852</td>\n",
+       "      <td>0.110827</td>\n",
+       "      <td>0.133419</td>\n",
+       "      <td>0.157407</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>1 rows × 44 columns</p>\n",
+       "</div>"
+      ],
       "text/plain": [
-       "array([[ 0.,  1.,  1.],\n",
-       "       [ 0.,  2.,  1.],\n",
-       "       [ 0.,  3.,  1.],\n",
-       "       ...,\n",
-       "       [ 0., 31., 41.],\n",
-       "       [ 0., 32., 41.],\n",
-       "       [ 0., 33., 41.]])"
+       "   label  h_idx  nslice  0  1         2         3         4         5  \\\n",
+       "4      0      0       0  2  2  0.001812  0.002843  0.001445  0.003165   \n",
+       "\n",
+       "          6  ...        31        32        33        34        35        36  \\\n",
+       "4  0.002113  ...  0.016286  0.019752  0.027634  0.039219  0.053746  0.070735   \n",
+       "\n",
+       "         37        38        39        40  \n",
+       "4  0.089852  0.110827  0.133419  0.157407  \n",
+       "\n",
+       "[1 rows x 44 columns]"
       ]
      },
-     "execution_count": 15,
+     "execution_count": 18,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "dat.coords"
+    "# imagemask = (df['h_idx'] == 0)\n",
+    "# coordmask = ((df[0] == 1) and (df[1] == 1))\n",
+    "df[(df['h_idx'] == 0) & ((df[0] == 2) & (df[1] == 2))]"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "52ef379d-ba80-4851-96d7-d9d6ba474406",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "18686a3f-9652-4889-916e-8e70459381b4",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "78b89c6b-8a3b-45e7-99a8-b00cfac50d49",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "fd0a8ff8-df49-4b44-884f-588be5bc2d3c",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "code",
    "execution_count": 6,
@@ -140,25 +453,6 @@
     "np.bincount(loaddat[0]['train'].dataset.all_labels)"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<generator object Module.parameters at 0x3007207b0>"
-      ]
-     },
-     "execution_count": 13,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": []
-  },
   {
    "cell_type": "code",
    "execution_count": null,
diff --git a/todo.txt b/todo.txt
index 0fd9ad1..b151bc9 100644
--- a/todo.txt
+++ b/todo.txt
@@ -1,10 +1,7 @@
 To Do on modeling:
 
-- write results to file with deepdish, then read them to compare models
+- Try new padding scheme
 
-- get code working with a subset of kvals
-
-- get Conv1d working as an architecture
-
-- consider patch-attention based strategy
+- Test and fit selected models more completely
 
+- Extract model predictions for ROC etc from visual models
diff --git a/train.py b/train.py
index baee91a..173fd1e 100644
--- a/train.py
+++ b/train.py
@@ -36,22 +36,22 @@ torch.manual_seed(0)
 
 
 # Job config
-flags.DEFINE_string('data_config', 'penn_dataset.py',
+flags.DEFINE_string('data_config', 'data_configs/penn_dataset.py',
 					'Path to a data config file.')
-flags.DEFINE_string('model_config', 'basic_feedforward.py',
+flags.DEFINE_string('model_config', 'model_configs/convNet.py',
 					'Path to a model config file.')
 flags.DEFINE_string('results_dir', 'checkpoints',
 					'Top directory for all experimental results.')
-flags.DEFINE_string('model_name', 'gpt-FCNN',
+flags.DEFINE_string('model_name', 'conv1d',
 					'shorthand name for model.')
-flags.DEFINE_string('run_name', 'hyperparam_testing',
+flags.DEFINE_string('run_name', 'demo',
 					'Name of this job and name of results folder.')
 flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
 
 # Logging config
 flags.DEFINE_integer('report_loss_every', 50,
 					 'Number of iterations between reporting minibatch loss.')
-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
+flags.DEFINE_integer('train_epochs', 50, 'Maximum number of training epochs.')
 flags.DEFINE_integer(
 	"save_check_points",
 	50,
@@ -81,13 +81,15 @@ flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
 flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
 
 # Specific config options
-flags.DEFINE_integer("input_size",39,"Input shape to model")
+# flags.DEFINE_integer("input_size",39,"Input shape to model")
 
 #########################################################################################
 
 def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
 	# this function does not account for class weights when evaluating cross-entropy loss.
 	# however, they are accounted for when evaluating training loss
+
+	# MODIFY THIS FUNCTION TO ACCOUNT FOR COORDINATES BEING INCLUDED
 	reports = None
 	for data in loader:
 		labels = data['label']
@@ -96,8 +98,10 @@ def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEn
 		labels_tensor = torch.zeros((len(labels), 2))
 		for i, label in enumerate(labels):
 			labels_tensor[i, label] = 1
+		labels_tensor = labels_tensor.to(device)
 
-		model_output = model(inputs) # evaluate model
+		model = model.to(device)
+		model_output = model(data) # evaluate model
 
 		loss = loss_func(model_output, labels_tensor) # compute loss
 		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
@@ -134,7 +138,17 @@ def main():
 
 	# Load data
 	data_name = "penn_data"
-	kfold_loaders = fet.load(config.data_config, config)
+	kfold_loaders,L_inds = fet.load(config.data_config, config)
+
+	if L_inds == None: # in this case we train on all wavelengths
+		Ldata_size = 39
+	else:
+		Ldata_size = len(L_inds)
+
+	config.input_size = Ldata_size
+
+	#############################################################
+	# ENVIRONMENT/DIRECTORY MANAGEMENT
 
 	# Prepare environment
 	params_in_run_name = [
@@ -178,11 +192,30 @@ def main():
 	n_folds = len(kfold_loaders)
 	print("Doing {}-fold cross-validation.".format(n_folds))
 
-	# KFOLD TRAINING LOOP
+	#############################################################
+	# ENVIRONMENT/DIRECTORY MANAGEMENT
+	# (KFOLD TRAINING LOOP)
 	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
 
 		print("Training fold {}...".format(k+1))
 
+		# create folder for this data split
+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
+		fold_dir_exists = osp.exists(fold_dir)
+		if not fold_dir_exists:
+			if config.resume:
+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
+			else:
+				os.makedirs(fold_dir)
+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
+
+		# keep track of which data is test data for a given Kfold data split
+		test_headings = loader_k['test_headings']
+		headingsFile = osp.join(fold_dir,"test_headings.txt")
+		with open(headingsFile,'w') as headfile:
+			for heading in test_headings:
+				headfile.write(heading+'\n')
+
 		# Load model
 		model,model_name = fet.load(config.model_config, config)
 		model = model.to(device)
@@ -221,24 +254,9 @@ def main():
 		train_total_counts = sum(train_class_counts)
 		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
 
-		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-				
-		# create folder for this data split
-		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-		fold_dir_exists = osp.exists(fold_dir)
-		if not fold_dir_exists:
-			if config.resume:
-				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-			else:
-				os.makedirs(fold_dir)
-		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
+		class_weight = nested_to(class_weight,device,torch.float32)
 
-		# keep track of which data is test data for a given Kfold data split
-		test_headings = loader_k['test_headings']
-		headingsFile = osp.join(fold_dir,"test_headings.txt")
-		with open(headingsFile,'w') as headfile:
-			for heading in test_headings:
-				headfile.write(heading+'\n')
+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
 
 		# print(checkpoint_name)
 
@@ -293,7 +311,9 @@ def main():
 				for i, label in enumerate(labels):
 					labels_tensor[i, label] = 1
 
-				model_output = model(data) # evaluate model
+				labels_tensor = labels_tensor.to(device)
+
+				model_output = model(data_dict) # evaluate model
 
 				loss = loss_func(model_output, labels_tensor) # compute loss
 				runsum += loss.item() # track loss
