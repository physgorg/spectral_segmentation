Thu Mar 7 14:36:49 PST 2024
diff --git a/.DS_Store b/.DS_Store
index bf7630a..645de9d 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/.ipynb_checkpoints/analyze_models-checkpoint.ipynb b/.ipynb_checkpoints/analyze_models-checkpoint.ipynb
index a605da2..f5b5df8 100644
--- a/.ipynb_checkpoints/analyze_models-checkpoint.ipynb
+++ b/.ipynb_checkpoints/analyze_models-checkpoint.ipynb
@@ -9,7 +9,7 @@
    "source": [
     "import numpy as np\n",
     "import matplotlib.pyplot as plt\n",
-    "\n",
+    "from os import path as osp\n",
     "import eval_tools as eval"
    ]
   },
@@ -25,64 +25,96 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Getting metrics from checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1\n",
-      "Loading 'basic_feedforward' from checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py\n",
-      "Loading 'penn_dataset' from checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py\n",
-      "Data is 1-fold partitioned.\n",
-      "Evaluating fold 1...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Models evaluated. Computing metrics...\n",
-      "Done.\n"
+      "Getting metrics from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_/1\n",
+      "Found info file, reading from from file.\n"
      ]
-    },
+    }
+   ],
+   "source": [
+    "general_dir = 'checkpoints/penn_data'\n",
+    "run_name = 'gpt-FCNN/hyperparam_testing'\n",
+    "specific_run = \"bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs50_nrep1_\"\n",
+    "runDir = osp.join(general_dir,run_name,specific_run)\n",
+    "info = eval.get_metrics(runDir,n_thresholds = 1000,nonlin_thresholds = False)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "ff0548de-9fd3-4b6b-b015-d43325c2c3f6",
+   "metadata": {},
+   "source": [
+    "#### Plot training loss"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
+   "metadata": {},
+   "outputs": [
     {
      "data": {
+      "image/png": "",
       "text/plain": [
-       "AttrDict({'batch_size': 100, 'beta1': 0.9, 'beta2': 0.999, 'cross_validate': False, 'data_config': 'penn_dataset.py', 'git_commit': '7416bf730b356aabfe0df644240e40948a8196bb', 'include_coords': False, 'input_size': 39, 'learning_rate': 0.001, 'log_train_values': True, 'log_val_test': True, 'model_config': 'basic_feedforward.py', 'n_repeats': 1, 'report_loss_every': 50, 'rescale': True, 'results_dir': 'checkpoints', 'resume': False, 'run_name': 'plotting', 'save_check_points': 50, 'save_test_predictions': False, 'split_seed': 1, 'total_evaluations': 100, 'train_epochs': 100, 'train_split': 0.8, 'use_mps': False})"
+       "<Figure size 640x480 with 1 Axes>"
       ]
      },
-     "execution_count": 3,
      "metadata": {},
-     "output_type": "execute_result"
+     "output_type": "display_data"
     }
    ],
    "source": [
-    "runDir = 'checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_'\n",
-    "info = eval.get_metrics(runDir,n_thresholds = 10000)"
+    "eval.plot_train_loss(info)"
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": 9,
-   "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
+   "cell_type": "markdown",
+   "id": "2b7375f8-5b21-45f4-a5c1-45ba2218330a",
    "metadata": {},
+   "source": [
+    "#### Plot test loss vs. train time"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "id": "ac815258-7141-4e1c-8ea8-b6598aa6dd27",
+   "metadata": {
+    "scrolled": true
+   },
    "outputs": [
     {
      "data": {
+      "image/png": "",
       "text/plain": [
-       "dict_keys(['thresholds', 'config', 'params', 'test_time', 'test_loss', 'train_acc', 'train_prec', 'train_tpr', 'train_fpr', 'train_F1', 'test_acc', 'test_prec', 'test_tpr', 'test_fpr', 'test_F1', 'val_acc', 'val_prec', 'val_tpr', 'val_fpr', 'val_F1'])"
+       "<Figure size 640x480 with 1 Axes>"
       ]
      },
-     "execution_count": 9,
      "metadata": {},
-     "output_type": "execute_result"
+     "output_type": "display_data"
     }
    ],
    "source": [
-    "info.keys()"
+    "eval.plot_test_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c5e82793-656c-492a-9a1b-b422b8c1af0f",
+   "metadata": {},
+   "source": [
+    "#### Plot train vs. test loss"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
-   "id": "ac815258-7141-4e1c-8ea8-b6598aa6dd27",
+   "execution_count": 6,
+   "id": "cdfb8940-95f8-4926-af92-054760b8a7f0",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -92,29 +124,26 @@
     }
    ],
    "source": [
-    "# # PLOT TEST LOSS VS TIME\n",
-    "# def plot_loss(run_info,**kwargs):\n",
-    "#     times = run_info['test_time']\n",
-    "#     losses = run_info['test_loss']\n",
-    "#     for k in range(len(times)):\n",
-    "#         plt.plot(times[k],losses[k],label = 'fold {} loss'.format(k+1))\n",
-    "#     plt.xlabel(\"training time\")\n",
-    "#     plt.ylabel(\"test loss\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
-    "eval.plot_loss(info)"
+    "eval.plot_train_test_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "5e5db2e0-29bc-4837-b78c-c6a255b89e0b",
+   "metadata": {},
+   "source": [
+    "#### Plot accuracy vs. positive threshold"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 7,
    "id": "edb8dbe5-1fe6-4dc3-9aa2-39f44d7939ab",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -124,59 +153,56 @@
     }
    ],
    "source": [
-    "# # PLOT ACCURACY VS THRESHOLD\n",
-    "# def plot_accuracy(run_info,**kwargs):\n",
-    "#     ts = run_info['thresholds']\n",
-    "#     subsets = ['train','test','val']\n",
-    "#     for subset in subsets:\n",
-    "#         accs = run_info[subset+'_acc']\n",
-    "#         plt.plot(ts,accs,label = subset,**kwargs)\n",
-    "#     plt.xlabel(\"classification threshold\")\n",
-    "#     plt.ylabel(\"accuracy\")\n",
-    "#     plt.title(\"Classifier accuracy vs. threshold\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_accuracy(info)"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "6403e0db-877e-4e0e-b3b3-af74a2130d8e",
+   "metadata": {},
+   "source": [
+    "#### Plot F1 score vs. positive threshold"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 8,
    "id": "a2782025-287b-4e3e-8e49-8d3a487554cb",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
      },
      "metadata": {},
      "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "F1 score maximized at threshold 0.613\n"
+     ]
     }
    ],
    "source": [
-    "# PLOT F1 SCORE VS THRESHOLD\n",
-    "# def plot_F1(run_info,**kwargs):\n",
-    "#     ts = run_info['thresholds']\n",
-    "#     subsets = ['test']\n",
-    "#     for subset in subsets:\n",
-    "#         accs = run_info[subset+'_F1']\n",
-    "#         plt.plot(ts,accs,label = subset,**kwargs)\n",
-    "#     plt.xlabel(\"classification threshold\")\n",
-    "#     plt.ylabel(\"F1 Score\")\n",
-    "#     plt.title(\"F1 score vs. threshold\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_F1(info)"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "72f828e8-8674-4abb-8263-72b649500628",
+   "metadata": {},
+   "source": [
+    "####  Plot ROC curves"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 9,
    "id": "b5644cf6-3b0f-4ff6-abe4-60dd790fa337",
    "metadata": {
     "scrolled": true
@@ -184,7 +210,7 @@
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -194,34 +220,26 @@
     }
    ],
    "source": [
-    "# PLOT ROC CURVES\n",
-    "# def plot_ROC(run_info,**kwargs):\n",
-    "#     subsets = ['train','test','val']\n",
-    "#     for subset in subsets:\n",
-    "#         tprs = np.append(run_info[subset+'_tpr'][::-1],1)\n",
-    "#         fprs = np.append(run_info[subset+'_fpr'][::-1],1)\n",
-    "#         auc = np.trapz(tprs,fprs)\n",
-    "#         plt.plot(fprs,tprs,label = subset + \"; AUC = {}\".format(auc),**kwargs)\n",
-    "#     line = np.linspace(0,1,100)\n",
-    "#     plt.plot(line,line,'k--')\n",
-    "#     plt.xlabel(\"False positive rate\")\n",
-    "#     plt.ylabel(\"True positive rate\")\n",
-    "#     plt.title(\"ROC Curves; in/out of sample\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_ROC(info)"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "7cffb073-6d1d-4ba1-908c-ac1e8c3e63f0",
+   "metadata": {},
+   "source": [
+    "#### Plot PR curves"
+   ]
+  },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 10,
    "id": "0668184c-cd7c-4349-aee3-7397605c62b9",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -231,21 +249,16 @@
     }
    ],
    "source": [
-    "# PLOT PR CURVES\n",
-    "# def plot_PR(run_info,**kwargs):\n",
-    "#     subsets = ['test','val']\n",
-    "#     for subset in subsets:\n",
-    "#         precs = run_info[subset+'_prec'][::-1]\n",
-    "#         recs = run_info[subset+'_tpr'][::-1]\n",
-    "#         plt.plot(recs,precs,label = subset,**kwargs)\n",
-    "#     plt.xlabel(\"Recall\")\n",
-    "#     plt.ylabel(\"Precision\")\n",
-    "#     plt.title(\"PR Curves; out of sample\")\n",
-    "#     plt.legend()\n",
-    "#     plt.show()\n",
-    "\n",
     "eval.plot_PR(info)"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "907da525-c829-4e2a-ab1f-69090dcb2789",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
diff --git a/.ipynb_checkpoints/testing-checkpoint.ipynb b/.ipynb_checkpoints/testing-checkpoint.ipynb
index 8242b04..f789c23 100644
--- a/.ipynb_checkpoints/testing-checkpoint.ipynb
+++ b/.ipynb_checkpoints/testing-checkpoint.ipynb
@@ -2,161 +2,449 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 37,
+   "execution_count": 1,
    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
    "metadata": {},
    "outputs": [],
    "source": [
     "import torch\n",
+    "import torch.nn as nn\n",
+    "import torch.nn.functional as F\n",
     "import numpy as np\n",
     "from sklearn.model_selection import RepeatedKFold\n",
     "import pandas as pd\n",
-    "from torch.utils.data import Dataset, DataLoader\n",
+    "from torch.utils.data import Dataset, DataLoader, Sampler\n",
     "\n",
     "import matplotlib.pyplot as plt\n",
-    "from os import path as osp"
+    "from os import path as osp\n",
+    "\n",
+    "import forge\n",
+    "from forge import flags\n",
+    "import forge.experiment_tools as fet\n",
+    "\n",
+    "from penn_dataset import PennData,headingSampler"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
-   "id": "e1759421-97cf-4ca4-90cf-5509eb48455e",
+   "execution_count": 42,
+   "id": "92bae5ef-5c95-4528-a76d-003bbe09786c",
    "metadata": {},
    "outputs": [],
    "source": [
-    "data_dir = './penn_data'\n",
-    "headings = ['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'];\n",
-    "\n",
-    "all_ind = np.arange(len(headings))\n",
-    "train_split = 0.8\n",
-    "\n",
-    "kf = RepeatedKFold(n_splits = int(len(headings)/((1-train_split)*len(headings))), n_repeats = 3, random_state = 1)\n",
-    "\n",
-    "# for i, (train_ind, test_ind) in enumerate(kf.split(headings)):\n",
-    "    "
+    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n",
+    "kinds = None\n",
+    "dat = PennData('./penn_data',headings,include_coords = False,k_inds = kinds)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
-   "id": "432286fa-8df2-4e66-aa06-0a8a9170dedc",
+   "execution_count": 53,
+   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([10, 1, 39])"
+      ]
+     },
+     "execution_count": 53,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-    "# for i, (train_ind, test_ind) in enumerate(kf.split(headings)):\n",
-    "#     # Import training data\n",
-    "#     # Import spectra\n",
-    "#     df_list = []\n",
-    "#     for ind in train_ind:\n",
-    "#         df_temp = pd.read_csv('./penn_data/kvals_fuse_rotate_'+headings[ind]+'.csv',header=None)\n",
-    "#         df_list.append(df_temp)\n",
-    "#     df = pd.concat(df_list, ignore_index=True)\n",
-    "#     df_std = df.std();\n",
-    "#     df_mean = df.mean();\n",
-    "#     df = (df - df_mean)/df_std\n",
-    "#     # df"
+    "df,bounds = pad_dataframe(dat.df)\n",
+    "loader = DataLoader(dat,batch_size = 10,sampler = None)\n",
+    "example = next(iter(loader))\n",
+    "xx = torch.unsqueeze(example['data'].float(),1)\n",
+    "s = xx.shape\n",
+    "s"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 93,
-   "id": "2f94c062-2423-41f1-bf7c-dbc10f8b058a",
+   "execution_count": 60,
+   "id": "c15fbcaf-a7cd-4b52-9b94-81b3b16dee64",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([10, 16, 37])"
+      ]
+     },
+     "execution_count": 60,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m = nn.Conv1d(s[1],16,3)\n",
+    "m(xx).shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 34,
+   "id": "94bb950c-609a-44f2-a6f4-5d50f944cd90",
    "metadata": {},
    "outputs": [],
    "source": [
-    "class PennData(Dataset):\n",
-    "\n",
-    "    def __init__(self,path_to_data,headings,kinds,spectra_prefix = \"kvals_fuse_rotate_\",label_prefix = 'labels_fuse_rotate_'):\n",
-    "        self.data_dir = path_to_data\n",
-    "\n",
-    "        self.headings = headings\n",
-    "\n",
-    "        df_list = []\n",
-    "        label_list = []\n",
-    "        for heading in self.headings: # for each datafile heading,\n",
-    "            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv')\n",
-    "            print(data_name)\n",
-    "            df_temp = pd.read_csv(data_name,header=None)\n",
-    "            df_list.append(df_temp)\n",
-    "\n",
-    "            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv')\n",
-    "            label_temp = pd.read_csv(label_name,header=None, names=['label'])\n",
-    "            label_list.append(label_temp)\n",
-    "\n",
-    "        df = pd.concat(df_list, ignore_index=True)\n",
-    "        df_std = df.std();\n",
-    "        df_mean = df.mean();\n",
-    "        df = (df - df_mean)/df_std\n",
-    "\n",
-    "        labels = pd.concat(label_list, ignore_index=True)\n",
-    "        # Append labels to data, and scramble rows\n",
-    "        df = pd.concat([labels, df], axis=\"columns\")\n",
+    "class ConvNN(nn.Module):\n",
+    "    def __init__(self, input_size, dim_hidden, kernel_size,num_classes):\n",
+    "        super(ConvNN, self).__init__()\n",
+    "        # Define the layers\n",
+    "        self.conv1 = nn.Conv1d(input_size,dim_hidden,kernel_size)  # First convolution layer\n",
+    "        self.conv2 = nn.Conv1d(dim_hidden,dim_hidden,kernel_size) # second convolution layer\n",
+    "        \n",
+    "        self.pool1 = nn.MaxPool1d(kernel_size,stride = 2)\n",
+    "        # self.softmax = nn.Softmax(dim=1)\n",
     "\n",
-    "        self.alldata = df\n",
+    "    def forward(self, x):\n",
+    "    \tx = x['data']\n",
+    "    \tx = torch.unsqueeze(x,1) # add a single channel index\n",
     "\n",
+    "        # Forward pass through the network\n",
+    "        x = F.relu(self.conv1(x))  # Activation function between layers\n",
     "        \n",
+    "        x = F.relu(self.conv2(x))\n",
     "\n",
-    "        def __len__(self):\n",
-    "            return len(self.alldata)\n",
+    "        x = self.pool1(x)\n",
+    "        return x\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 38,
+   "id": "14013b2d-5847-4e1a-800e-edd273d8d791",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'label': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n",
+       " 'coords': tensor([[ 0., 28., 18.],\n",
+       "         [ 0., 29., 48.],\n",
+       "         [ 0., 27., 25.],\n",
+       "         [ 0., 32., 17.],\n",
+       "         [ 0.,  8., 36.],\n",
+       "         [ 0., 19., 35.],\n",
+       "         [ 0., 33., 45.],\n",
+       "         [ 0.,  7., 25.],\n",
+       "         [ 0.,  6.,  5.],\n",
+       "         [ 0., 36., 35.]], dtype=torch.float64),\n",
+       " 'data': tensor([[-0.4918, -0.5943, -1.0721, -0.9575, -0.6650, -0.7359],\n",
+       "         [-0.6024, -1.1120, -0.5868,  0.0182,  0.7436, -0.2009],\n",
+       "         [-0.8743, -0.2060, -1.3125, -0.3913, -0.3318, -0.1418],\n",
+       "         [ 0.3684, -0.0516, -0.7292, -1.1248, -0.7590, -0.5693],\n",
+       "         [-0.7428, -0.7065, -1.0986, -0.8626, -1.0908, -1.0204],\n",
+       "         [ 0.0483, -0.7283,  1.1701, -0.0736, -1.2278, -0.2546],\n",
+       "         [-0.3632, -1.0483,  1.1965, -0.5309, -1.1567,  1.5961],\n",
+       "         [-1.2088, -0.7159, -0.7503, -0.7777, -0.2693, -0.7245],\n",
+       "         [-0.9576, -0.6151,  0.5618,  1.8565,  3.3299,  2.6075],\n",
+       "         [-0.3988, -0.2353,  0.0685, -1.2082, -0.7855, -1.1990]],\n",
+       "        dtype=torch.float64)}"
+      ]
+     },
+     "execution_count": 38,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "inps"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "id": "158d7836-db5c-4210-9814-43806dd777ad",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([153300, 2])"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "torch.cat(outs,dim = 0).shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "id": "68243435-58a8-4717-ae96-bd281fbd64c5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = SpectralAttentionNet(len(kinds),16,2)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "id": "0dde6efa-3ce3-4f89-abc6-5893e066f9dc",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[-0.6669,  0.0875],\n",
+       "        [-0.7097,  0.0436],\n",
+       "        [-0.6941,  0.0615],\n",
+       "        [-0.6393,  0.1075],\n",
+       "        [-0.7090,  0.0438],\n",
+       "        [-0.7054,  0.0472],\n",
+       "        [-0.7099,  0.0442],\n",
+       "        [-0.7042,  0.0485],\n",
+       "        [-0.5686,  0.1150],\n",
+       "        [-0.7015,  0.0549]], grad_fn=<AddmmBackward0>)"
+      ]
+     },
+     "execution_count": 25,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "model(inps)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "id": "45e4cc12-5ef6-40ad-ad9e-45988ac7dbc1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
     "\n",
-    "        \n",
     "\n",
-    "    \n",
-    "        \n",
-    "        "
+    "    "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "id": "81dd05f3-bee8-43a4-8c51-f92e023bae25",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>label</th>\n",
+       "      <th>h_idx</th>\n",
+       "      <th>nslice</th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>...</th>\n",
+       "      <th>31</th>\n",
+       "      <th>32</th>\n",
+       "      <th>33</th>\n",
+       "      <th>34</th>\n",
+       "      <th>35</th>\n",
+       "      <th>36</th>\n",
+       "      <th>37</th>\n",
+       "      <th>38</th>\n",
+       "      <th>39</th>\n",
+       "      <th>40</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0.001812</td>\n",
+       "      <td>0.002843</td>\n",
+       "      <td>0.001445</td>\n",
+       "      <td>0.003165</td>\n",
+       "      <td>0.002113</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.016286</td>\n",
+       "      <td>0.019752</td>\n",
+       "      <td>0.027634</td>\n",
+       "      <td>0.039219</td>\n",
+       "      <td>0.053746</td>\n",
+       "      <td>0.070735</td>\n",
+       "      <td>0.089852</td>\n",
+       "      <td>0.110827</td>\n",
+       "      <td>0.133419</td>\n",
+       "      <td>0.157407</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>1 rows × 44 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "   label  h_idx  nslice  0  1         2         3         4         5  \\\n",
+       "4      0      0       0  2  2  0.001812  0.002843  0.001445  0.003165   \n",
+       "\n",
+       "          6  ...        31        32        33        34        35        36  \\\n",
+       "4  0.002113  ...  0.016286  0.019752  0.027634  0.039219  0.053746  0.070735   \n",
+       "\n",
+       "         37        38        39        40  \n",
+       "4  0.089852  0.110827  0.133419  0.157407  \n",
+       "\n",
+       "[1 rows x 44 columns]"
+      ]
+     },
+     "execution_count": 18,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# imagemask = (df['h_idx'] == 0)\n",
+    "# coordmask = ((df[0] == 1) and (df[1] == 1))\n",
+    "df[(df['h_idx'] == 0) & ((df[0] == 2) & (df[1] == 2))]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "52ef379d-ba80-4851-96d7-d9d6ba474406",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "18686a3f-9652-4889-916e-8e70459381b4",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "78b89c6b-8a3b-45e7-99a8-b00cfac50d49",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "fd0a8ff8-df49-4b44-884f-588be5bc2d3c",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
+    "flags.DEFINE_st\n",
+    "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Loading 'penn_dataset' from penn_dataset.py\n"
+     ]
+    }
+   ],
+   "source": [
+    "config = forge.config()\n",
+    "loaddat = fet.load(\"penn_dataset.py\",config) # loaddat[fold][train/test][batch][data]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 104,
-   "id": "3223f768-c908-4065-b93e-27326369b028",
+   "execution_count": 5,
+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "./penn_data/kvals_fuse_rotate_aaa0060.csv\n",
-      "./penn_data/kvals_fuse_rotate_aaa0061.csv\n",
-      "./penn_data/kvals_fuse_rotate_aaa0063.csv\n"
+      "Loading 'basic_feedforward' from basic_feedforward.py\n"
      ]
     }
    ],
    "source": [
-    "penn = PennData(data_dir,headings[2:5])"
+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 106,
-   "id": "3bc22e44-c11e-4a45-abfc-1408e9b5beb6",
+   "execution_count": 13,
+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "24385"
+       "array([114170,    904])"
       ]
      },
-     "execution_count": 106,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "testdat = penn.alldata\n",
-    "len(testdat)"
+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "51f7cd80-7ba7-4782-ad50-778ac7a4bfa0",
+   "id": "c5365067-c017-41b4-9b6b-3752b3d100e8",
    "metadata": {},
    "outputs": [],
-   "source": [
-    "poslocs"
-   ]
+   "source": []
   },
   {
    "cell_type": "code",
diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
index 4a02232..061db43 100644
Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
diff --git a/__pycache__/eval_tools.cpython-39.pyc b/__pycache__/eval_tools.cpython-39.pyc
index cbe6232..2a16fe3 100644
Binary files a/__pycache__/eval_tools.cpython-39.pyc and b/__pycache__/eval_tools.cpython-39.pyc differ
diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
index ea4dbe7..4251292 100644
Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
diff --git a/analyze_models.ipynb b/analyze_models.ipynb
index e7c8b8b..e6a1a80 100644
--- a/analyze_models.ipynb
+++ b/analyze_models.ipynb
@@ -16,243 +16,6 @@
   {
    "cell_type": "code",
    "execution_count": 2,
-   "id": "53e1a620-38c0-45ed-aebc-5b35dfdd390c",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import torch\n",
-    "import numpy as np\n",
-    "import json\n",
-    "import torch.nn.functional as F\n",
-    "import deepdish as dd\n",
-    "\n",
-    "import torchmetrics\n",
-    "from torchmetrics.classification import BinaryConfusionMatrix\n",
-    "\n",
-    "import matplotlib.pyplot as plt\n",
-    "from os import path as osp\n",
-    "import os\n",
-    "import re\n",
-    "import h5py\n",
-    "\n",
-    "import forge\n",
-    "from forge import flags\n",
-    "import forge.experiment_tools as fet\n",
-    "from forge import load_from_checkpoint\n",
-    "from attrdict import AttrDict\n",
-    "\n",
-    "from train_tools import param_count,nested_to\n",
-    "from scipy.interpolate import interp1d"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "33eab461-6ffd-465d-8004-048197bf8a96",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_acc(arr): # get accuracy of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[1,1] + x[0,0])/(x[0,0] + x[0,1] + x[1,0] + x[1,1]) if (x[0,0] + x[0,1] + x[1,0] + x[1,1]) else 0 for x in arr])\n",
-    "\n",
-    "def get_prec(arr): # get precision of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[1,1])/(x[1,1] + x[0,1]) if (x[1,1] + x[0,1]) > 0 else 0 for x in arr])\n",
-    "\n",
-    "def get_tpr(arr): # get true positive rate/recall of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[1,1])/(x[1,1] + x[1,0]) if (x[1,1] + x[1,0]) > 0 else 0 for x in arr])\n",
-    "\n",
-    "def get_fpr(arr): # get false positive rate of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([(x[0,1])/(x[0,1] + x[0,0]) if (x[0,1] + x[0,0]) > 0 else 0 for x in arr])\n",
-    "\n",
-    "def get_F1(arr): # get F1-score of set of confusion matrices\n",
-    "    # arr.shape (n_thresholds,2,2)\n",
-    "    return np.array([2*x[1,1]/(2*x[1,1] + x[0,1] + x[1,0]) if (2*x[1,1] + x[0,1] + x[1,0]) > 0 else 0 for x in arr])\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 12,
-   "id": "e0dfe2b8-8b27-4bdd-a2d4-8d432ca3cdea",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,nonlin_thresholds = False):\n",
-    "    # run directory should contain folders 1,2,3... \n",
-    "    if nonlin_thresholds:\n",
-    "        num_elements = n_thresholds\n",
-    "\n",
-    "        # Create a non-linear space with more density at lower values\n",
-    "        # Using exponential space for higher resolution at smaller thresholds\n",
-    "        # Adjust the base of the exponential to control the distribution\n",
-    "        non_linear_part = np.exp(np.linspace(-np.log(1000), 0, num_elements // 2))\n",
-    "        \n",
-    "        # Create a linear space for the higher thresholds\n",
-    "        linear_part = np.linspace(0, 1, num_elements // 2)\n",
-    "        \n",
-    "        # Combine both parts\n",
-    "        thresholds = np.unique(np.concatenate([non_linear_part, linear_part]))\n",
-    "        \n",
-    "        # Ensure the thresholds are sorted (necessary if combining different spaces)\n",
-    "        thresholds.sort()\n",
-    "    else:\n",
-    "        thresholds = np.linspace(1e-8,1,n_thresholds)\n",
-    "    BCM = BinaryConfusionMatrix()\n",
-    "    ###########\n",
-    "    # Note: BCM = [[TN,FP],[FN,TP]] \n",
-    "    \n",
-    "    if checkpoint_num is None: # if None, get most recent directory\n",
-    "        checkpoint_num = max([int(x) for x in os.listdir(run_dir) if osp.isdir(os.path.join(run_dir, x))])\n",
-    "\n",
-    "    working_dir = osp.join(run_dir,str(checkpoint_num))\n",
-    "    print(\"Getting metrics from\",working_dir)\n",
-    "    flag_file = osp.join(working_dir,'flags.json')\n",
-    "    with open(flag_file, 'r') as file:\n",
-    "        flag_info = json.load(file)\n",
-    "    config = AttrDict(flag_info)\n",
-    "\n",
-    "    model_config = osp.join(working_dir,config['model_config'])\n",
-    "    data_config = osp.join(working_dir,config['data_config'])\n",
-    "\n",
-    "    # print(model_config)\n",
-    "    # print(data_config)\n",
-    "\n",
-    "    # load model (same for all kfolds)\n",
-    "    model,model_name = fet.load(model_config,config)\n",
-    "\n",
-    "    # load data\n",
-    "    kfold_loaders = fet.load(data_config, config)\n",
-    "    nfolds = len(kfold_loaders)\n",
-    "    print(\"Data is {}-fold partitioned.\".format(nfolds))\n",
-    "\n",
-    "    conf_shape = (nfolds,n_thresholds,2,2)\n",
-    "    # list of confusion matrices (nfolds,n_thresholds)\n",
-    "    conf_mats = {'train':np.zeros(conf_shape),\n",
-    "                 'test':np.zeros(conf_shape),\n",
-    "                 'val':np.zeros(conf_shape)} \n",
-    "\n",
-    "    results = {'thresholds':thresholds,'config':config,'params':param_count(model)}\n",
-    "\n",
-    "    test_times = []\n",
-    "    test_losses = []\n",
-    "    train_iters = []\n",
-    "    train_losses = []\n",
-    "    # val_times = [] # these are mostly redundant for now\n",
-    "    # val_losses = []\n",
-    "\n",
-    "    ###########################################\n",
-    "    # RECORD METRICS, CONFUSION MATRICES FOR ALL THRESHOLDS FOR ALL FOLDS, MODELS\n",
-    "    \n",
-    "    for k,loader_dict in enumerate(kfold_loaders):\n",
-    "        print(\"Evaluating fold {}...\".format(k+1))\n",
-    "        fold_dir = osp.join(working_dir,\"data_fold{}\".format(k+1))\n",
-    "\n",
-    "        # record times and losses from results_dict.h5\n",
-    "        test_reports = dd.io.load(osp.join(fold_dir,'results_dict.h5'))\n",
-    "        test_times.append(test_reports['time']/max(test_reports['time']))\n",
-    "        test_losses.append(test_reports['cross_entropy'])\n",
-    "\n",
-    "        iters,losses = np.array(dd.io.load(osp.join(fold_dir,'results_dict_train.h5'))).T\n",
-    "        train_iters.append(iters)\n",
-    "        train_losses.append(losses)\n",
-    "        # val_reports = dd.io.load(osp.join(fold_dir,'results_dict_val.h5'))\n",
-    "        # val_times.append(val_reports['time'])\n",
-    "        # val_losses.append(val_reports['cross_entropy']\n",
-    "        \n",
-    "        # find and load latest model checkpoint in fold dir\n",
-    "        model_ckpt_name = \"model_fold{}.ckpt-\".format(k+1)\n",
-    "        ckpt_files = [f for f in os.listdir(fold_dir) if f.startswith(model_ckpt_name) and re.search(r'\\d+$', f)]\n",
-    "        latest_ckpt = max(ckpt_files, key=lambda x: int(re.search(r'(\\d+)$', x).group()), default=None)\n",
-    "\n",
-    "        ckpt_file = osp.join(fold_dir, latest_ckpt)\n",
-    "        \n",
-    "        # load model weights from final checkpoint and set to evaluation mode\n",
-    "        model_wts = torch.load(ckpt_file)\n",
-    "\n",
-    "        model.load_state_dict(model_wts['model_state_dict'])\n",
-    "        model.eval()\n",
-    "\n",
-    "        # set up model to make binary int class predictions from logit output\n",
-    "        # def model_preds(x,threshold = 0.5,softmax = True):\n",
-    "        #     if softmax:\n",
-    "        #         probs = np.array(F.softmax(model(x),dim=1))\n",
-    "        #     else:\n",
-    "        #         probs = np.array(model(x))\n",
-    "        #     print(probs[:,1])\n",
-    "        #     preds = np.zeros(len(probs),dtype = int)\n",
-    "        #     preds[probs[:,1] > threshold] = 1 # CONFUSED ABOUT DIRECTION OF THIS INEQ\n",
-    "        #     return torch.tensor(preds)\n",
-    "\n",
-    "        for subset in conf_mats.keys(): # loop over train,test,val data subsets\n",
-    "            print(\"in subset\",subset)\n",
-    "            loader = loader_dict[subset] # specific dataloader\n",
-    "            \n",
-    "            all_labels = torch.tensor(loader.dataset.labels) # all predictions\n",
-    "            # print('truelabels counts',np.bincount(all_labels))\n",
-    "            all_data = torch.tensor(loader.dataset.data).float() # all inputs\n",
-    "\n",
-    "            with torch.no_grad():\n",
-    "                if softmax:\n",
-    "                    probs = np.array(F.softmax(model(all_data),dim=1))\n",
-    "                else:\n",
-    "                    probs = np.array(model(all_data))\n",
-    "\n",
-    "            for ii,t in enumerate(thresholds): # for all classification thresholds,\n",
-    "                 # make binary predicitions at this threshold,\n",
-    "                    # print('threshold',t)\n",
-    "                    # all_preds = model_preds(all_data,threshold = t)\n",
-    "                all_preds = np.zeros(len(probs),dtype = int)\n",
-    "                \n",
-    "                all_preds[probs[:,1] > t] = 1 # as threshold increases, fewer positives (FPR-> 0)\n",
-    "\n",
-    "                all_preds = torch.tensor(all_preds)\n",
-    "\n",
-    "                # compute confusion matrix\n",
-    "                binary_confusion_matrix = np.array(BCM(all_preds,all_labels),dtype = int)\n",
-    "\n",
-    "                # record confusion matrix\n",
-    "                conf_mats[subset][k][ii] = binary_confusion_matrix\n",
-    "\n",
-    "    ##########################################################\n",
-    "    # AGGREGATE PREDICTIONS OVER DATA FOLDS AND RETURN METRICS\n",
-    "\n",
-    "    # collect loss vs. time data from training\n",
-    "    results['test_time'] = test_times\n",
-    "    results['test_loss'] = test_losses\n",
-    "\n",
-    "    results['train_iter'] = train_iters\n",
-    "    results['train_loss'] = train_losses\n",
-    "    \n",
-    "    common_t = np.linspace(0, 1, 100)\n",
-    "    interpolated_y_values = np.array([interp1d(x, y, bounds_error=False, fill_value='extrapolate')(common_t) for x, y in zip(test_times, test_losses)])\n",
-    "    average_loss = np.mean(interpolated_y_values, axis=0)\n",
-    "    \n",
-    "    results['avg_loss'] = (common_t,average_loss)\n",
-    "    \n",
-    "    print(\"Models evaluated. Computing metrics...\")\n",
-    "    for subset in conf_mats.keys(): # for train, test, val\n",
-    "        thresh_mats = np.sum(conf_mats[subset],axis = 0) # sum confusion matrices over data folds\n",
-    "        \n",
-    "        # compute accuracy\n",
-    "        results[subset+'_acc'] = get_acc(thresh_mats)\n",
-    "        # compute precision\n",
-    "        results[subset+'_prec'] = get_prec(thresh_mats)\n",
-    "        # compute TPR\n",
-    "        results[subset+'_tpr'] = get_tpr(thresh_mats)\n",
-    "        # compute FPR\n",
-    "        results[subset+'_fpr'] = get_fpr(thresh_mats)\n",
-    "        # compute F1 score\n",
-    "        results[subset+'_F1'] = get_F1(thresh_mats)\n",
-    "    print(\"Done.\")\n",
-    "    return results"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
    "id": "14bf950d-a4f6-43a5-a1f1-51fd50ea0a8d",
    "metadata": {
     "scrolled": true
@@ -262,62 +25,108 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Getting metrics from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2\n",
-      "Loading 'basic_feedforward' from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/basic_feedforward.py\n",
-      "Loading 'penn_dataset' from checkpoints/penn_data/gpt-FCNN/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_/2/penn_dataset.py\n",
-      "Data is 5-fold partitioned.\n",
+      "Getting metrics from checkpoints/penn_data/conv1d/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs20_nrep1_/1\n",
+      "Loading 'convNet' from checkpoints/penn_data/conv1d/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs20_nrep1_/1/convNet.py\n",
+      "Loading 'penn_dataset' from checkpoints/penn_data/conv1d/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs20_nrep1_/1/penn_dataset.py\n",
+      "Data is 1-fold partitioned.\n",
       "Evaluating fold 1...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Evaluating fold 2...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Evaluating fold 3...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Evaluating fold 4...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
-      "Evaluating fold 5...\n",
-      "in subset train\n",
-      "in subset test\n",
-      "in subset val\n",
+      "in subset train\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████| 1151/1151 [00:11<00:00, 98.28it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset test\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|███████████████████████████████████████████| 94/94 [00:00<00:00, 96.86it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
+      "in subset val\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "100%|█████████████████████████████████████████| 289/289 [00:03<00:00, 95.40it/s]\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "model evaluated.\n",
       "Models evaluated. Computing metrics...\n",
+      "Writing metrics to file checkpoints/penn_data/conv1d/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs20_nrep1_/1/metrics.h5\n",
       "Done.\n"
      ]
     }
    ],
    "source": [
     "general_dir = 'checkpoints/penn_data'\n",
-    "run_name = 'gpt-FCNN/hyperparam_testing'\n",
-    "specific_run = \"bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs20_nrep1_\"\n",
+    "run_name = 'conv1d/hyperparam_testing'\n",
+    "specific_run = \"bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs20_nrep1_\"\n",
     "runDir = osp.join(general_dir,run_name,specific_run)\n",
-    "info = get_metrics(runDir,n_thresholds = 1000,nonlin_thresholds = False)"
+    "info = eval.get_metrics(runDir,n_thresholds = 1000,nonlin_thresholds = False)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
-   "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
+   "execution_count": 3,
+   "id": "8fa7d522-a68a-401a-a426-0c7f9f3f1b1a",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "[<matplotlib.lines.Line2D at 0x3052a0f10>]"
+       "8482"
       ]
      },
-     "execution_count": 14,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
-    },
+    }
+   ],
+   "source": [
+    "info['params']"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "ff0548de-9fd3-4b6b-b015-d43325c2c3f6",
+   "metadata": {},
+   "source": [
+    "#### Plot training loss"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "id": "2bd1188b-3032-4e11-bfe1-ff121b7fa28e",
+   "metadata": {},
+   "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "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",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -327,10 +136,7 @@
     }
    ],
    "source": [
-    "ts,ls = info['avg_loss']\n",
-    "plt.plot(ts,ls)\n",
-    "# plt.xscale('log')\n",
-    "# plt.yscale('log')"
+    "eval.plot_train_loss(info)"
    ]
   },
   {
@@ -343,13 +149,44 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 5,
    "id": "ac815258-7141-4e1c-8ea8-b6598aa6dd27",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "eval.plot_test_loss(info)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c5e82793-656c-492a-9a1b-b422b8c1af0f",
+   "metadata": {},
+   "source": [
+    "#### Plot train vs. test loss"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "id": "cdfb8940-95f8-4926-af92-054760b8a7f0",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -359,7 +196,7 @@
     }
    ],
    "source": [
-    "eval.plot_loss(info)"
+    "eval.plot_train_test_loss(info)"
    ]
   },
   {
@@ -372,13 +209,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 7,
    "id": "edb8dbe5-1fe6-4dc3-9aa2-39f44d7939ab",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -401,19 +238,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 8,
    "id": "a2782025-287b-4e3e-8e49-8d3a487554cb",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
      },
      "metadata": {},
      "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "F1 score maximized at threshold 0.39\n"
+     ]
     }
    ],
    "source": [
@@ -430,7 +274,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 9,
    "id": "b5644cf6-3b0f-4ff6-abe4-60dd790fa337",
    "metadata": {
     "scrolled": true
@@ -438,7 +282,7 @@
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
@@ -461,13 +305,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 10,
    "id": "0668184c-cd7c-4349-aee3-7397605c62b9",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 640x480 with 1 Axes>"
       ]
diff --git a/basic_feedforward.py b/basic_feedforward.py
index c36011b..b8a0d49 100644
--- a/basic_feedforward.py
+++ b/basic_feedforward.py
@@ -36,6 +36,7 @@ class GPT_PNN(nn.Module):
     def __init__(self, input_size, num_labels):
         super(GPT_PNN, self).__init__()
         # Define the layers
+        
         self.fc1 = nn.Linear(input_size, 64)  # First dense layer, reduced size
         self.bn1 = nn.BatchNorm1d(64)  # Batch Normalization for the first layer
         self.dropout1 = nn.Dropout(0.5)  # Dropout with 50% probability
@@ -53,6 +54,7 @@ class GPT_PNN(nn.Module):
         self.fc3 = nn.Linear(32, num_labels)  # Output layer
 
     def forward(self, x):
+    	x = x['data']
         # x = x[:,::2] # try using every other wavelength
         # Forward pass through the network with activations, batch normalization, and dropout
         x = F.relu(self.bn1(self.fc1(x)))
diff --git a/checkpoints/.DS_Store b/checkpoints/.DS_Store
index d2830ac..869397b 100644
Binary files a/checkpoints/.DS_Store and b/checkpoints/.DS_Store differ
diff --git a/checkpoints/penn_data/.DS_Store b/checkpoints/penn_data/.DS_Store
index 2d5c952..048f8ca 100644
Binary files a/checkpoints/penn_data/.DS_Store and b/checkpoints/penn_data/.DS_Store differ
diff --git a/checkpoints/penn_data/feedforward/.DS_Store b/checkpoints/penn_data/feedforward/.DS_Store
deleted file mode 100644
index 4a7e165..0000000
Binary files a/checkpoints/penn_data/feedforward/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/.DS_Store b/checkpoints/penn_data/feedforward/hyperparam_testing/.DS_Store
deleted file mode 100644
index 41a19c1..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 52120eb..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index c07bbf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index 673537d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 8a8908b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 2bc3fc7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict.h5
deleted file mode 100644
index 24cb9ff..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index b082cf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index eebc137..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/events.out.tfevents.1709686078.MacBook-Pro-4.local.3000.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/events.out.tfevents.1709686078.MacBook-Pro-4.local.3000.0
deleted file mode 100644
index 5ff3f3f..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/events.out.tfevents.1709686078.MacBook-Pro-4.local.3000.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/flags.json
deleted file mode 100644
index 617a174..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/git_diff.txt
deleted file mode 100644
index 3ad4daa..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 16:47:58 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..84b3f43 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'],loss_func = loss_func)
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 7bec4ab..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index f41ca1b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 4f96e04..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index 440704f..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index ae595b0..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 95f53ac..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 3291e82..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict.h5
deleted file mode 100644
index f5185ce..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_train.h5
deleted file mode 100644
index e8f0510..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_val.h5
deleted file mode 100644
index 9679d41..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/events.out.tfevents.1709686283.MacBook-Pro-4.local.3051.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/events.out.tfevents.1709686283.MacBook-Pro-4.local.3051.0
deleted file mode 100644
index 610c133..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/events.out.tfevents.1709686283.MacBook-Pro-4.local.3051.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/flags.json
deleted file mode 100644
index 617a174..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/git_diff.txt
deleted file mode 100644
index 671f147..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 16:51:23 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..61a1bb9 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	# scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'],loss_func = loss_func)
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			# scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/2/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index a280a73..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index e19d023..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 52120eb..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index c07bbf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index 673537d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 8a8908b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 2bc3fc7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict.h5
deleted file mode 100644
index 68e66dd..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_train.h5
deleted file mode 100644
index 2c91e45..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_val.h5
deleted file mode 100644
index d8c2efc..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/events.out.tfevents.1709686632.MacBook-Pro-4.local.3161.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/events.out.tfevents.1709686632.MacBook-Pro-4.local.3161.0
deleted file mode 100644
index 14b5cf2..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/events.out.tfevents.1709686632.MacBook-Pro-4.local.3161.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/flags.json
deleted file mode 100644
index 617a174..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/git_diff.txt
deleted file mode 100644
index 4bc1570..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 16:57:12 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..158d7d6 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs30_/3/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 01b7042..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index 4779fab..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 52120eb..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index c07bbf7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021
deleted file mode 100644
index 673537d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-23021 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531
deleted file mode 100644
index 8a8908b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-34531 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 2bc3fc7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict.h5
deleted file mode 100644
index 83bde77..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 2ede2c2..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index a367230..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-0
deleted file mode 100644
index 636d841..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-12131 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-12131
deleted file mode 100644
index a70bf0c..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-12131 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-24261 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-24261
deleted file mode 100644
index 3a5749d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-24261 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-36391 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-36391
deleted file mode 100644
index b607887..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-36391 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-early_stop
deleted file mode 100644
index a1447f3..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/model_fold2.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict.h5
deleted file mode 100644
index 4d1f690..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_train.h5
deleted file mode 100644
index cdacd1a..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_val.h5
deleted file mode 100644
index 732bbbf..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/test_headings.txt
deleted file mode 100644
index b87ab5e..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold2/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0063
-aaa0066
-aaa_0051
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-0
deleted file mode 100644
index 30fd2be..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-12751 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-12751
deleted file mode 100644
index 467bfb4..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-12751 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-25501 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-25501
deleted file mode 100644
index 975074b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-25501 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-38251 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-38251
deleted file mode 100644
index 5268e0d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-38251 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-early_stop
deleted file mode 100644
index 30ca2f4..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/model_fold3.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict.h5
deleted file mode 100644
index 3b7dd92..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_train.h5
deleted file mode 100644
index 7658165..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_val.h5
deleted file mode 100644
index a41a1c1..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/test_headings.txt
deleted file mode 100644
index 8417193..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold3/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0043
-aaa0044
-aaa_0071
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-0
deleted file mode 100644
index 656f3ad..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-12721 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-12721
deleted file mode 100644
index 4c56644..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-12721 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-25441 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-25441
deleted file mode 100644
index 672f077..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-25441 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-38161 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-38161
deleted file mode 100644
index aef00a7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-38161 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-early_stop
deleted file mode 100644
index f3b3785..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/model_fold4.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict.h5
deleted file mode 100644
index 97c4db9..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_train.h5
deleted file mode 100644
index 081d412..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_val.h5
deleted file mode 100644
index 4ec1efc..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/test_headings.txt
deleted file mode 100644
index ad5063c..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold4/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0086
-aaa0087
-aaa_0072
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-0
deleted file mode 100644
index 7022ce7..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-12241 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-12241
deleted file mode 100644
index 53e30ad..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-12241 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-24481 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-24481
deleted file mode 100644
index 258593b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-24481 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-36721 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-36721
deleted file mode 100644
index 1f669b0..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-36721 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-early_stop b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-early_stop
deleted file mode 100644
index 0ec8c04..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/model_fold5.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict.h5
deleted file mode 100644
index f6f3032..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_train.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_train.h5
deleted file mode 100644
index 825cce2..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_val.h5 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_val.h5
deleted file mode 100644
index baec64c..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/test_headings.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/test_headings.txt
deleted file mode 100644
index a4e6319..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/data_fold5/test_headings.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-aaa0064
-aaa_0053
-aaa_0054
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686825.MacBook-Pro-4.local.3248.0 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686825.MacBook-Pro-4.local.3248.0
deleted file mode 100644
index 71d686d..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686825.MacBook-Pro-4.local.3248.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686884.MacBook-Pro-4.local.3248.1 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686884.MacBook-Pro-4.local.3248.1
deleted file mode 100644
index 6f8ed57..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686884.MacBook-Pro-4.local.3248.1 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686943.MacBook-Pro-4.local.3248.2 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686943.MacBook-Pro-4.local.3248.2
deleted file mode 100644
index 013cb8b..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686943.MacBook-Pro-4.local.3248.2 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686999.MacBook-Pro-4.local.3248.3 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686999.MacBook-Pro-4.local.3248.3
deleted file mode 100644
index 2f53f14..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709686999.MacBook-Pro-4.local.3248.3 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709687056.MacBook-Pro-4.local.3248.4 b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709687056.MacBook-Pro-4.local.3248.4
deleted file mode 100644
index c9d3ca3..0000000
Binary files a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/events.out.tfevents.1709687056.MacBook-Pro-4.local.3248.4 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/flags.json b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/flags.json
deleted file mode 100644
index fe1bc9f..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": true,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "hyperparam_testing",
-    "save_check_points": 10,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 30,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/git_diff.txt b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/git_diff.txt
deleted file mode 100644
index 8bb4f23..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/git_diff.txt
+++ /dev/null
@@ -1,1775 +0,0 @@
-Tue Mar 5 17:00:25 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..bf7630a 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..ecb5bc2 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..46c8e52 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..158d7d6 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,458 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'hyperparam_testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 30, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	10,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	scheduler = torch.optim.lr_scheduler.StepLR(model_opt, step_size=10, gamma=0.5)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			scheduler.step()
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/penn_dataset.py
deleted file mode 100644
index 46c8e52..0000000
--- a/checkpoints/penn_data/feedforward/hyperparam_testing/bs100_lr0_001_inclxFalse_inpsize39_crvalTrue_n_epochs30_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 71fb2ce..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index dece3e2..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
deleted file mode 100644
index cdd5158..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        # self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        # x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 4f96e04..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101
deleted file mode 100644
index 9ad2f1c..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index 8328545..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 038fc0c..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5
deleted file mode 100644
index ae627ae..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 55b2151..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index 3e6c788..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709678914.MacBook-Pro-4.local.1475.0 b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709678914.MacBook-Pro-4.local.1475.0
deleted file mode 100644
index e610ddd..0000000
Binary files a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709678914.MacBook-Pro-4.local.1475.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
deleted file mode 100644
index 9e3b59a..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "plotting",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8,
-    "use_mps": false
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
deleted file mode 100644
index 393f601..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
+++ /dev/null
@@ -1,1772 +0,0 @@
-Tue Mar 5 14:48:34 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..dddecf8 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..cdd5158 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        # self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        # x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..432d504 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,455 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 10, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
-+
-+flags.DEFINE_boolean('use_mps',False,"Use Metal Performance Shaders (M1) for training.")
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-3, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	if config.use_mps:
-+		device = "mps"
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/plotting/bs100_lr0_001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/.DS_Store b/checkpoints/penn_data/feedforward/testing/.DS_Store
deleted file mode 100644
index f1ae3e6..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/.DS_Store b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/.DS_Store
deleted file mode 100644
index 25e0e51..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/flags.json
deleted file mode 100644
index 889a6ea..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "feedforward",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/git_diff.txt
deleted file mode 100644
index 69a94ea..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/git_diff.txt
+++ /dev/null
@@ -1,1763 +0,0 @@
-Tue Mar 5 10:33:21 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..ad06094 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..e6d593e 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,447 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
-+					'Top directory for all experimental results.')
- flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval')
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_count / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/.DS_Store b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/.DS_Store
deleted file mode 100644
index 482a2ef..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 24b3d19..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-115101 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-115101
deleted file mode 100644
index 8d093d7..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-115101 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index 00876b2..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index c6f01aa..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict.h5
deleted file mode 100644
index f7e0af9..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_train.h5
deleted file mode 100644
index e575627..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_val.h5
deleted file mode 100644
index a4e2a70..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/events.out.tfevents.1709663626.MacBook-Pro-4.local.5907.0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/events.out.tfevents.1709663626.MacBook-Pro-4.local.5907.0
deleted file mode 100644
index 13f4159..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/events.out.tfevents.1709663626.MacBook-Pro-4.local.5907.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/flags.json
deleted file mode 100644
index 889a6ea..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "feedforward",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/git_diff.txt
deleted file mode 100644
index e438729..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/git_diff.txt
+++ /dev/null
@@ -1,1763 +0,0 @@
-Tue Mar 5 10:33:46 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..ad06094 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..afff727 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,447 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
-+					'Top directory for all experimental results.')
- flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval')
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_/2/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc
deleted file mode 100644
index 9a548a8..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/basic_feedforward.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc
deleted file mode 100644
index ba1f80e..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/__pycache__/penn_dataset.cpython-39.pyc and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 24b3d19..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101
deleted file mode 100644
index 8d093d7..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-115101 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551
deleted file mode 100644
index 00876b2..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-57551 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index c6f01aa..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5
deleted file mode 100644
index 523055f..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 3e162c6..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index 3ad7dec..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709674431.MacBook-Pro-4.local.7916.0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709674431.MacBook-Pro-4.local.7916.0
deleted file mode 100644
index 2e9f9a9..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/events.out.tfevents.1709674431.MacBook-Pro-4.local.7916.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
deleted file mode 100644
index 3680210..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 100,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
deleted file mode 100644
index 2b6c67b..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/git_diff.txt
+++ /dev/null
@@ -1,1768 +0,0 @@
-Tue Mar 5 13:33:51 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..def250b 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,451 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 10, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		print('train_reports',train_reports)
-+		print("report_all",report_all)
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs100_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/.DS_Store b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/.DS_Store
deleted file mode 100644
index 9c7a74d..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/.DS_Store and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/basic_feedforward.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/basic_feedforward.py
deleted file mode 100644
index b8c3962..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/basic_feedforward.py
+++ /dev/null
@@ -1,42 +0,0 @@
-import torch
-import torch.nn as nn
-import torch.nn.functional as F
-import numpy as np
-
-from forge import flags
-
-# flags.DEFINE_boolean(
-#     "model_with_dict",
-#     True,
-#     "Makes model output predictions in dictionary instead of directly."
-# )
-
-class PerceptronNN(nn.Module):
-    def __init__(self, input_size, num_labels):
-        super(PerceptronNN, self).__init__()
-        # Define the layers
-        self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-        self.fc2 = nn.Linear(128, 64)         # Second dense layer
-        self.fc23 = nn.Linear(64,64)
-        self.fc3 = nn.Linear(64, 64)          # Third dense layer
-        self.fc4 = nn.Linear(64, num_labels)  # Output layer
-        # self.softmax = nn.Softmax(dim=1)
-
-    def forward(self, x):
-        # Forward pass through the network
-        x = F.relu(self.fc1(x))  # Activation function between layers
-        x = F.relu(self.fc2(x))
-        x = F.relu(self.fc23(x))
-        x = F.relu(self.fc3(x))
-        x = self.fc4(x)  # No activation, this will be included in the loss function
-        # x = self.softmax(x)
-        return x
-
-def load(config):
-
-    # n_channels = 1
-    n_features = config.input_size
-    
-    mlp = PerceptronNN(n_features,2)
-    
-    return mlp, "feedforward"
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-0
deleted file mode 100644
index 24b3d19..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-11511 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-11511
deleted file mode 100644
index 4982cfb..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-11511 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-early_stop b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-early_stop
deleted file mode 100644
index 6fd2104..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/model_fold1.ckpt-early_stop and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict.h5
deleted file mode 100644
index c7e5da6..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_train.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_train.h5
deleted file mode 100644
index 96d7363..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_train.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_val.h5 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_val.h5
deleted file mode 100644
index 1bc99fd..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/results_dict_val.h5 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/test_headings.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/test_headings.txt
deleted file mode 100644
index 05c4825..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/data_fold1/test_headings.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-aaa0060
-aaa0061
-aaa0069
-aaa_0059
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/events.out.tfevents.1709672112.MacBook-Pro-4.local.7461.0 b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/events.out.tfevents.1709672112.MacBook-Pro-4.local.7461.0
deleted file mode 100644
index bd35954..0000000
Binary files a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/events.out.tfevents.1709672112.MacBook-Pro-4.local.7461.0 and /dev/null differ
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/flags.json b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/flags.json
deleted file mode 100644
index 3152d07..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/flags.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-    "batch_size": 100,
-    "beta1": 0.9,
-    "beta2": 0.999,
-    "cross_validate": false,
-    "data_config": "penn_dataset.py",
-    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-    "include_coords": false,
-    "input_size": 39,
-    "learning_rate": 0.0001,
-    "log_train_values": true,
-    "log_val_test": true,
-    "model_config": "basic_feedforward.py",
-    "n_repeats": 1,
-    "report_loss_every": 50,
-    "rescale": true,
-    "results_dir": "checkpoints",
-    "resume": false,
-    "run_name": "testing",
-    "save_check_points": 50,
-    "save_test_predictions": false,
-    "split_seed": 1,
-    "total_evaluations": 100,
-    "train_epochs": 10,
-    "train_split": 0.8
-}
\ No newline at end of file
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/git_diff.txt b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/git_diff.txt
deleted file mode 100644
index d70a1bb..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/git_diff.txt
+++ /dev/null
@@ -1,1768 +0,0 @@
-Tue Mar 5 12:55:12 PST 2024
-diff --git a/.DS_Store b/.DS_Store
-index e2836a8..c46cff7 100644
-Binary files a/.DS_Store and b/.DS_Store differ
-diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-index 688c282..0c4bcd1 100644
---- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+flags.DEFINE_boolean(
-+    "model_with_dict",
-+    True,
-+    "Makes model output predictions in dictionary instead of directly."
-+)
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-index f541140..0e2c7e5 100644
-Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-index 0d7a4de..19121eb 100644
-Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-diff --git a/basic_feedforward.py b/basic_feedforward.py
-index 688c282..b8c3962 100644
---- a/basic_feedforward.py
-+++ b/basic_feedforward.py
-@@ -5,21 +5,31 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-         # Define the layers
-         self.fc1 = nn.Linear(input_size, 128)  # First dense layer
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+        self.fc23 = nn.Linear(64,64)
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        # self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-         x = F.relu(self.fc1(x))  # Activation function between layers
-         x = F.relu(self.fc2(x))
-+        x = F.relu(self.fc23(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        # x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +39,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-index 688c282..3a65525 100644
---- a/checkpoints/feedforward/1/basic_feedforward.py
-+++ b/checkpoints/feedforward/1/basic_feedforward.py
-@@ -5,6 +5,12 @@ import numpy as np
- 
- from forge import flags
- 
-+# flags.DEFINE_boolean(
-+#     "model_with_dict",
-+#     True,
-+#     "Makes model output predictions in dictionary instead of directly."
-+# )
-+
- class PerceptronNN(nn.Module):
-     def __init__(self, input_size, num_labels):
-         super(PerceptronNN, self).__init__()
-@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-+        self.softmax = nn.Softmax(dim=1)
- 
-     def forward(self, x):
-         # Forward pass through the network
-@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-         x = F.relu(self.fc2(x))
-         x = F.relu(self.fc3(x))
-         x = self.fc4(x)  # No activation, this will be included in the loss function
-+        x = self.softmax(x)
-         return x
- 
- def load(config):
-@@ -29,4 +37,4 @@ def load(config):
-     
-     mlp = PerceptronNN(n_features,2)
-     
--    return mlp
-\ No newline at end of file
-+    return mlp, "feedforward"
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-index 1d000c3..889a6ea 100644
---- a/checkpoints/feedforward/1/flags.json
-+++ b/checkpoints/feedforward/1/flags.json
-@@ -1,9 +1,15 @@
- {
-     "batch_size": 100,
-+    "beta1": 0.9,
-+    "beta2": 0.999,
-+    "cross_validate": false,
-     "data_config": "penn_dataset.py",
-+    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-     "include_coords": false,
-     "input_size": 39,
--    "learning_rate": 1e-05,
-+    "learning_rate": 0.0001,
-+    "log_train_values": true,
-+    "log_val_test": true,
-     "model_config": "basic_feedforward.py",
-     "n_repeats": 1,
-     "report_loss_every": 50,
-@@ -11,7 +17,10 @@
-     "results_dir": "checkpoints",
-     "resume": false,
-     "run_name": "feedforward",
-+    "save_check_points": 50,
-+    "save_test_predictions": false,
-     "split_seed": 1,
--    "train_epochs": 20,
-+    "total_evaluations": 100,
-+    "train_epochs": 100,
-     "train_split": 0.8
- }
-\ No newline at end of file
-diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-index 7b37e6f..ec23707 100644
---- a/checkpoints/feedforward/1/git_diff.txt
-+++ b/checkpoints/feedforward/1/git_diff.txt
-@@ -1 +1,873 @@
--Mon Mar 4 11:45:48 PST 2024
-+Mon Mar 4 16:34:02 PST 2024
-+diff --git a/.DS_Store b/.DS_Store
-+index e2836a8..7e3fa32 100644
-+Binary files a/.DS_Store and b/.DS_Store differ
-+diff --git a/.ipynb_checkpoints/basic_feedforward-checkpoint.py b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+index 688c282..0c4bcd1 100644
-+--- a/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-++++ b/.ipynb_checkpoints/basic_feedforward-checkpoint.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++flags.DEFINE_boolean(
-++    "model_with_dict",
-++    True,
-++    "Makes model output predictions in dictionary instead of directly."
-++)
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/__pycache__/basic_feedforward.cpython-39.pyc b/__pycache__/basic_feedforward.cpython-39.pyc
-+index f541140..5ad96de 100644
-+Binary files a/__pycache__/basic_feedforward.cpython-39.pyc and b/__pycache__/basic_feedforward.cpython-39.pyc differ
-+diff --git a/__pycache__/penn_dataset.cpython-39.pyc b/__pycache__/penn_dataset.cpython-39.pyc
-+index 0d7a4de..19121eb 100644
-+Binary files a/__pycache__/penn_dataset.cpython-39.pyc and b/__pycache__/penn_dataset.cpython-39.pyc differ
-+diff --git a/basic_feedforward.py b/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/basic_feedforward.py
-++++ b/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/basic_feedforward.py b/checkpoints/feedforward/1/basic_feedforward.py
-+index 688c282..3a65525 100644
-+--- a/checkpoints/feedforward/1/basic_feedforward.py
-++++ b/checkpoints/feedforward/1/basic_feedforward.py
-+@@ -5,6 +5,12 @@ import numpy as np
-+ 
-+ from forge import flags
-+ 
-++# flags.DEFINE_boolean(
-++#     "model_with_dict",
-++#     True,
-++#     "Makes model output predictions in dictionary instead of directly."
-++# )
-++
-+ class PerceptronNN(nn.Module):
-+     def __init__(self, input_size, num_labels):
-+         super(PerceptronNN, self).__init__()
-+@@ -13,6 +19,7 @@ class PerceptronNN(nn.Module):
-+         self.fc2 = nn.Linear(128, 64)         # Second dense layer
-+         self.fc3 = nn.Linear(64, 64)          # Third dense layer
-+         self.fc4 = nn.Linear(64, num_labels)  # Output layer
-++        self.softmax = nn.Softmax(dim=1)
-+ 
-+     def forward(self, x):
-+         # Forward pass through the network
-+@@ -20,6 +27,7 @@ class PerceptronNN(nn.Module):
-+         x = F.relu(self.fc2(x))
-+         x = F.relu(self.fc3(x))
-+         x = self.fc4(x)  # No activation, this will be included in the loss function
-++        x = self.softmax(x)
-+         return x
-+ 
-+ def load(config):
-+@@ -29,4 +37,4 @@ def load(config):
-+     
-+     mlp = PerceptronNN(n_features,2)
-+     
-+-    return mlp
-+\ No newline at end of file
-++    return mlp, "feedforward"
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/flags.json b/checkpoints/feedforward/1/flags.json
-+index 1d000c3..889a6ea 100644
-+--- a/checkpoints/feedforward/1/flags.json
-++++ b/checkpoints/feedforward/1/flags.json
-+@@ -1,9 +1,15 @@
-+ {
-+     "batch_size": 100,
-++    "beta1": 0.9,
-++    "beta2": 0.999,
-++    "cross_validate": false,
-+     "data_config": "penn_dataset.py",
-++    "git_commit": "7416bf730b356aabfe0df644240e40948a8196bb",
-+     "include_coords": false,
-+     "input_size": 39,
-+-    "learning_rate": 1e-05,
-++    "learning_rate": 0.0001,
-++    "log_train_values": true,
-++    "log_val_test": true,
-+     "model_config": "basic_feedforward.py",
-+     "n_repeats": 1,
-+     "report_loss_every": 50,
-+@@ -11,7 +17,10 @@
-+     "results_dir": "checkpoints",
-+     "resume": false,
-+     "run_name": "feedforward",
-++    "save_check_points": 50,
-++    "save_test_predictions": false,
-+     "split_seed": 1,
-+-    "train_epochs": 20,
-++    "total_evaluations": 100,
-++    "train_epochs": 100,
-+     "train_split": 0.8
-+ }
-+\ No newline at end of file
-+diff --git a/checkpoints/feedforward/1/git_diff.txt b/checkpoints/feedforward/1/git_diff.txt
-+index 7b37e6f..5c561db 100644
-+--- a/checkpoints/feedforward/1/git_diff.txt
-++++ b/checkpoints/feedforward/1/git_diff.txt
-+@@ -1 +1 @@
-+-Mon Mar 4 11:45:48 PST 2024
-++Mon Mar 4 16:34:02 PST 2024
-+diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/checkpoints/feedforward/1/penn_dataset.py
-++++ b/checkpoints/feedforward/1/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/penn_dataset.py b/penn_dataset.py
-+index aa2f5a0..7f5a4fc 100644
-+--- a/penn_dataset.py
-++++ b/penn_dataset.py
-+@@ -15,6 +15,7 @@ from forge import flags
-+ # aspects of data managmement
-+ flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-+ flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-++flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-+ 
-+ # Job management
-+ # flags.DEFINE_integer("batch size",5,"training batch size")
-+@@ -109,15 +110,15 @@ def load(config):
-+         
-+         # set up training DataLoader
-+         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-++        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up test DataLoader
-+         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-++        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-+ 
-+         # set up val DataLoader
-+         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-+-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-++        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-+         
-+ 
-+         dataloaders = {'train':train_loader, 
-+@@ -125,8 +126,12 @@ def load(config):
-+                        'val':val_loader,
-+                        'train_inds':train_ind,
-+                        'test_inds':test_ind,
-+-                       'n_val':n_val
-++                       'n_val':n_val,
-++                       'test_headings':list(HEADINGS[test_ind])
-+                       }
-+         kf_dataloaders.append(dataloaders)
-+ 
-++        if not config.cross_validate:
-++        	break
-++
-+     return kf_dataloaders
-+diff --git a/testing.ipynb b/testing.ipynb
-+index e5a167b..a928d8d 100644
-+--- a/testing.ipynb
-++++ b/testing.ipynb
-+@@ -2,7 +2,7 @@
-+  "cells": [
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 1,
-++   "execution_count": 2,
-+    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-+    "metadata": {},
-+    "outputs": [],
-+@@ -23,19 +23,19 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 2,
-++   "execution_count": 3,
-+    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-+    "metadata": {},
-+    "outputs": [],
-+    "source": [
-+-    "flags.DEFINE_integer(\"batch_size\", 100, \"Mini-batch size.\")\n",
-++    "flags.DEFINE_integer(\"batch_size\", 10, \"Mini-batch size.\")\n",
-+     "\n",
-+     "flags.DEFINE_integer(\"input_size\",39,\"Input shape to model\")"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 3,
-++   "execution_count": 4,
-+    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-+    "metadata": {},
-+    "outputs": [
-+@@ -54,8 +54,8 @@
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 9,
-+-   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "execution_count": 5,
-++   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+@@ -67,35 +67,89 @@
-+     }
-+    ],
-+    "source": [
-+-    "model = fet.load(\"basic_feedforward.py\",config)"
-++    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-+    ]
-+   },
-+   {
-+    "cell_type": "code",
-+-   "execution_count": 10,
-+-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "execution_count": 17,
-++   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-+    "metadata": {},
-+    "outputs": [
-+     {
-+      "data": {
-+       "text/plain": [
-+-       "PerceptronNN(\n",
-+-       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
-+-       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
-+-       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
-+-       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
-+-       ")"
-++       "['aaa0060', 'aaa0061', 'aaa0069', 'aaa_0059']"
-+       ]
-+      },
-+-     "execution_count": 10,
-++     "execution_count": 17,
-+      "metadata": {},
-+      "output_type": "execute_result"
-+     }
-+    ],
-+    "source": [
-+-    "model"
-++    "loaddat[0]['test_headings']"
-++   ]
-++  },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 19,
-++   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "name": "stdout",
-++     "output_type": "stream",
-++     "text": [
-++      "Keys: ['cross_entropy', 'time']\n"
-++     ]
-++    }
-++   ],
-++   "source": [
-++    "import h5py\n",
-++    "\n",
-++    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-++    "# Replace 'your_file.h5' with the actual path to your file\n",
-++    "f =  h5py.File(file_path, 'r') \n",
-++    "\n",
-++    "    # Get information about the data stored in the file\n",
-++    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-++    "\n",
-++    "    # # Access a dataset by its name\n",
-++    "    # dataset_name = \"your_dataset_name\"\n",
-++    "    # if dataset_name in f:\n",
-++    "    #     dataset = f[dataset_name]\n",
-++    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-++    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-++    "\n",
-++    "    #     # Access the data as a NumPy array\n",
-++    "    #     data = dataset[:]  # Read the entire dataset\n",
-++    "\n",
-++    "    #     # You can now work with the data as needed, for example:\n",
-++    "    #     # Perform calculations, visualizations, etc.\n",
-++    "    # else:\n",
-++    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+    ]
-+   },
-++  {
-++   "cell_type": "code",
-++   "execution_count": 13,
-++   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-++   "metadata": {},
-++   "outputs": [
-++    {
-++     "data": {
-++      "text/plain": [
-++       "<generator object Module.parameters at 0x3007207b0>"
-++      ]
-++     },
-++     "execution_count": 13,
-++     "metadata": {},
-++     "output_type": "execute_result"
-++    }
-++   ],
-++   "source": []
-++  },
-+   {
-+    "cell_type": "code",
-+    "execution_count": null,
-+diff --git a/train.py b/train.py
-+index c266102..516bfa9 100644
-+--- a/train.py
-++++ b/train.py
-+@@ -1,49 +1,440 @@
-+ from os import path as osp
-++import os
-++import numpy as np
-++import time
-+ 
-+ import torch
-++import torch.nn as nn
-+ import torch.nn.functional as F
-+ import torch.optim as optim
-+-
-+-import numpy as np
-++from torch.utils.tensorboard import SummaryWriter
-+ 
-+ import forge
-+ from forge import flags
-+ import forge.experiment_tools as fet
-+ 
-++from train_tools import (
-++	log_tensorboard,
-++	parse_reports,
-++	parse_reports_cpu,
-++	print_reports,
-++	load_checkpoint,
-++	save_checkpoint,
-++	nested_to,
-++	param_count,
-++)
-++
-++from copy import deepcopy
-++from attrdict import AttrDict
-++import deepdish as dd
-++from tqdm import tqdm
-++
-++# For reproducibility while researching, but might affect speed!
-++torch.backends.cudnn.deterministic = True
-++torch.backends.cudnn.benchmark = False
-++torch.manual_seed(0)
-++
-+ 
-+ # Job config
-+ flags.DEFINE_string('data_config', 'penn_dataset.py',
-+-                    'Path to a data config file.')
-++					'Path to a data config file.')
-+ flags.DEFINE_string('model_config', 'basic_feedforward.py',
-+-                    'Path to a model config file.')
-++					'Path to a model config file.')
-+ flags.DEFINE_string('results_dir', 'checkpoints',
-+-                    'Top directory for all experimental results.')
-++					'Top directory for all experimental results.')
-+ flags.DEFINE_string('run_name', 'feedforward',
-+-                    'Name of this job and name of results folder.')
-++					'Name of this job and name of results folder.')
-+ flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
-+ 
-+ # Logging config
-+ flags.DEFINE_integer('report_loss_every', 50,
-+-                     'Number of iterations between reporting minibatch loss.')
-+-flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-++					 'Number of iterations between reporting minibatch loss.')
-++flags.DEFINE_integer('train_epochs', 100, 'Maximum number of training epochs.')
-++flags.DEFINE_integer(
-++	"save_check_points",
-++	50,
-++	"frequency with which to save checkpoints, in number of epoches.",
-++)
-++flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-++flags.DEFINE_integer(
-++	"total_evaluations",
-++	100,
-++	"Maximum number of evaluations on test and validation data during training.",
-++)
-++flags.DEFINE_boolean(
-++	"save_test_predictions",
-++	False,
-++	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-++)
-++flags.DEFINE_boolean(
-++    "log_val_test", True, "Turns off computation of validation and test errors."
-++)
-+ 
-+ # Experiment config
-+ flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
-+-flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-++flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-++flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-++flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
-+ 
-+ # Specific config options
-+ flags.DEFINE_integer("input_size",39,"Input shape to model")
-+ 
-++#########################################################################################
-++
-++def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-++	reports = None
-++	for data in loader:
-++		labels = data['label']
-++		inputs = nested_to(data['data'],device,torch.float32)
-++		
-++		labels_tensor = torch.zeros((len(labels), 2))
-++		for i, label in enumerate(labels):
-++			labels_tensor[i, label] = 1
-++
-++		model_output = model(inputs) # evaluate model
-++
-++		loss = loss_func(model_output, labels_tensor) # compute loss
-++		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-++		outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++		if reports is None:
-++			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-++		else:
-++			for k, v in outputs.reports.items():
-++				reports[k] += v.detach().clone().cpu()
-++
-++	for k, v in reports.items():
-++		reports[k] = v / len(
-++			loader
-++		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-++
-++	# reports['test_headings'] = np.array(headings)
-++
-++	return reports
-++
-++def main():
-++
-++	config = forge.config()
-++
-++	# Set device
-++	if torch.cuda.is_available():
-++		device = f"cuda:{config.device}"
-++		torch.cuda.set_device(device)
-++	else:
-++		device = "cpu" # can change this to MPS on M1 Macs
-++
-++	# Load data
-++	data_name = "penn_data"
-++	kfold_loaders = fet.load(config.data_config, config)
-++
-++	# Load model
-++	model,model_name = fet.load(config.model_config, config)
-++	model = model.to(device)
-++
-++	loss_func = nn.CrossEntropyLoss()
-++
-++	# Prepare environment
-++	params_in_run_name = [
-++		("batch_size", "bs"),
-++		("learning_rate", "lr"),
-++		("n_train", "ntrain")
-++	]
-++
-++	run_name = ""  # config.run_name
-++	for config_param in params_in_run_name:
-++		attr = config_param[0]
-++		abbrev = config_param[1]
-++
-++		if hasattr(config, attr):
-++			run_name += abbrev
-++			run_name += str(getattr(config, attr))
-++			run_name += "_"
-++
-++	results_folder_name = osp.join(
-++		data_name,
-++		model_name,
-++		config.run_name,
-++		run_name,
-++	)
-++
-++	# Prepare environment
-++	logdir = osp.join(config.results_dir, config.run_name)
-++	logdir, resume_checkpoint = fet.init_checkpoint(
-++		logdir, config.data_config, config.model_config, config.resume)
-++
-++	print("Checkpoint directory:",logdir)
-++
-++	# Print flags
-++	fet.print_flags()
-++	# Print model info
-++	print(model)
-++
-++	# Setup optimizer
-++	model_params = model.parameters()
-++	opt_learning_rate = config.learning_rate
-++	model_opt = torch.optim.Adam(
-++		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-++	)
-++	print("Model Optimizer:")
-++	print(model_opt)
-++
-++	# Try to restore model and optimizer from checkpoint
-++	if resume_checkpoint is not None:
-++		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-++	else:
-++		start_epoch = 1
-++
-++	n_folds = len(kfold_loaders)
-++	print("Doing {}-fold cross-validation.".format(n_folds))
-++
-++	# KFOLD TRAINING LOOP
-++	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-++
-++		print("Training fold {}...".format(k+1))
-++
-++		# load the training data
-++		train_loader = loader_k["train"]
-++		n_train = len(train_loader.dataset)
-++		train_batch_size = train_loader.batch_size
-++
-++		# load testing, validation
-++		test_loader = loader_k["test"]
-++		n_test = len(test_loader.dataset)
-++		val_loader = loader_k["val"]
-++		n_val = len(val_loader.dataset)
-++		
-++		# create folder for this data split
-++		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-++		fold_dir_exists = osp.exists(fold_dir)
-++		if not fold_dir_exists:
-++			if config.resume:
-++				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-++			else:
-++				os.makedirs(fold_dir)
-++		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-++
-++		# keep track of which data is test data for a given Kfold data split
-++		test_headings = loader_k['test_headings']
-++		headingsFile = osp.join(fold_dir,"test_headings.txt")
-++		with open(headingsFile,'w') as headfile:
-++			for heading in test_headings:
-++				headfile.write(heading+'\n')
-++
-++		# print(checkpoint_name)
-++
-++		train_iter = (start_epoch - 1) * (
-++		len(train_loader.dataset) // train_batch_size
-++		) + 1
-++
-++		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-++
-++		# Setup tensorboard writing
-++		summary_writer = SummaryWriter(logdir)
-++
-++		train_reports = []
-++		report_all = {}
-++		report_all_val = {}
-++
-++		# Saving model at epoch 0 before training
-++		print("saving model at epoch 0 before training ... ")
-++		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-++		print("finished saving model at epoch 0 before training")
-++
-++		num_params = param_count(model)
-++		print(f"Number of model parameters: {num_params}")
-++
-++		# Training
-++		start_t = time.time()
-++
-++		total_train_iters = len(train_loader) * config.train_epochs
-++		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-++		# print('batch',train_batch_size)
-++		# print('ntrain',n_train)
-++		# assert (
-++		# 	n_train % min(train_batch_size, n_train) == 0
-++		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-++
-++		training_failed = False
-++		best_val_loss_so_far = 1e7
-++
-++		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-++			model.train()
-++
-++			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-++
-++				labels = data_dict['label']
-++				data = data_dict['data']
-++
-++				# send data to device
-++				data = nested_to(data,device,torch.float32)
-++				# One-hot encode the data labels
-++				labels_tensor = torch.zeros((len(labels), 2))
-++				for i, label in enumerate(labels):
-++					labels_tensor[i, label] = 1
-++
-++				model_output = model(data) # evaluate model
-++
-++				loss = loss_func(model_output, labels_tensor) # compute loss
-++				outputs = AttrDict({"loss": loss, "prediction": model_output})
-++				outputs.reports = AttrDict({"cross_entropy": loss})
-++
-++				if torch.isnan(outputs.loss): # check for failure in training
-++					if not training_failed:
-++						epoch_of_nan = epoch
-++					if (epoch > epoch_of_nan + 1) and training_failed:
-++						raise ValueError("Loss Nan-ed.")
-++					training_failed = True
-++
-++				model_opt.zero_grad()
-++				outputs.loss.backward(retain_graph=False)
-++
-++				model_opt.step() # move optimizer forward
-++
-++				train_reports.append(parse_reports_cpu(outputs.reports))
-++
-++				if config.log_train_values:
-++					reports = parse_reports(outputs.reports)
-++					if batch_idx % config.report_loss_every == 0:
-++						log_tensorboard(summary_writer, train_iter, reports, "train/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // train_batch_size,
-++							prefix="train",
-++						)
-++						log_tensorboard(
-++							summary_writer,
-++							train_iter,
-++							{"lr": model_opt.param_groups[0]["lr"]},
-++							"hyperparams/",
-++						)
-++				# Logging and evaluation
-++				if (
-++					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-++				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-++					model.eval()
-++					with torch.no_grad():
-++						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-++						# print("REPORTS",reports)
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all == {}:
-++							report_all = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all[d] = [report_all[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "test/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="test",
-++						)
-++
-++						# repeat for validation data
-++						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-++						reports = parse_reports(reports)
-++						reports["time"] = time.time() - start_t
-++						if report_all_val == {}:
-++							report_all_val = deepcopy(reports)
-++
-++							for d in reports.keys():
-++								report_all_val[d] = [report_all_val[d]]
-++						else:
-++							for d in reports.keys():
-++								report_all_val[d].append(reports[d])
-++
-++						log_tensorboard(summary_writer, train_iter, reports, "val/")
-++						print_reports(
-++							reports,
-++							start_t,
-++							epoch,
-++							batch_idx,
-++							len(train_loader.dataset) // config.batch_size,
-++							prefix="val",
-++						)
-++
-++						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-++							save_checkpoint(
-++								checkpoint_name,
-++								f"early_stop",
-++								model,
-++								model_opt,
-++								loss=outputs.loss,
-++							)
-++							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-++
-++					model.train()
-++
-++				train_iter += 1
-++
-++			if epoch % config.save_check_points == 0:
-++				save_checkpoint(
-++					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-++				)
-++
-++		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-++		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-++		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-++
-++	# always save final model
-++	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-++
-++	
-++	if config.save_test_predictions:
-++		pass
-++		# print("Starting to make model predictions on test sets for *final model*.")
-++		# for chunk_len in [5, 100]:
-++		#     start_t_preds = time.time()
-++		#     data_config = SimpleNamespace(
-++		#         **{
-++		#             **config.__dict__["__flags"],
-++		#             **{"chunk_len": chunk_len, "batch_size": 500},
-++		#         }
-++		#     )
-++		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-++		#     test_loader_preds = dataloaders["test"]
-++
-++		#     torch.cuda.empty_cache()
-++		#     with torch.no_grad():
-++		#         preds = []
-++		#         true = []
-++		#         num_datapoints = 0
-++		#         for idx, d in enumerate(test_loader_preds):
-++		#             true.append(d[-1])
-++		#             d = nested_to(d, device, torch.float32)
-++		#             outputs = model(d)
-++
-++		#             pred_zs = outputs.prediction
-++		#             preds.append(pred_zs)
-++
-++		#             num_datapoints += len(pred_zs)
-++
-++		#             if num_datapoints >= 2000:
-++		#                 break
-+ 
-+-config = forge.config()
-++		#         preds = torch.cat(preds, dim=0).cpu()
-++		#         true = torch.cat(true, dim=0).cpu()
-+ 
-+-# Prepare environment
-+-logdir = osp.join(config.results_dir, config.run_name)
-+-logdir, resume_checkpoint = fet.init_checkpoint(
-+-    logdir, config.data_config, config.model_config, config.resume)
-+-checkpoint_name = osp.join(logdir, 'model.ckpt')
-++		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(preds, save_dir)
-+ 
-++		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-++		#         torch.save(true, save_dir)
-+ 
-+-print(logdir)
-++		#         print(
-++		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-++		#         )	
-++		
-+ 
-++if __name__ == "__main__":
-++	main()
-+ 
-diff --git a/checkpoints/feedforward/1/penn_dataset.py b/checkpoints/feedforward/1/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/checkpoints/feedforward/1/penn_dataset.py
-+++ b/checkpoints/feedforward/1/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/georgehulsey_2024.pdf b/georgehulsey_2024.pdf
-deleted file mode 100644
-index 1ab17f6..0000000
-Binary files a/georgehulsey_2024.pdf and /dev/null differ
-diff --git a/penn_dataset.py b/penn_dataset.py
-index aa2f5a0..7f5a4fc 100644
---- a/penn_dataset.py
-+++ b/penn_dataset.py
-@@ -15,6 +15,7 @@ from forge import flags
- # aspects of data managmement
- flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
- flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-+flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
- 
- # Job management
- # flags.DEFINE_integer("batch size",5,"training batch size")
-@@ -109,15 +110,15 @@ def load(config):
-         
-         # set up training DataLoader
-         train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, n_train),num_workers=0,shuffle = True)
-+        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
- 
-         # set up test DataLoader
-         test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, n_test),num_workers=0,shuffle = True)
-+        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
- 
-         # set up val DataLoader
-         val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
--        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, n_val),num_workers=0,shuffle = True)
-+        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-         
- 
-         dataloaders = {'train':train_loader, 
-@@ -125,8 +126,12 @@ def load(config):
-                        'val':val_loader,
-                        'train_inds':train_ind,
-                        'test_inds':test_ind,
--                       'n_val':n_val
-+                       'n_val':n_val,
-+                       'test_headings':list(HEADINGS[test_ind])
-                       }
-         kf_dataloaders.append(dataloaders)
- 
-+        if not config.cross_validate:
-+        	break
-+
-     return kf_dataloaders
-diff --git a/testing.ipynb b/testing.ipynb
-index e5a167b..0110538 100644
---- a/testing.ipynb
-+++ b/testing.ipynb
-@@ -2,7 +2,7 @@
-  "cells": [
-   {
-    "cell_type": "code",
--   "execution_count": 1,
-+   "execution_count": 4,
-    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
-    "metadata": {},
-    "outputs": [],
-@@ -23,7 +23,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 2,
-+   "execution_count": 6,
-    "id": "cad0fdc8-5c35-4610-bba3-b71e60dc1b98",
-    "metadata": {},
-    "outputs": [],
-@@ -35,7 +35,7 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 3,
-+   "execution_count": 7,
-    "id": "ce1b936b-8a7c-426e-a3aa-3c1c38f645de",
-    "metadata": {},
-    "outputs": [
-@@ -54,8 +54,8 @@
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 9,
--   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "execution_count": 5,
-+   "id": "4469cddf-4dac-4468-be88-241d440401c3",
-    "metadata": {},
-    "outputs": [
-     {
-@@ -67,35 +67,98 @@
-     }
-    ],
-    "source": [
--    "model = fet.load(\"basic_feedforward.py\",config)"
-+    "model,modelname = fet.load(\"basic_feedforward.py\",config)"
-    ]
-   },
-   {
-    "cell_type": "code",
--   "execution_count": 10,
--   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "execution_count": 13,
-+   "id": "7c9a9fe9-f5e8-456a-b964-4be13027725b",
-    "metadata": {},
-    "outputs": [
-     {
-      "data": {
-       "text/plain": [
--       "PerceptronNN(\n",
--       "  (fc1): Linear(in_features=39, out_features=128, bias=True)\n",
--       "  (fc2): Linear(in_features=128, out_features=64, bias=True)\n",
--       "  (fc3): Linear(in_features=64, out_features=64, bias=True)\n",
--       "  (fc4): Linear(in_features=64, out_features=2, bias=True)\n",
--       ")"
-+       "array([114170,    904])"
-       ]
-      },
--     "execution_count": 10,
-+     "execution_count": 13,
-      "metadata": {},
-      "output_type": "execute_result"
-     }
-    ],
-    "source": [
--    "model"
-+    "np.bincount(loaddat[0]['train'].dataset.all_labels)"
-    ]
-   },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 1,
-+   "id": "e862b7e2-57f5-44bf-bcf1-a91160ba66cc",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "ename": "FileNotFoundError",
-+     "evalue": "[Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)",
-+     "output_type": "error",
-+     "traceback": [
-+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
-+      "Cell \u001b[0;32mIn[1], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m./checkpoints/feedforward/2/data_fold1/results_dict.h5\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Replace 'your_file.h5' with the actual path to your file\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m f \u001b[38;5;241m=\u001b[39m  \u001b[43mh5py\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mFile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m \n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Get information about the data stored in the file\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mKeys:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mlist\u001b[39m(f\u001b[38;5;241m.\u001b[39mkeys()))\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:562\u001b[0m, in \u001b[0;36mFile.__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\u001b[0m\n\u001b[1;32m    553\u001b[0m     fapl \u001b[38;5;241m=\u001b[39m make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n\u001b[1;32m    554\u001b[0m                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n\u001b[1;32m    555\u001b[0m                      alignment_threshold\u001b[38;5;241m=\u001b[39malignment_threshold,\n\u001b[1;32m    556\u001b[0m                      alignment_interval\u001b[38;5;241m=\u001b[39malignment_interval,\n\u001b[1;32m    557\u001b[0m                      meta_block_size\u001b[38;5;241m=\u001b[39mmeta_block_size,\n\u001b[1;32m    558\u001b[0m                      \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m    559\u001b[0m     fcpl \u001b[38;5;241m=\u001b[39m make_fcpl(track_order\u001b[38;5;241m=\u001b[39mtrack_order, fs_strategy\u001b[38;5;241m=\u001b[39mfs_strategy,\n\u001b[1;32m    560\u001b[0m                      fs_persist\u001b[38;5;241m=\u001b[39mfs_persist, fs_threshold\u001b[38;5;241m=\u001b[39mfs_threshold,\n\u001b[1;32m    561\u001b[0m                      fs_page_size\u001b[38;5;241m=\u001b[39mfs_page_size)\n\u001b[0;32m--> 562\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mmake_fid\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muserblock_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfcpl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswmr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswmr\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    564\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(libver, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    565\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_libver \u001b[38;5;241m=\u001b[39m libver\n",
-+      "File \u001b[0;32m/Applications/miniconda3/envs/lietransformer/lib/python3.9/site-packages/h5py/_hl/files.py:235\u001b[0m, in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m swmr \u001b[38;5;129;01mand\u001b[39;00m swmr_support:\n\u001b[1;32m    234\u001b[0m         flags \u001b[38;5;241m|\u001b[39m\u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mACC_SWMR_READ\n\u001b[0;32m--> 235\u001b[0m     fid \u001b[38;5;241m=\u001b[39m \u001b[43mh5f\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfapl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfapl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr+\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    237\u001b[0m     fid \u001b[38;5;241m=\u001b[39m h5f\u001b[38;5;241m.\u001b[39mopen(name, h5f\u001b[38;5;241m.\u001b[39mACC_RDWR, fapl\u001b[38;5;241m=\u001b[39mfapl)\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:54\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/_objects.pyx:55\u001b[0m, in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n",
-+      "File \u001b[0;32mh5py/h5f.pyx:102\u001b[0m, in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n",
-+      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] Unable to open file (unable to open file: name = './checkpoints/feedforward/2/data_fold1/results_dict.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"
-+     ]
-+    }
-+   ],
-+   "source": [
-+    "import h5py\n",
-+    "\n",
-+    "file_path = \"./checkpoints/feedforward/2/data_fold1/results_dict.h5\"\n",
-+    "# Replace 'your_file.h5' with the actual path to your file\n",
-+    "f =  h5py.File(file_path, 'r') \n",
-+    "\n",
-+    "    # Get information about the data stored in the file\n",
-+    "print(\"Keys:\", list(f.keys()))  # List the top-level datasets and groups\n",
-+    "\n",
-+    "    # # Access a dataset by its name\n",
-+    "    # dataset_name = \"your_dataset_name\"\n",
-+    "    # if dataset_name in f:\n",
-+    "    #     dataset = f[dataset_name]\n",
-+    "    #     print(\"Dataset shape:\", dataset.shape)\n",
-+    "    #     print(\"Dataset dtype:\", dataset.dtype)\n",
-+    "\n",
-+    "    #     # Access the data as a NumPy array\n",
-+    "    #     data = dataset[:]  # Read the entire dataset\n",
-+    "\n",
-+    "    #     # You can now work with the data as needed, for example:\n",
-+    "    #     # Perform calculations, visualizations, etc.\n",
-+    "    # else:\n",
-+    "    #     print(f\"Dataset '{dataset_name}' not found in the file.\")"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": 13,
-+   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-+   "metadata": {},
-+   "outputs": [
-+    {
-+     "data": {
-+      "text/plain": [
-+       "<generator object Module.parameters at 0x3007207b0>"
-+      ]
-+     },
-+     "execution_count": 13,
-+     "metadata": {},
-+     "output_type": "execute_result"
-+    }
-+   ],
-+   "source": []
-+  },
-   {
-    "cell_type": "code",
-    "execution_count": null,
-diff --git a/train.py b/train.py
-index c266102..def250b 100644
---- a/train.py
-+++ b/train.py
-@@ -1,49 +1,451 @@
- from os import path as osp
-+import os
-+import numpy as np
-+import time
- 
- import torch
-+import torch.nn as nn
- import torch.nn.functional as F
- import torch.optim as optim
--
--import numpy as np
-+from torch.utils.tensorboard import SummaryWriter
- 
- import forge
- from forge import flags
- import forge.experiment_tools as fet
- 
-+from train_tools import (
-+	log_tensorboard,
-+	parse_reports,
-+	parse_reports_cpu,
-+	print_reports,
-+	load_checkpoint,
-+	save_checkpoint,
-+	nested_to,
-+	param_count,
-+)
-+
-+from copy import deepcopy
-+from attrdict import AttrDict
-+import deepdish as dd
-+from tqdm import tqdm
-+
-+# For reproducibility while researching, but might affect speed!
-+torch.backends.cudnn.deterministic = True
-+torch.backends.cudnn.benchmark = False
-+torch.manual_seed(0)
-+
- 
- # Job config
- flags.DEFINE_string('data_config', 'penn_dataset.py',
--                    'Path to a data config file.')
-+					'Path to a data config file.')
- flags.DEFINE_string('model_config', 'basic_feedforward.py',
--                    'Path to a model config file.')
-+					'Path to a model config file.')
- flags.DEFINE_string('results_dir', 'checkpoints',
--                    'Top directory for all experimental results.')
--flags.DEFINE_string('run_name', 'feedforward',
--                    'Name of this job and name of results folder.')
-+					'Top directory for all experimental results.')
-+flags.DEFINE_string('run_name', 'testing',
-+					'Name of this job and name of results folder.')
- flags.DEFINE_boolean('resume', False, 'Tries to resume a job if True.')
- 
- # Logging config
- flags.DEFINE_integer('report_loss_every', 50,
--                     'Number of iterations between reporting minibatch loss.')
--flags.DEFINE_integer('train_epochs', 20, 'Maximum number of training epochs.')
-+					 'Number of iterations between reporting minibatch loss.')
-+flags.DEFINE_integer('train_epochs', 10, 'Maximum number of training epochs.')
-+flags.DEFINE_integer(
-+	"save_check_points",
-+	50,
-+	"frequency with which to save checkpoints, in number of epoches.",
-+)
-+flags.DEFINE_boolean("log_train_values", True, "Logs train values if True.")
-+flags.DEFINE_integer(
-+	"total_evaluations",
-+	100,
-+	"Maximum number of evaluations on test and validation data during training.",
-+)
-+flags.DEFINE_boolean(
-+	"save_test_predictions",
-+	False,
-+	"Makes and saves test predictions on one or more test sets (e.g. 5-step and 100-step predictions) at the end of training.",
-+)
-+flags.DEFINE_boolean(
-+    "log_val_test", True, "Turns off computation of validation and test errors."
-+)
- 
- # Experiment config
- flags.DEFINE_integer('batch_size', 100, 'Mini-batch size.')
--flags.DEFINE_float('learning_rate', 1e-5, 'SGD learning rate.')
-+flags.DEFINE_float("learning_rate", 1e-4, "Adam learning rate.")
-+flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
-+flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
- 
- # Specific config options
- flags.DEFINE_integer("input_size",39,"Input shape to model")
- 
-+#########################################################################################
-+
-+def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
-+	# this function does not account for class weights when evaluating cross-entropy loss.
-+	# however, they are accounted for when evaluating training loss
-+	reports = None
-+	for data in loader:
-+		labels = data['label']
-+		inputs = nested_to(data['data'],device,torch.float32)
-+		
-+		labels_tensor = torch.zeros((len(labels), 2))
-+		for i, label in enumerate(labels):
-+			labels_tensor[i, label] = 1
-+
-+		model_output = model(inputs) # evaluate model
-+
-+		loss = loss_func(model_output, labels_tensor) # compute loss
-+		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
-+		outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+		if reports is None:
-+			reports = {k: v.detach().clone().cpu() for k, v in outputs.reports.items()}
-+		else:
-+			for k, v in outputs.reports.items():
-+				reports[k] += v.detach().clone().cpu()
-+
-+	for k, v in reports.items():
-+		reports[k] = v / len(
-+			loader
-+		)  # SZ: note this can be slightly incorrect if mini-batch sizes vary (if batch_size doesn't divide train_size), but approximately correct.
-+
-+	# reports['test_headings'] = np.array(headings)
-+
-+	return reports
-+
-+def main():
-+
-+	config = forge.config()
-+
-+	# Set device
-+	if torch.cuda.is_available():
-+		device = f"cuda:{config.device}"
-+		torch.cuda.set_device(device)
-+	else:
-+		device = "cpu" # can change this to MPS on M1 Macs
-+
-+	# Load data
-+	data_name = "penn_data"
-+	kfold_loaders = fet.load(config.data_config, config)
-+
-+	# Load model
-+	model,model_name = fet.load(config.model_config, config)
-+	model = model.to(device)
-+
-+	# Prepare environment
-+	params_in_run_name = [
-+		("batch_size", "bs"),
-+		("learning_rate", "lr"),
-+		("n_train", "ntrain"),
-+		("include_coords",'inclx'),
-+		("input_size",'inpsize'),
-+		("cross_validate",'crval'),
-+		("train_epochs",'n_epochs'),
-+	]
-+
-+	run_name = ""  # config.run_name
-+	for config_param in params_in_run_name:
-+		attr = config_param[0]
-+		abbrev = config_param[1]
-+
-+		if hasattr(config, attr):
-+			run_name += abbrev
-+			run_name += str(getattr(config, attr))
-+			run_name += "_"
-+
-+	results_folder_name = osp.join(
-+		data_name,
-+		model_name,
-+		config.run_name,
-+		run_name,
-+	)
-+
-+	# Prepare environment
-+	logdir = osp.join(config.results_dir, results_folder_name.replace(".", "_"))
-+	logdir, resume_checkpoint = fet.init_checkpoint(
-+		logdir, config.data_config, config.model_config, config.resume)
-+
-+	print("Checkpoint directory:",logdir)
-+
-+	# Print flags
-+	fet.print_flags()
-+	# Print model info
-+	print(model)
-+
-+	# Setup optimizer
-+	model_params = model.parameters()
-+	opt_learning_rate = config.learning_rate
-+	model_opt = torch.optim.Adam(
-+		model_params, lr=opt_learning_rate, betas=(config.beta1, config.beta2)
-+	)
-+	print("Model Optimizer:")
-+	print(model_opt)
-+
-+	# Try to restore model and optimizer from checkpoint
-+	if resume_checkpoint is not None:
-+		start_epoch = load_checkpoint(resume_checkpoint, model, model_opt)
-+	else:
-+		start_epoch = 1
-+
-+	n_folds = len(kfold_loaders)
-+	print("Doing {}-fold cross-validation.".format(n_folds))
-+
-+	# KFOLD TRAINING LOOP
-+	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
-+
-+		print("Training fold {}...".format(k+1))
-+
-+		# load the training data
-+		train_loader = loader_k["train"]
-+		n_train = len(train_loader.dataset)
-+		train_batch_size = train_loader.batch_size
-+
-+		# load testing, validation
-+		test_loader = loader_k["test"]
-+		n_test = len(test_loader.dataset)
-+		val_loader = loader_k["val"]
-+		n_val = len(val_loader.dataset)
-+
-+		train_class_counts = np.bincount(train_loader.dataset.all_labels)
-+		train_total_counts = sum(train_class_counts)
-+		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
-+
-+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-+				
-+		# create folder for this data split
-+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-+		fold_dir_exists = osp.exists(fold_dir)
-+		if not fold_dir_exists:
-+			if config.resume:
-+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-+			else:
-+				os.makedirs(fold_dir)
-+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
-+
-+		# keep track of which data is test data for a given Kfold data split
-+		test_headings = loader_k['test_headings']
-+		headingsFile = osp.join(fold_dir,"test_headings.txt")
-+		with open(headingsFile,'w') as headfile:
-+			for heading in test_headings:
-+				headfile.write(heading+'\n')
-+
-+		# print(checkpoint_name)
-+
-+		train_iter = (start_epoch - 1) * (
-+		len(train_loader.dataset) // train_batch_size
-+		) + 1
-+
-+		print("Starting training at epoch = {}, iter = {}".format(start_epoch, train_iter))
-+
-+		# Setup tensorboard writing
-+		summary_writer = SummaryWriter(logdir)
-+
-+		train_reports = []
-+		report_all = {}
-+		report_all_val = {}
-+
-+		# Saving model at epoch 0 before training
-+		print("saving model at epoch 0 before training ... ")
-+		save_checkpoint(checkpoint_name, 0, model, model_opt, loss=0.0)
-+		print("finished saving model at epoch 0 before training")
-+
-+		num_params = param_count(model)
-+		print(f"Number of model parameters: {num_params}")
-+
-+		# Training
-+		start_t = time.time()
-+
-+		total_train_iters = len(train_loader) * config.train_epochs
-+		iters_per_eval = max(1, int(total_train_iters / config.total_evaluations))
-+		# print('batch',train_batch_size)
-+		# print('ntrain',n_train)
-+		# assert (
-+		# 	n_train % min(train_batch_size, n_train) == 0
-+		# ), "Batch size doesn't divide dataset size. Can be inaccurate for loss computation (see below)."
-+
-+		training_failed = False
-+		best_val_loss_so_far = 1e7
-+
-+		for epoch in tqdm(range(start_epoch, config.train_epochs + 1)):
-+			model.train()
-+
-+			for batch_idx, data_dict in enumerate(train_loader): # Loop over batched data
-+
-+				labels = data_dict['label']
-+				data = data_dict['data']
-+
-+				# send data to device
-+				data = nested_to(data,device,torch.float32)
-+				# One-hot encode the data labels
-+				labels_tensor = torch.zeros((len(labels), 2))
-+				for i, label in enumerate(labels):
-+					labels_tensor[i, label] = 1
-+
-+				model_output = model(data) # evaluate model
-+
-+				loss = loss_func(model_output, labels_tensor) # compute loss
-+				outputs = AttrDict({"loss": loss, "prediction": model_output})
-+				outputs.reports = AttrDict({"cross_entropy": loss})
-+
-+				if torch.isnan(outputs.loss): # check for failure in training
-+					if not training_failed:
-+						epoch_of_nan = epoch
-+					if (epoch > epoch_of_nan + 1) and training_failed:
-+						raise ValueError("Loss Nan-ed.")
-+					training_failed = True
-+
-+				model_opt.zero_grad()
-+				outputs.loss.backward(retain_graph=False)
-+
-+				model_opt.step() # move optimizer forward
-+
-+				train_reports.append(parse_reports_cpu(outputs.reports))
-+
-+				if config.log_train_values:
-+					reports = parse_reports(outputs.reports)
-+					if batch_idx % config.report_loss_every == 0:
-+						log_tensorboard(summary_writer, train_iter, reports, "train/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // train_batch_size,
-+							prefix="train",
-+						)
-+						log_tensorboard(
-+							summary_writer,
-+							train_iter,
-+							{"lr": model_opt.param_groups[0]["lr"]},
-+							"hyperparams/",
-+						)
-+				# Logging and evaluation
-+				if (
-+					train_iter % iters_per_eval == 0 or (train_iter == total_train_iters)
-+				) and config.log_val_test:  # batch_idx % config.evaluate_every == 0:
-+					model.eval()
-+					with torch.no_grad():
-+						reports = evaluate(model, test_loader, device,fold = k,headings = loader_k['test_headings'])
-+						# print("REPORTS",reports)
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all == {}:
-+							report_all = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all[d] = [report_all[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "test/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="test",
-+						)
-+
-+						# repeat for validation data
-+						reports = evaluate(model, val_loader, device,fold = k,headings = loader_k['test_headings'])
-+						reports = parse_reports(reports)
-+						reports["time"] = time.time() - start_t
-+						if report_all_val == {}:
-+							report_all_val = deepcopy(reports)
-+
-+							for d in reports.keys():
-+								report_all_val[d] = [report_all_val[d]]
-+						else:
-+							for d in reports.keys():
-+								report_all_val[d].append(reports[d])
-+
-+						log_tensorboard(summary_writer, train_iter, reports, "val/")
-+						print_reports(
-+							reports,
-+							start_t,
-+							epoch,
-+							batch_idx,
-+							len(train_loader.dataset) // config.batch_size,
-+							prefix="val",
-+						)
-+
-+						if report_all_val["cross_entropy"][-1] < best_val_loss_so_far:
-+							save_checkpoint(
-+								checkpoint_name,
-+								f"early_stop",
-+								model,
-+								model_opt,
-+								loss=outputs.loss,
-+							)
-+							best_val_loss_so_far = report_all_val["cross_entropy"][-1]
-+
-+					model.train()
-+
-+				train_iter += 1
-+
-+			if epoch % config.save_check_points == 0:
-+				save_checkpoint(
-+					checkpoint_name, train_iter, model, model_opt, loss=outputs.loss
-+				)
-+		print('train_reports',train_reports)
-+		print("report_all",report_all)
-+		dd.io.save(fold_dir + "/results_dict_train.h5", train_reports)
-+		dd.io.save(fold_dir + "/results_dict.h5", report_all)
-+		dd.io.save(fold_dir + "/results_dict_val.h5", report_all_val)
-+
-+	# always save final model
-+	save_checkpoint(checkpoint_name, train_iter, model, model_opt, loss=outputs.loss)
-+
-+	
-+	if config.save_test_predictions:
-+		pass
-+		# print("Starting to make model predictions on test sets for *final model*.")
-+		# for chunk_len in [5, 100]:
-+		#     start_t_preds = time.time()
-+		#     data_config = SimpleNamespace(
-+		#         **{
-+		#             **config.__dict__["__flags"],
-+		#             **{"chunk_len": chunk_len, "batch_size": 500},
-+		#         }
-+		#     )
-+		#     dataloaders, data_name = fet.load(config.data_config, config=data_config)
-+		#     test_loader_preds = dataloaders["test"]
-+
-+		#     torch.cuda.empty_cache()
-+		#     with torch.no_grad():
-+		#         preds = []
-+		#         true = []
-+		#         num_datapoints = 0
-+		#         for idx, d in enumerate(test_loader_preds):
-+		#             true.append(d[-1])
-+		#             d = nested_to(d, device, torch.float32)
-+		#             outputs = model(d)
-+
-+		#             pred_zs = outputs.prediction
-+		#             preds.append(pred_zs)
-+
-+		#             num_datapoints += len(pred_zs)
-+
-+		#             if num_datapoints >= 2000:
-+		#                 break
- 
--config = forge.config()
-+		#         preds = torch.cat(preds, dim=0).cpu()
-+		#         true = torch.cat(true, dim=0).cpu()
- 
--# Prepare environment
--logdir = osp.join(config.results_dir, config.run_name)
--logdir, resume_checkpoint = fet.init_checkpoint(
--    logdir, config.data_config, config.model_config, config.resume)
--checkpoint_name = osp.join(logdir, 'model.ckpt')
-+		#         save_dir = osp.join(logdir, f"traj_preds_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(preds, save_dir)
- 
-+		#         save_dir = osp.join(logdir, f"traj_true_{chunk_len}_steps_2k_test.pt")
-+		#         torch.save(true, save_dir)
- 
--print(logdir)
-+		#         print(
-+		#             f"Completed making test predictions for chunk_len = {chunk_len} in {time.time() - start_t_preds:.2f} seconds."
-+		#         )	
-+		
- 
-+if __name__ == "__main__":
-+	main()
- 
diff --git a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/penn_dataset.py b/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/penn_dataset.py
deleted file mode 100644
index 7f5a4fc..0000000
--- a/checkpoints/penn_data/feedforward/testing/bs100_lr0_0001_inclxFalse_inpsize39_crvalFalse_n_epochs10_/1/penn_dataset.py
+++ /dev/null
@@ -1,137 +0,0 @@
-import os
-import torch
-import pandas as pd
-import numpy as np
-
-from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
-from sklearn.model_selection import RepeatedKFold
-
-from os import path as osp
-import forge
-from forge import flags
-
-
-# aspects of data managmement
-flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
-flags.DEFINE_boolean("rescale", True, "Rescales intensities")
-flags.DEFINE_boolean("cross_validate",False,"Do K-fold cross-validation")
-
-# Job management
-# flags.DEFINE_integer("batch size",5,"training batch size")
-flags.DEFINE_float("train_split",0.8,'Fraction of data to use for training.')
-flags.DEFINE_integer("n_repeats",1,"Times to repeat K-fold cross-validation")
-flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproducibility")
-
-# "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
-LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None
-
-DATAFOLDER = './penn_data'
-
-HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
-
-
-class PennData(Dataset):
-
-    def __init__(self,path_to_data,headings,k_inds = None,include_coords = True,rescale = True,spectra_prefix = "kvals_fuse_rotate_",label_prefix = 'labels_fuse_rotate_'):
-        
-        self.data_dir = path_to_data
-        self.headings = headings
-
-        df_list = []
-        label_list = []
-        for heading in self.headings: # for each datafile heading,
-            data_name = osp.join(self.data_dir,spectra_prefix + heading+'.csv') # read kvals
-            df_temp = pd.read_csv(data_name,header=None)
-            df_list.append(df_temp)
-
-            label_name = osp.join(self.data_dir,label_prefix + heading + '.csv') # read labels
-            label_temp = pd.read_csv(label_name,header=None, names=['label'])
-            label_list.append(label_temp)
-
-        df = pd.concat(df_list, ignore_index=True)
-
-        labels = pd.concat(label_list, ignore_index=True)
-        df = pd.concat([labels, df], axis="columns") # Append labels to data
-
-        all_labels = df['label'].to_numpy()
-        all_data = df.iloc[:,1:].to_numpy()
-
-        if rescale: # rescale (normalize) wavelength intensity data
-            lambdas = all_data[:,2:] # wavelengths
-            lam_std = np.std(lambdas, axis=0)  # Calculate standard deviation along columns
-            lam_mean = np.mean(lambdas, axis=0)  # Calculate mean along columns
-            lambdas_rescaled = (lambdas - lam_mean) / lam_std 
-            all_data[:,2:] = lambdas_rescaled
-
-        if not include_coords: # removes x,y coordinates from data
-            all_data = all_data[:,2:]
-        
-        if k_inds != None: # in this case, only use subset of wavelengths
-            all_data = all_data[:,np.array(k_inds)]
-
-        self.all_data = all_data
-        self.all_labels = all_labels
-
-    def __len__(self):
-        return len(self.all_data)
-
-    def __getitem__(self,i):
-        state = {'label':self.all_labels[i],'data':self.all_data[i]}
-        return state
-
-    def __getstate__(self):
-        state = {
-            'data': self.all_data,
-            'label': self.all_labels,
-                }
-        return state
-
-    def __setstate__(self, state):
-        # Set the object's state from the provided dictionary
-        self.all_data = state['data']
-        self.all_labels = state['label']
-        
-
-
-def load(config):
-
-    n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
-
-    kf = RepeatedKFold(n_splits = n_splits, n_repeats = config.n_repeats, random_state = config.split_seed) # K-fold cross validation
-
-    kf_dataloaders = []
-
-    for i, (train_ind, test_ind) in enumerate(kf.split(HEADINGS)): # for each K-fold split, 
-        n_val = len(test_ind)//2
-        n_test = len(test_ind)-n_val   
-        n_train = len(train_ind)
-        
-        # set up training DataLoader
-        train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
-
-        # set up test DataLoader
-        test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
-
-        # set up val DataLoader
-        val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-        val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
-        
-
-        dataloaders = {'train':train_loader, 
-                       'test':test_loader,
-                       'val':val_loader,
-                       'train_inds':train_ind,
-                       'test_inds':test_ind,
-                       'n_val':n_val,
-                       'test_headings':list(HEADINGS[test_ind])
-                      }
-        kf_dataloaders.append(dataloaders)
-
-        if not config.cross_validate:
-        	break
-
-    return kf_dataloaders
diff --git a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store
index 724b935..6ba4af9 100644
Binary files a/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store and b/checkpoints/penn_data/gpt-FCNN/hyperparam_testing/.DS_Store differ
diff --git a/eval_tools.py b/eval_tools.py
index b09c950..d6c161f 100644
--- a/eval_tools.py
+++ b/eval_tools.py
@@ -1,5 +1,6 @@
 import torch
 import numpy as np
+np.object = object # weird deprecation in current numpy version
 import json
 import torch.nn.functional as F
 import deepdish as dd
@@ -12,6 +13,7 @@ from os import path as osp
 import os
 import re
 import h5py
+from tqdm import tqdm
 
 import forge
 from forge import flags
@@ -20,9 +22,11 @@ from forge import load_from_checkpoint
 from attrdict import AttrDict
 
 from train_tools import param_count,nested_to
+from scipy.interpolate import interp1d
+from scipy.ndimage import uniform_filter1d
 
 ###########################################################################
-# Binary classification functions
+# Binary classification functions and others
 
 def get_acc(arr): # get accuracy of set of confusion matrices
     # arr.shape (n_thresholds,2,2)
@@ -44,11 +48,13 @@ def get_F1(arr): # get F1-score of set of confusion matrices
     # arr.shape (n_thresholds,2,2)
     return np.array([2*x[1,1]/(2*x[1,1] + x[0,1] + x[1,0]) if (2*x[1,1] + x[0,1] + x[1,0]) > 0 else 0 for x in arr])
 
+def moving_average(data, window_size):
+    return uniform_filter1d(data, size=window_size, mode='nearest')
 
 ###########################################################################
 # Main function for extracting metrics from a model run
 
-def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,nonlin_thresholds = False):
+def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,nonlin_thresholds = False,write_file = True,read_file = True):
     # run directory should contain folders 1,2,3... 
     if nonlin_thresholds:
         num_elements = n_thresholds
@@ -77,6 +83,12 @@ def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,n
 
     working_dir = osp.join(run_dir,str(checkpoint_num))
     print("Getting metrics from",working_dir)
+    metrics_fname = osp.join(working_dir,'metrics.h5')
+
+    if osp.exists(metrics_fname) and read_file: # check if metrics file exists and read metrics
+        print("Found info file, reading from from file.")
+        return dd.io.load(metrics_fname)
+    
     flag_file = osp.join(working_dir,'flags.json')
     with open(flag_file, 'r') as file:
         flag_info = json.load(file)
@@ -92,7 +104,7 @@ def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,n
     model,model_name = fet.load(model_config,config)
 
     # load data
-    kfold_loaders = fet.load(data_config, config)
+    kfold_loaders,k_inds = fet.load(data_config, config)
     nfolds = len(kfold_loaders)
     print("Data is {}-fold partitioned.".format(nfolds))
 
@@ -143,35 +155,52 @@ def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,n
         model.load_state_dict(model_wts['model_state_dict'])
         model.eval()
 
-        # set up model to make binary int class predictions from logit output
-        # def model_preds(x,threshold = 0.5,softmax = True):
-        #     if softmax:
-        #         probs = np.array(F.softmax(model(x),dim=1))
-        #     else:
-        #         probs = np.array(model(x))
-        #     print(probs[:,1])
-        #     preds = np.zeros(len(probs),dtype = int)
-        #     preds[probs[:,1] > threshold] = 1 # CONFUSED ABOUT DIRECTION OF THIS INEQ
-        #     return torch.tensor(preds)
-
         for subset in conf_mats.keys(): # loop over train,test,val data subsets
             print("in subset",subset)
             loader = loader_dict[subset] # specific dataloader
-            
-            all_labels = torch.tensor(loader.dataset.labels) # all predictions
-            # print('truelabels counts',np.bincount(all_labels))
-            all_data = torch.tensor(loader.dataset.data).float() # all inputs
 
-            with torch.no_grad():
-                if softmax:
-                    probs = np.array(F.softmax(model(all_data),dim=1))
+            # evaluate model with batched data
+            all_labels = []
+            probs = []
+            for dset in tqdm(loader):
+                all_labels.append(dset['label'])
+                batch_data = dset['data'].float()
+                if config.include_coords:
+                    batch_coords = dset['coords'].float()
+                    model_input = {'data':batch_data,'coords':batch_coords}
                 else:
-                    probs = np.array(model(all_data))
+                    model_input = {'data':batch_data}#batch_data
+
+                with torch.no_grad():
+                    if softmax:
+                        batch_probs = F.softmax(model(model_input),dim=1)
+                    else:
+                        batch_probs = model(model_input)
+                probs.append(batch_probs)
 
+            all_labels = torch.cat(all_labels,dim = 0)
+            probs = np.array(torch.cat(probs,dim = 0))
+            
+            # all_labels = torch.tensor(loader.dataset.labels) # all predictions
+            # # print('truelabels counts',np.bincount(all_labels))
+            # all_data = torch.tensor(loader.dataset.data).float() # all inputs
+
+            # if config.include_coords:
+            #     model_input = {'data':all_data,'coords':torch.tensor(loader.dataset.coords).float()}
+            # else:
+            #     model_input = all_data
+            # return model_input, model
+            # with torch.no_grad():
+            #     if softmax:
+            #         print('attempting to evaluated mode')
+            #         probs = np.array(F.softmax(model(model_input),dim=1))
+            #     else:
+            #         probs = np.array(model(model_input))
+
+            print("model evaluated.")
             for ii,t in enumerate(thresholds): # for all classification thresholds,
                  # make binary predicitions at this threshold,
-                    # print('threshold',t)
-                    # all_preds = model_preds(all_data,threshold = t)
+                    
                 all_preds = np.zeros(len(probs),dtype = int)
                 
                 all_preds[probs[:,1] > t] = 1 # as threshold increases, fewer positives (FPR-> 0)
@@ -198,7 +227,10 @@ def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,n
     interpolated_y_values = np.array([interp1d(x, y, bounds_error=False, fill_value='extrapolate')(common_t) for x, y in zip(test_times, test_losses)])
     average_loss = np.mean(interpolated_y_values, axis=0)
     
-    results['avg_loss'] = (common_t,average_loss)
+    results['avg_test_loss'] = (common_t,average_loss)
+    
+    # common_iter = 
+    # results['avg_train_loss']
     
     print("Models evaluated. Computing metrics...")
     for subset in conf_mats.keys(): # for train, test, val
@@ -214,6 +246,12 @@ def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,n
         results[subset+'_fpr'] = get_fpr(thresh_mats)
         # compute F1 score
         results[subset+'_F1'] = get_F1(thresh_mats)
+
+    if write_file:
+        fname = osp.join(working_dir,'metrics.h5')
+        print("Writing metrics to file",fname)
+        dd.io.save(fname,results)
+        
     print("Done.")
     return results
 
@@ -223,19 +261,73 @@ def get_metrics(run_dir,n_thresholds =100,checkpoint_num = None,softmax = True,n
 
 
 # PLOT TEST LOSS VS TIME
-def plot_loss(run_info,**kwargs):
+def plot_test_loss(run_info,**kwargs):
     times = run_info['test_time']
     losses = run_info['test_loss']
-    ts,avg = run_info['avg_loss']
+    ts,avg = run_info['avg_test_loss']
     for k in range(len(times)):
         plt.plot(times[k],losses[k],label = 'fold {} loss'.format(k+1))
     plt.plot(ts,avg,'k--',linewidth = 2,label = 'avg loss')
     plt.xlabel("training time")
     # plt.xscale('log')
     plt.ylabel("test loss")
+    plt.title("Test loss vs train time")
     plt.legend()
     plt.show()
 
+def plot_train_test_loss(run_info):
+    ts = run_info['train_iter']
+    ls = run_info['train_loss']
+    tts,avg = run_info['avg_test_loss']
+    
+    plt.plot(tts,avg,linewidth = 2,label = 'avg test loss')
+    min_time = min([np.min(t) for t in ts])
+    max_time = max([np.max(t) for t in ts])
+    ts_common = np.linspace(0, 1, 1000)
+    interpolated_arrays = []
+    cutoff = 10
+    for i,(t, l) in enumerate(zip(ts, ls)):
+        t = t[cutoff:]/max(t)
+        l = l[cutoff:]
+        smoothed_l = moving_average(l, 30)
+        interp_func = interp1d(t, smoothed_l, bounds_error=False, fill_value=(smoothed_l[0], smoothed_l[-1]))
+        interpolated_arrays.append(interp_func(ts_common))
+    
+    interpolated_arrays = np.array(interpolated_arrays)
+    ls_common = np.nanmean(interpolated_arrays, axis=0)
+    
+    plt.plot(ts_common[cutoff:],ls_common[cutoff:],linewidth = 2,label = "avg train loss")
+    plt.xlabel("progress fraction")
+    plt.ylabel("Cross-entropy loss")
+    plt.title("Test vs train loss")
+    plt.legend()
+
+# PLOT TRAIN LOSS VS ITER
+def plot_train_loss(run_info):
+    ts = run_info['train_iter']
+    ls = run_info['train_loss']
+    min_time = min([np.min(t) for t in ts])
+    max_time = max([np.max(t) for t in ts])
+    ts_common = np.linspace(min_time, max_time, 1000)
+    interpolated_arrays = []
+    cutoff = 10
+    for i,(t, l) in enumerate(zip(ts, ls)):
+        t = t[cutoff:]
+        l = l[cutoff:]
+        smoothed_l = moving_average(l, 50)
+        plt.plot(t,smoothed_l,label = "fold {}".format(i+1))
+        interp_func = interp1d(t, smoothed_l, bounds_error=False, fill_value=(smoothed_l[0], smoothed_l[-1]))
+        interpolated_arrays.append(interp_func(ts_common))
+    
+    interpolated_arrays = np.array(interpolated_arrays)
+    ls_common = np.nanmean(interpolated_arrays, axis=0)
+    
+    plt.plot(ts_common[cutoff:],ls_common[cutoff:], 'k--',linewidth = 2,label = "avg loss")
+    plt.xlabel("training iteration")
+    plt.ylabel("training loss")
+    plt.title("Training loss vs. iteration")
+    plt.legend()
+
 # PLOT ACCURACY VS THRESHOLD
 def plot_accuracy(run_info,**kwargs):
     ts = run_info['thresholds']
@@ -250,17 +342,19 @@ def plot_accuracy(run_info,**kwargs):
     plt.show()
 
 # PLOT F1 SCORE VS THRESHOLD
-def plot_F1(run_info,**kwargs):
+def plot_F1(run_info,get_max = True,**kwargs):
     ts = run_info['thresholds']
     subsets = ['test']
     for subset in subsets:
         accs = run_info[subset+'_F1']
+        thresh_max = ts[np.argmax(accs)]
         plt.plot(ts,accs,label = subset,**kwargs)
     plt.xlabel("classification threshold")
     plt.ylabel("F1 Score")
     plt.title("F1 score vs. threshold")
     plt.legend()
     plt.show()
+    print("F1 score maximized at threshold",np.round(thresh_max,decimals = 3))
 
 # PLOT ROC CURVES
 def plot_ROC(run_info,**kwargs):
@@ -269,7 +363,7 @@ def plot_ROC(run_info,**kwargs):
         tprs = np.append(run_info[subset+'_tpr'][::-1],1)
         fprs = np.append(run_info[subset+'_fpr'][::-1],1)
         auc = np.trapz(tprs,fprs)
-        plt.plot(fprs,tprs,label = subset + "; AUC = {}".format(auc),**kwargs)
+        plt.plot(fprs,tprs,label = subset + "; AUC = {}".format(np.round(auc,decimals = 4)),**kwargs)
     line = np.linspace(0,1,100)
     plt.plot(line,line,'k--')
     plt.xlabel("False positive rate")
diff --git a/penn_dataset.py b/penn_dataset.py
index 41d02d6..b822b21 100644
--- a/penn_dataset.py
+++ b/penn_dataset.py
@@ -4,7 +4,7 @@ import pandas as pd
 import numpy as np
 
 from torchvision import datasets, transforms
-from torch.utils.data import Dataset, DataLoader
+from torch.utils.data import Dataset, DataLoader, Sampler
 from sklearn.model_selection import RepeatedKFold
 
 from os import path as osp
@@ -16,6 +16,7 @@ from forge import flags
 flags.DEFINE_boolean("include_coords",False, "If False, remove coordinate information")
 flags.DEFINE_boolean("rescale", True, "Rescales intensities")
 flags.DEFINE_boolean("cross_validate",True,"Do K-fold cross-validation")
+# flags.DEFINE_boolean("patient_batch",True,"Batch data by patient (data heading)")
 
 # Job management
 # flags.DEFINE_integer("batch size",5,"training batch size")
@@ -25,12 +26,44 @@ flags.DEFINE_integer("split_seed",1,"Seed for KFold split (integer for reproduci
 
 # "wavelengths between 0.05 and 1 mm in 0.025 mm increments."
 LSPACE = np.arange(0.05,1.05,0.025) # corresponds to 39 non-coord columns of data
-L_INDS = None # specific indices of data to select
+L_INDS = None#None # specific indices of data to select
 
 DATAFOLDER = './penn_data'
 
 HEADINGS = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])
 
+def pad_dataframe(df): # make all data the same shape, add label "2" for no data
+    # Find the max for both dimensions
+    max_dim = max(df[0].max(), df[1].max())
+
+    # Create all possible combinations of x and y within the new bounds
+    mesh_x, mesh_y = np.meshgrid(range(max_dim + 1), range(max_dim + 1))  # New square grid
+    all_combinations = pd.DataFrame({
+        0: mesh_x.ravel(),
+        1: mesh_y.ravel()
+    })
+
+    # Merge with the original dataframe to find missing combinations
+    merged_df = pd.merge(all_combinations, df, how='left', on=[0, 1])
+
+    # Fill missing 'label' values with 2 (denoting 'no data')
+    merged_df['label'] = merged_df['label'].fillna(2)
+
+    # Identify columns other than 0, 1, and 'label' to fill with zeros
+    fill_zero_columns = [col for col in df.columns if col not in [0, 1, 'label']]
+
+    # Fill missing values for these columns with 0
+    merged_df[fill_zero_columns] = merged_df[fill_zero_columns].fillna(0)
+
+    # Fix any potential column naming due to merge
+    if any(isinstance(col, int) for col in merged_df.columns):  # Check if any column is integer
+        merged_df.columns = [str(col) if isinstance(col, int) else col for col in merged_df.columns]
+
+    # Remove any additional columns created from merging
+    drop_columns = [col for col in merged_df if col.endswith('_drop')]
+    merged_df.drop(columns=drop_columns, inplace=True)
+
+    return merged_df,max_dim
 
 class PennData(Dataset):
 
@@ -57,6 +90,10 @@ class PennData(Dataset):
 		labels = pd.concat(label_list, ignore_index=True)
 		df = pd.concat([labels, df], axis="columns") # Append labels to data
 
+		df = df.sample(frac = 1) # shuffle dataframe
+
+		self.df = df
+
 		all_labels = df['label'].to_numpy()
 		all_data = df.iloc[:,1:].to_numpy()
 
@@ -79,6 +116,9 @@ class PennData(Dataset):
 		else:
 			self.coords = None
 
+		if k_inds != None:
+			self.data = self.data[:,np.array(k_inds)]
+
 	def __len__(self):
 		return len(self.data)
 
@@ -116,6 +156,21 @@ class PennData(Dataset):
 			self.labels = state['label']
 
 
+class headingSampler(Sampler): # sample data so batches each come from unique patient
+    def __init__(self, data_source):
+        super().__init__()
+        self.data_source = data_source
+        # Sorting data so it is batched by patient
+        self.sorted_indices = sorted(range(len(data_source)), key=lambda idx: data_source[idx]['coords'][0])
+
+    def __iter__(self):
+        # Yielding indices batch-wise, but indices within each batch are sorted based on h_idx
+        for idx in self.sorted_indices:
+            yield idx
+
+    def __len__(self):
+        return len(self.data_source)
+
 def load(config):
 
 	n_splits = int(len(HEADINGS)/((1-config.train_split)*len(HEADINGS)))
@@ -128,18 +183,27 @@ def load(config):
 		n_val = len(test_ind)//2
 		n_test = len(test_ind)-n_val   
 		n_train = len(train_ind)
+
+
+		sampler = None
 		
 		# set up training DataLoader
 		train_data = PennData(DATAFOLDER,HEADINGS[train_ind],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,shuffle = True)
+		if config.include_coords:
+			sampler = headingSampler(train_data)
+		train_loader = DataLoader(train_data,batch_size = min(config.batch_size, len(train_data)),num_workers=0,sampler = sampler)
 
 		# set up test DataLoader
 		test_data = PennData(DATAFOLDER,HEADINGS[test_ind[:n_test]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,shuffle = True)
+		if config.include_coords:
+			sampler = headingSampler(test_data)
+		test_loader = DataLoader(test_data,batch_size = min(config.batch_size, len(test_data)),num_workers=0,sampler = sampler)
 
 		# set up val DataLoader
 		val_data = PennData(DATAFOLDER,HEADINGS[test_ind[n_test:]],k_inds = L_INDS,include_coords = config.include_coords,rescale = config.rescale)
-		val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,shuffle = True)
+		if config.include_coords:
+			sampler = headingSampler(val_data)
+		val_loader = DataLoader(val_data,batch_size = min(config.batch_size, len(val_data)),num_workers=0,sampler = sampler)
 		
 
 		dataloaders = {'train':train_loader, 
@@ -155,4 +219,4 @@ def load(config):
 		if not config.cross_validate:
 			break
 
-	return kf_dataloaders
+	return kf_dataloaders,L_INDS
diff --git a/testing.ipynb b/testing.ipynb
index 5b7601a..44b4dd2 100644
--- a/testing.ipynb
+++ b/testing.ipynb
@@ -2,16 +2,18 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 1,
    "id": "4dee7ff1-01a4-4038-b493-9729ff3693f7",
    "metadata": {},
    "outputs": [],
    "source": [
     "import torch\n",
+    "import torch.nn as nn\n",
+    "import torch.nn.functional as F\n",
     "import numpy as np\n",
     "from sklearn.model_selection import RepeatedKFold\n",
     "import pandas as pd\n",
-    "from torch.utils.data import Dataset, DataLoader\n",
+    "from torch.utils.data import Dataset, DataLoader, Sampler\n",
     "\n",
     "import matplotlib.pyplot as plt\n",
     "from os import path as osp\n",
@@ -20,56 +22,367 @@
     "from forge import flags\n",
     "import forge.experiment_tools as fet\n",
     "\n",
-    "from penn_dataset import PennData"
+    "from penn_dataset import PennData,headingSampler"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 42,
    "id": "92bae5ef-5c95-4528-a76d-003bbe09786c",
    "metadata": {},
    "outputs": [],
    "source": [
-    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n"
+    "headings = np.array(['aaa0043','aaa0044','aaa0060','aaa0061','aaa0063','aaa0064','aaa0066','aaa0069','aaa0086','aaa0087','aaa_0051','aaa_0053','aaa_0054','aaa_0059','aaa_0071','aaa_0072'])\n",
+    "kinds = None\n",
+    "dat = PennData('./penn_data',headings,include_coords = False,k_inds = kinds)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 53,
+   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([10, 1, 39])"
+      ]
+     },
+     "execution_count": 53,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "df,bounds = pad_dataframe(dat.df)\n",
+    "loader = DataLoader(dat,batch_size = 10,sampler = None)\n",
+    "example = next(iter(loader))\n",
+    "xx = torch.unsqueeze(example['data'].float(),1)\n",
+    "s = xx.shape\n",
+    "s"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 86,
+   "id": "c15fbcaf-a7cd-4b52-9b94-81b3b16dee64",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[-0.1314,  0.1730],\n",
+       "        [-0.1235,  0.1467],\n",
+       "        [-0.1051,  0.1324],\n",
+       "        [-0.1355,  0.1999],\n",
+       "        [-0.2359,  0.4004],\n",
+       "        [-0.2339,  0.4176],\n",
+       "        [-0.1553,  0.3063],\n",
+       "        [-0.1002,  0.1395],\n",
+       "        [-0.1073,  0.1191],\n",
+       "        [-0.0951,  0.1044]], grad_fn=<AddmmBackward0>)"
+      ]
+     },
+     "execution_count": 86,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m = ConvNN(16,2,2)\n",
+    "m(example)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
-   "id": "9d401c3e-bbc9-4ee9-a4e1-7ca7f7a3d701",
+   "execution_count": 84,
+   "id": "94bb950c-609a-44f2-a6f4-5d50f944cd90",
    "metadata": {},
    "outputs": [],
    "source": [
-    "dat = PennData('./penn_data',headings[:1],include_coords = True)"
+    "class ConvNN(nn.Module):\n",
+    "    def __init__(self, dim_hidden, kernel_size,num_classes):\n",
+    "        super(ConvNN, self).__init__()\n",
+    "        # Define the layers\n",
+    "        self.conv1 = nn.Conv1d(1,dim_hidden,kernel_size)  # First convolution layer\n",
+    "        self.conv2 = nn.Conv1d(dim_hidden,dim_hidden,kernel_size) # second convolution layer\n",
+    "\n",
+    "        self.fc1 = nn.Linear(dim_hidden,dim_hidden)\n",
+    "        self.fc2 = nn.Linear(dim_hidden,num_classes)\n",
+    "        # self.softmax = nn.Softmax(dim=1)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = x['data']\n",
+    "        x = torch.unsqueeze(x,1).float() # add a single channel index\n",
+    "\n",
+    "        # Forward pass through the network\n",
+    "        x = F.relu(self.conv1(x))  # Activation function between layers\n",
+    "        \n",
+    "        x = F.relu(self.conv2(x))\n",
+    "\n",
+    "        global_max_pool = nn.MaxPool1d(kernel_size=x.size()[2])  # This takes the size of the third dimension\n",
+    "        x = global_max_pool(x).squeeze(2)\n",
+    "\n",
+    "        x = F.relu(self.fc1(x))\n",
+    "        x = self.fc2(x)\n",
+    "        \n",
+    "        return x\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
-   "id": "8ecb4309-6ea4-4313-a913-3d832e90fe25",
+   "execution_count": 38,
+   "id": "14013b2d-5847-4e1a-800e-edd273d8d791",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'label': tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n",
+       " 'coords': tensor([[ 0., 28., 18.],\n",
+       "         [ 0., 29., 48.],\n",
+       "         [ 0., 27., 25.],\n",
+       "         [ 0., 32., 17.],\n",
+       "         [ 0.,  8., 36.],\n",
+       "         [ 0., 19., 35.],\n",
+       "         [ 0., 33., 45.],\n",
+       "         [ 0.,  7., 25.],\n",
+       "         [ 0.,  6.,  5.],\n",
+       "         [ 0., 36., 35.]], dtype=torch.float64),\n",
+       " 'data': tensor([[-0.4918, -0.5943, -1.0721, -0.9575, -0.6650, -0.7359],\n",
+       "         [-0.6024, -1.1120, -0.5868,  0.0182,  0.7436, -0.2009],\n",
+       "         [-0.8743, -0.2060, -1.3125, -0.3913, -0.3318, -0.1418],\n",
+       "         [ 0.3684, -0.0516, -0.7292, -1.1248, -0.7590, -0.5693],\n",
+       "         [-0.7428, -0.7065, -1.0986, -0.8626, -1.0908, -1.0204],\n",
+       "         [ 0.0483, -0.7283,  1.1701, -0.0736, -1.2278, -0.2546],\n",
+       "         [-0.3632, -1.0483,  1.1965, -0.5309, -1.1567,  1.5961],\n",
+       "         [-1.2088, -0.7159, -0.7503, -0.7777, -0.2693, -0.7245],\n",
+       "         [-0.9576, -0.6151,  0.5618,  1.8565,  3.3299,  2.6075],\n",
+       "         [-0.3988, -0.2353,  0.0685, -1.2082, -0.7855, -1.1990]],\n",
+       "        dtype=torch.float64)}"
+      ]
+     },
+     "execution_count": 38,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "inps"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "id": "158d7836-db5c-4210-9814-43806dd777ad",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "torch.Size([153300, 2])"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "torch.cat(outs,dim = 0).shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "id": "68243435-58a8-4717-ae96-bd281fbd64c5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = SpectralAttentionNet(len(kinds),16,2)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "id": "0dde6efa-3ce3-4f89-abc6-5893e066f9dc",
+   "metadata": {
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[-0.6669,  0.0875],\n",
+       "        [-0.7097,  0.0436],\n",
+       "        [-0.6941,  0.0615],\n",
+       "        [-0.6393,  0.1075],\n",
+       "        [-0.7090,  0.0438],\n",
+       "        [-0.7054,  0.0472],\n",
+       "        [-0.7099,  0.0442],\n",
+       "        [-0.7042,  0.0485],\n",
+       "        [-0.5686,  0.1150],\n",
+       "        [-0.7015,  0.0549]], grad_fn=<AddmmBackward0>)"
+      ]
+     },
+     "execution_count": 25,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "model(inps)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 19,
+   "id": "45e4cc12-5ef6-40ad-ad9e-45988ac7dbc1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "\n",
+    "\n",
+    "    "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "id": "81dd05f3-bee8-43a4-8c51-f92e023bae25",
    "metadata": {},
    "outputs": [
     {
      "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>label</th>\n",
+       "      <th>h_idx</th>\n",
+       "      <th>nslice</th>\n",
+       "      <th>0</th>\n",
+       "      <th>1</th>\n",
+       "      <th>2</th>\n",
+       "      <th>3</th>\n",
+       "      <th>4</th>\n",
+       "      <th>5</th>\n",
+       "      <th>6</th>\n",
+       "      <th>...</th>\n",
+       "      <th>31</th>\n",
+       "      <th>32</th>\n",
+       "      <th>33</th>\n",
+       "      <th>34</th>\n",
+       "      <th>35</th>\n",
+       "      <th>36</th>\n",
+       "      <th>37</th>\n",
+       "      <th>38</th>\n",
+       "      <th>39</th>\n",
+       "      <th>40</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>4</th>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0.001812</td>\n",
+       "      <td>0.002843</td>\n",
+       "      <td>0.001445</td>\n",
+       "      <td>0.003165</td>\n",
+       "      <td>0.002113</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.016286</td>\n",
+       "      <td>0.019752</td>\n",
+       "      <td>0.027634</td>\n",
+       "      <td>0.039219</td>\n",
+       "      <td>0.053746</td>\n",
+       "      <td>0.070735</td>\n",
+       "      <td>0.089852</td>\n",
+       "      <td>0.110827</td>\n",
+       "      <td>0.133419</td>\n",
+       "      <td>0.157407</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>1 rows × 44 columns</p>\n",
+       "</div>"
+      ],
       "text/plain": [
-       "array([[ 0.,  1.,  1.],\n",
-       "       [ 0.,  2.,  1.],\n",
-       "       [ 0.,  3.,  1.],\n",
-       "       ...,\n",
-       "       [ 0., 31., 41.],\n",
-       "       [ 0., 32., 41.],\n",
-       "       [ 0., 33., 41.]])"
+       "   label  h_idx  nslice  0  1         2         3         4         5  \\\n",
+       "4      0      0       0  2  2  0.001812  0.002843  0.001445  0.003165   \n",
+       "\n",
+       "          6  ...        31        32        33        34        35        36  \\\n",
+       "4  0.002113  ...  0.016286  0.019752  0.027634  0.039219  0.053746  0.070735   \n",
+       "\n",
+       "         37        38        39        40  \n",
+       "4  0.089852  0.110827  0.133419  0.157407  \n",
+       "\n",
+       "[1 rows x 44 columns]"
       ]
      },
-     "execution_count": 15,
+     "execution_count": 18,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "dat.coords"
+    "# imagemask = (df['h_idx'] == 0)\n",
+    "# coordmask = ((df[0] == 1) and (df[1] == 1))\n",
+    "df[(df['h_idx'] == 0) & ((df[0] == 2) & (df[1] == 2))]"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "52ef379d-ba80-4851-96d7-d9d6ba474406",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "18686a3f-9652-4889-916e-8e70459381b4",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "78b89c6b-8a3b-45e7-99a8-b00cfac50d49",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "fd0a8ff8-df49-4b44-884f-588be5bc2d3c",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "code",
    "execution_count": 6,
@@ -140,25 +453,6 @@
     "np.bincount(loaddat[0]['train'].dataset.all_labels)"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": 13,
-   "id": "07e0b160-d5d1-4e54-b4a7-ccaf2224598a",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<generator object Module.parameters at 0x3007207b0>"
-      ]
-     },
-     "execution_count": 13,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": []
-  },
   {
    "cell_type": "code",
    "execution_count": null,
diff --git a/todo.txt b/todo.txt
index 0fd9ad1..1fb2ad5 100644
--- a/todo.txt
+++ b/todo.txt
@@ -1,10 +1,7 @@
 To Do on modeling:
 
-- write results to file with deepdish, then read them to compare models
-
-- get code working with a subset of kvals
-
 - get Conv1d working as an architecture
 
 - consider patch-attention based strategy
 
+- create a sampler to batch data by common patient file
diff --git a/train.py b/train.py
index baee91a..8246891 100644
--- a/train.py
+++ b/train.py
@@ -38,11 +38,11 @@ torch.manual_seed(0)
 # Job config
 flags.DEFINE_string('data_config', 'penn_dataset.py',
 					'Path to a data config file.')
-flags.DEFINE_string('model_config', 'basic_feedforward.py',
+flags.DEFINE_string('model_config', 'convNet.py',
 					'Path to a model config file.')
 flags.DEFINE_string('results_dir', 'checkpoints',
 					'Top directory for all experimental results.')
-flags.DEFINE_string('model_name', 'gpt-FCNN',
+flags.DEFINE_string('model_name', 'conv1d',
 					'shorthand name for model.')
 flags.DEFINE_string('run_name', 'hyperparam_testing',
 					'Name of this job and name of results folder.')
@@ -81,13 +81,15 @@ flags.DEFINE_float("beta1", 0.9, "Adam Beta 1 parameter")
 flags.DEFINE_float("beta2", 0.999, "Adam Beta 2 parameter")
 
 # Specific config options
-flags.DEFINE_integer("input_size",39,"Input shape to model")
+# flags.DEFINE_integer("input_size",39,"Input shape to model")
 
 #########################################################################################
 
 def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEntropyLoss()):
 	# this function does not account for class weights when evaluating cross-entropy loss.
 	# however, they are accounted for when evaluating training loss
+
+	# MODIFY THIS FUNCTION TO ACCOUNT FOR COORDINATES BEING INCLUDED
 	reports = None
 	for data in loader:
 		labels = data['label']
@@ -96,8 +98,10 @@ def evaluate(model, loader, device,fold = 0,headings = [],loss_func = nn.CrossEn
 		labels_tensor = torch.zeros((len(labels), 2))
 		for i, label in enumerate(labels):
 			labels_tensor[i, label] = 1
+		labels_tensor = labels_tensor.to(device)
 
-		model_output = model(inputs) # evaluate model
+		model = model.to(device)
+		model_output = model(data) # evaluate model
 
 		loss = loss_func(model_output, labels_tensor) # compute loss
 		outputs = AttrDict({"loss": loss, "prediction": model_output,'data_fold':fold})
@@ -134,7 +138,17 @@ def main():
 
 	# Load data
 	data_name = "penn_data"
-	kfold_loaders = fet.load(config.data_config, config)
+	kfold_loaders,L_inds = fet.load(config.data_config, config)
+
+	if L_inds == None: # in this case we train on all wavelengths
+		Ldata_size = 39
+	else:
+		Ldata_size = len(L_inds)
+
+	config.input_size = Ldata_size
+
+	#############################################################
+	# ENVIRONMENT/DIRECTORY MANAGEMENT
 
 	# Prepare environment
 	params_in_run_name = [
@@ -178,11 +192,30 @@ def main():
 	n_folds = len(kfold_loaders)
 	print("Doing {}-fold cross-validation.".format(n_folds))
 
-	# KFOLD TRAINING LOOP
+	#############################################################
+	# ENVIRONMENT/DIRECTORY MANAGEMENT
+	# (KFOLD TRAINING LOOP)
 	for k,loader_k in enumerate(kfold_loaders): # loop over data splits
 
 		print("Training fold {}...".format(k+1))
 
+		# create folder for this data split
+		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
+		fold_dir_exists = osp.exists(fold_dir)
+		if not fold_dir_exists:
+			if config.resume:
+				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
+			else:
+				os.makedirs(fold_dir)
+		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
+
+		# keep track of which data is test data for a given Kfold data split
+		test_headings = loader_k['test_headings']
+		headingsFile = osp.join(fold_dir,"test_headings.txt")
+		with open(headingsFile,'w') as headfile:
+			for heading in test_headings:
+				headfile.write(heading+'\n')
+
 		# Load model
 		model,model_name = fet.load(config.model_config, config)
 		model = model.to(device)
@@ -221,24 +254,9 @@ def main():
 		train_total_counts = sum(train_class_counts)
 		class_weight = torch.tensor(1.0 / train_class_counts) * train_total_counts / 2.0
 
-		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
-				
-		# create folder for this data split
-		fold_dir = osp.join(logdir,"data_fold{}".format(k+1))
-		fold_dir_exists = osp.exists(fold_dir)
-		if not fold_dir_exists:
-			if config.resume:
-				raise ValueError("Can't resume when the checkpoint/fold dir '{}' doesn't exist.".format(fold_dir))
-			else:
-				os.makedirs(fold_dir)
-		checkpoint_name = osp.join(fold_dir, 'model_fold{}.ckpt'.format(k+1))
+		class_weight = nested_to(class_weight,device,torch.float32)
 
-		# keep track of which data is test data for a given Kfold data split
-		test_headings = loader_k['test_headings']
-		headingsFile = osp.join(fold_dir,"test_headings.txt")
-		with open(headingsFile,'w') as headfile:
-			for heading in test_headings:
-				headfile.write(heading+'\n')
+		loss_func = nn.CrossEntropyLoss(weight = class_weight) # define reweighted loss function
 
 		# print(checkpoint_name)
 
@@ -293,7 +311,9 @@ def main():
 				for i, label in enumerate(labels):
 					labels_tensor[i, label] = 1
 
-				model_output = model(data) # evaluate model
+				labels_tensor = labels_tensor.to(device)
+
+				model_output = model(data_dict) # evaluate model
 
 				loss = loss_func(model_output, labels_tensor) # compute loss
 				runsum += loss.item() # track loss
